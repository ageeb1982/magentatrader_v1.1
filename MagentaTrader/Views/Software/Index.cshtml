@{
    ViewBag.Title = "Software";

    var Version = "v.Beta.1.20160819";
    var Symbol = Request.QueryString["symbol"];
    var TradierScope = Request.QueryString["scope"];
    var TradierState = Request.QueryString["state"];
    var TradierCode = Request.QueryString["code"];
    
    var Broker = Request.QueryString["broker"];
    var BrokerCode = Request.QueryString["code"];

    var Questrade_access_token = Request.QueryString["access_token"];
    var Questrade_refresh_token = Request.QueryString["refresh_token"];
    var Questrade_token_type = Request.QueryString["token_type"];
    var Questrade_expires_in = Request.QueryString["expires_in"];
    var Questrade_api_server = Request.QueryString["api_server"];   
}

<link href="/bower_components/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="/bower_components/metisMenu/dist/metisMenu.min.css" rel="stylesheet">
<link href="/dist/css/sb-admin-2.css" rel="stylesheet">
<link href="/bower_components/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
<link href="/css/styles.css" rel="stylesheet" />
<link href="/css/bootstrap-toggle.min.css" rel="stylesheet">
<link href="~/css/toastr.css" rel="stylesheet" />

<script src="/bower_components/jquery/dist/jquery.min.js"></script>
<script src="/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
<script src="/bower_components/metisMenu/dist/metisMenu.min.js"></script>
<script src="/bower_components/raphael/raphael-min.js"></script>

<script src="/dist/js/sb-admin-2.js"></script>
<script src="/js/jquery.slimscroll.min.js"></script>
<script src="/js/bootstrap-toggle.min.js"></script>
<script src="~/js/toastr.js"></script>

<div id="wrapper">
    <nav id="menu-wrapper" class="navbar navbar-default navbar-static-top" role="navigation" style="margin-bottom: 0">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="/Home" style="font-size:smaller"><span><img src="/img/logo-1.png" /></span><span class="hidden-xs"> - @Version</span></a>
        </div>

        <ul class="nav navbar-top-links navbar-right">
            <li class="dropdown">
                <a class="dropdown-toggle" data-toggle="dropdown" href="#">
                    <i class="fa fa-globe fa-fw"></i>  <i class="fa fa-caret-down"></i>
                </a>
                <ul class="dropdown-menu dropdown-messages">
                    <li>
                        <a href="/Calendar">
                            <div><strong>Calendar</strong></div>
                            <div>30-Day Seasonal Scanner Calendar</div>
                        </a>
                    </li>
                    <li>
                        <hr style="margin: 10px 0 10px 0;" />
                        <a href="/Screener">
                            <div><strong>Screener</strong></div>
                            <div>Symbol Screener and Filter</div>
                        </a>
                    </li>
                    <li>
                        <hr style="margin: 10px 0 10px 0;" />
                        <a href="#" onclick="openEarnings()">
                            <div><strong>Earnings</strong></div>
                            <div>Price movements on earnings.</div>
                        </a>
                    </li>
                    <li>
                        <hr style="margin: 10px 0 10px 0;" />
                        <a href="#" onclick="openPrePostEarnings()">
                            <div><strong>Pre/Post Earning Price Movement</strong></div>
                            <div>Movement of prices 10 days after and before earnings.</div>
                        </a>
                    </li>
                    <li>
                        <hr style="margin: 10px 0 10px 0;" />
                        <a href="#" onclick="openMovingAverage()">
                            <div><strong>Moving Average</strong></div>
                            <div>Create Simple and Exponential Moving Averages</div>
                        </a>
                    </li>
                    <li>
                        <hr style="margin: 10px 0 10px 0;" />
                        <a href="/Userfavorite">
                            <div><strong>Favorites</strong></div>
                            <div>Create your favorite symbol list</div>
                        </a>
                    </li>
                    <li>
                        <hr style="margin: 10px 0 10px 0;" />
                        <a href="/Sector">
                            <div><strong>Sector</strong></div>
                            <div>Graph sector and associated symbol</div>
                        </a>
                    </li>
                </ul>
                <!-- /.dropdown-messages -->
            </li>
            <li class="dropdown">
                <a class="dropdown-toggle" data-toggle="dropdown" href="#">
                    <i class="fa fa-gear fa-fw"></i>  <i class="fa fa-caret-down"></i>
                </a>
                <ul class="dropdown-menu dropdown-messages">

                    <li>
                        <a href="#" onclick="userEdit()">
                            <div><strong>User Information</strong></div>
                            <div>Your personal information.</div>
                        </a>
                        @*<a href="/Account">
                            <div><strong>Account</strong></div>
                            <div>Your account profile page.</div>
                        </a>*@
                    </li>

                    <li>
                        <hr style="margin: 10px 0 10px 0;" />
                        <a href="#">
                            <div><strong>Tradier</strong></div>
                            @if (TradierCode != null)
                            {
                                <input class="btn btn-sm btn-primary" title="View Account" value="View Account" type="submit" onclick="viewTradierAccount()" />
                            }
                            else
                            {
                                <input class="btn btn-sm btn-primary" title="Connect" value="Connect" type="submit" onclick="connectTradier()"/> @*connectTradier*@
                            }
                        </a>
                    </li>
                    <li>
                        <hr style="margin: 10px 0 10px 0;" />
                        <a href="#">
                            <div><strong>Questrade</strong></div>
                            @if (Broker == "Questrade" && BrokerCode != null)
                            {
                                <input class="btn btn-sm btn-primary" title="View Account" value="View Account" type="submit" onclick="viewTradierAccount()" />
                            }
                            else
                            {
                                <input class="btn btn-sm btn-primary" title="Connect" value="Connect" type="submit" onclick="connectQuestrade()" /> @*connectQuestrade*@
                            }
                        </a>
                    </li>
                    <li >
                        <hr style="margin: 10px 0 10px 0;" />
                        <a href="#">
                            <div><strong>Log Off @User.Identity.Name</strong></div>
                            <div>
                                @using (Html.BeginForm("LogOff", "Account"))
                                {
                                    @Html.AntiForgeryToken()
                                    <input class="btn btn-sm btn-danger" title="Log off" value="Log Off" type="submit" />
                                }
                            </div>
                        </a>
                    </li>

                    @using Microsoft.AspNet.Identity
                    @{
                        if (User.Identity.GetUserName().ToUpper() == "DPILGER" || User.Identity.GetUserName().ToUpper() == "MORTON" || User.Identity.GetUserName().ToUpper() == "JRGS")
                        {
                            <li>
                                <hr style="margin: 10px 0 10px 0;" />
                                <a href="/Admin">
                                    <div><strong>Admin</strong></div>
                                    <div>Administration modules for Magenta Trader.</div>
                                </a>
                            </li>
                        }
                    }

                    <li>
                        <hr style="margin: 10px 0 10px 0;" />
                        <a href="#">
                            <div><strong>Chart Dark Background?</strong></div>
                            <div><input id="chartBlackBackground" type="checkbox" checked data-toggle="toggle"></div>
                        </a>
                    </li>

                </ul>
                <!-- /.dropdown-messages -->
            </li>
        </ul>

        <div id="sidebar-wrapper" class="navbar-default sidebar" role="navigation">
            <div class="sidebar-nav navbar-collapse">
                <ul class="nav" id="side-menu">
                    <li class="sidebar-search">
                        <div class="input-group custom-search-form" style="width:100%">
                            <select id="Exchange" class="form-control">
                                <option value="AMEX">AMEX</option>
                                <option value="NASDAQ">NASDAQ</option>
                                <option value="NYSE">NYSE</option>
                                <option value="US">ALL US EQUITIES</option>
                                <option value="PSE">PSE</option>
                                <option value="TSX">TSX</option>
                            </select>
                        </div>
                    </li>
                    <li class="sidebar-search">
                        <div class="input-group custom-search-form">
                            <input id="searchSymbol" type="text" class="form-control" style="padding-right:2px" placeholder="Symbol...">
                            <span class="input-group-btn">
                                <button class="btn btn-default" type="button" id="getSymbol" onclick="getSymbol()">
                                    <i class="fa fa-refresh"></i>
                                </button>
                            </span>
                        </div>
                    </li>
                    <li class="sidebar-item">
                        <a id="symbol" href="#" style="padding: 2px 15px; color: black; text-align: center"><span>Symbol</span></a>
                        <ul class="nav nav-second-level">
                            <li id=symbolInfoChart></li>
                            <li id=symbolInfoChannel></li>
                            <li id=symbolSlopePercentage></li>
                            <li id=symbolInfoCoefficient></li>
                            <li id=symbolInfoRange></li>
                            <li id=symbolInfoSeasonalityCorrelation></li>
                        </ul>
                    </li>
                    
                    <li class="sidebar-item">
                        <div id="scannerDayRange" class="input-group-btn" style="padding: 2px 15px;">
                            <button id="scannerDayRangeMenu" class="col-sm-10 btn btn-default">
                                <b>30 Day(s) Scanner</b>
                            </button>
                            <button class="col-sm-2 btn btn-default dropdown-toggle" data-toggle="dropdown">
                                <span class="caret"></span>
                            </button>
                            <ul id="scannerDayRangeItem" class="dropdown-menu pull-left" style="height: auto; max-height: 200px; overflow-x: hidden; padding:10px"></ul>
                        </div>
                        <ul id="scannerYear" class="nav nav-second-level"></ul>
                    </li>

                    <li class="sidebar-item">
                        <a id="averageScannerTotal" href="#" style="padding: 2px 15px; color:black; text-align:center"><span>Average</span></a>
                    </li>
                    <li class="sidebar-item">
                        <a id="varScannerYearHeading" href="#" style="padding: 2px 15px; color:black; text-align:center"><span>Variable Scanner</span></a>
                    </li>
                    <li class="sidebar-search">
                        <div class=" input-group custom-search-form">
                            <input id="startNoOfDay" type="text" placeholder="Min..." class="form-control">
                            <span class="input-group-btn" style="width:0px;"></span>
                            <input id="endNoOfDay" type="text" placeholder="Max..." class="form-control">
                            <span class="input-group-btn">
                                <button class="btn btn-default" type="button" id="varScanner" onclick="varScanner()">
                                    <i class="fa fa-refresh"></i>
                                </button>
                            </span>
                        </div>
                    </li>
                    <li class="sidebar-item">
                        <a id="earningScheduleLabel" href="#" style="padding: 2px 15px; color:black; text-align:center"><span>Earnings Schedule</span></a>
                        <ul id="earningSchedule" class="nav nav-second-level">
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <div id="page-wrapper">
        <div id="chartdiv" style="width: 100%; height: 93vh; padding: 20px 10px 10px 10px;"></div>
    </div>
</div>

<div class="modal fade" id="loading" tabindex="-1" role="dialog" aria-labelledby="Loading..." aria-hidden="true" >
    <div class="modal-dialog" style="width: 220px;">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Loading...</h4>
            </div>
            <div class="modal-body">
                <img src="/img/progress_bar.gif" />
            </div>
        </div>
    </div>
</div>

<div class="modal" id="Earnings">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h4 id="EarningsTitle" class="modal-title"></h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-lg-3"><input class="form-control" id="ChronologicalOrder" type="checkbox" onclick="clearEarningChart()" /></div>
                    <div class="col-lg-6" style="padding-top: 10px;">In Chronological Order.</div>
                    <div class="col-lg-3"><button class='btn btn-info btn-xs' onclick='updateZacksEarningHistory()'>Update Earnings</button></div>
                </div>
                <div id="DateButtons"class="row"></div>
                <div id="earningChartdiv" style="width: 100%; height: 400px; padding: 20px 10px 10px 10px; "></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="PrePostEarnings" tabindex="-1" role="dialog">
    <div class="modal-dialog" style="width: 1100px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h4 id="PrePostEarningsTitle" class="modal-title"></h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-lg-9" id="PrePostDateButtons"></div>
                    <div class="col-lg-3"><button class='btn btn-info btn-xs' onclick='updateZacksEarningHistory()'>Update Earnings</button></div>
                </div>
                <br />
                <div class="row" style="padding-left:25px;padding-right:25px">
                    <ul class="nav nav-tabs">
                        <li class="active"><a data-toggle="tab" href="#PrePostEarningTableSection">Table</a></li>
                        <li><a data-toggle="tab" href="#PrePostEarningGraphSection">Graph</a></li>
                        <li><a data-toggle="tab" href="#PrePostEarningCandleStickSection">Candle Stick</a></li>
                    </ul>
                    <div class="tab-content">
                        <div id="PrePostEarningTableSection" class="tab-pane active">
                            <div id="PrePostEarningsGrid" class="grid"></div>
                        </div>
                        <div id="PrePostEarningGraphSection" class="tab-pane">
                            <div id="prePostEarningChartdiv" style="width: 100%; height: 300px;"></div>
                        </div>
                        <div id="PrePostEarningCandleStickSection" class="tab-pane">
                            <dl class="dl-horizontal">
                                <dt style="padding-top:15px">Earning Dates</dt>
                                <dd style="padding-top:5px">
                                    <select class="form-control custom-width" id="prePostEarningDates" onchange="createPrePostEarningCandleStick();"></select>
                                </dd>
                            </dl>
                            <div id="prePostEarningCandleStickChartdiv" style="width: 100%; height: 300px;"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="Tradier" tabindex="-1" role="dialog">
    <div class="modal-dialog" style="width: 1100px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h4 id="TradierTitle" class="modal-title"><img src="/img/tradier-logo.png" /></h4>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs">
                    <li class="active"><a data-toggle="tab" href="#TradierAccount">Account</a></li>
                    <li><a data-toggle="tab" href="#TradierOrders">Orders</a></li>
                    <li><a data-toggle="tab" href="#TradierPositions">Positions</a></li>
                </ul>
                <div class="tab-content">
                    <div id="TradierAccount" class="tab-pane active">
                        <div id="TradierAccountGrid" class="grid"></div>
                    </div>
                    <div id="TradierOrders" class="tab-pane">
                        @*<dl class="dl-horizontal">
                            <dt style="padding-top:15px">Accounts</dt>
                            <dd style="padding-top:5px">
                                <select class="form-control custom-width" id="TradierAccounts""></select>
                            </dd>
                        </dl>*@
                        <div id="TradierOrdersGrid" class="grid"></div>
                    </div>
                    <div id="TradierPositions" class="tab-pane">
                        @*<dl class="dl-horizontal">
                            <dt style="padding-top:15px">Accounts</dt>
                            <dd style="padding-top:5px">
                                <select class="form-control custom-width" id="TradierPositionAccounts" onchange="getTradierPositions();"></select>
                            </dd>
                        </dl>*@
                        <div id="TradierPositionsGrid" class="grid"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="TradierOrder">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h4 id="TradierOrderTitle" class="modal-title"></h4>
                <p id="TradierOrderSubtitle"></p>
            </div>
            <div class="modal-body scroll">
                <dl class="dl-horizontal">
                    <dt id="TradierOrder_Class_Label">Class</dt>
                    <dd>
                        <select class="form-control custom-width" id="TradierOrder_Class">
                            <option value="equity">Equity</option>
                            <option value="option">Option</option>
                        </select>
                    </dd>
                    <dt id="TradierOrder_Symbol_Label">Symbol</dt>
                    <dd>
                        <input class="form-control custom-width" id="TradierOrder_Symbol" type="text" />
                    </dd>
                    <dt id="TradierOrder_OptionSymbol_Label">Option Symbol</dt>
                    <dd>
                        <input class="form-control custom-width" id="TradierOrder_OptionSymbol" type="text" />
                    </dd>
                    <dt id="TradierOrder_Duration_Label">Duration</dt>
                    <dd>
                        <select class="form-control custom-width" id="TradierOrder_Duration">
                            <option value="day">Day</option>
                            <option value="gtc">GTC</option>
                        </select>
                    </dd>
                    <dt id="TradierOrder_Side_Label">Side</dt>
                    <dd>
                        <select class="form-control custom-width" id="TradierOrder_Side">
                            <option value="buy">Buy</option>
                            <option value="buy_to_cover">Buy To Cover</option>
                            <option value="sell">Sell</option>
                            <option value="sell_short">Sell Short</option>
                        </select>
                    </dd>
                    <dt id="TradierOrder_Quantity_Label">Quantity</dt>
                    <dd>
                        <input class="form-control custom-width" id="TradierOrder_Quantity" type="text" />
                    </dd>
                    <dt id="TradierOrder_Type_Label">Type</dt>
                    <dd>
                        <select class="form-control custom-width" id="TradierOrder_Type" onchange="changeTradierOrderType();">
                            <option value="market">Market</option>
                            <option value="limit">Limit</option>
                            <option value="stop">Stop</option>
                            <option value="stop_limit">Stop Limit</option>
                        </select>
                    </dd>
                    <dt id="TradierOrder_Price_Label">Limit Price</dt>
                    <dd>
                        <input class="form-control custom-width" id="TradierOrder_Price" type="text" />
                    </dd>
                    <dt id="TradierOrder_Stop_Label">Stop Price</dt>
                    <dd>
                        <input class="form-control custom-width" id="TradierOrder_Stop" type="text" />
                    </dd>
                </dl> 
            </div>
            <div class="modal-footer">
                <span class='pull-left'>
                    <span>
                        <button type="button" class="btn btn-danger" id="cancelTradierEquity" onclick="cancelTradierEquity()">
                            Cancel
                        </button>
                        <button type="button" class="btn btn-primary" id="confirmTradierEquity" onclick="confirmTradierEquity()">
                            Confirm
                        </button>
                    </span>
                    <span id="equityEstimatedCost">
                    </span>
                </span>
                <span class='pull-right'>
                    <button type="button" class="btn btn-info" id="previewTradierEquity" onclick="previewTradierEquity()">
                        Preview
                    </button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal">
                        Close
                    </button>
                </span>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="TradierOptionChain" tabindex="-1" role="dialog">
    <div class="modal-dialog" style="width: 1100px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h4 id="TradierOptionChainTitle" class="modal-title"></h4>
            </div>
            <div class="modal-body">
                <div>
                    <div class="col-lg-4">
                        <p>Expiration Dates</p>
                        <select class="form-control custom-width" id="optionExpirationDates" onchange="createOptionChain();"></select>
                    </div>
                    <div class="col-lg-2">
                        <p>Days Prior Expiry</p>
                        <input type="text" class="form-control" id="optionTime" placeholder="10 Day(s)">
                    </div>
                    <div class="col-lg-2">
                        <p>Target Price</p>
                        <input type="text" class="form-control" id="optionTargePrice" placeholder="Current Price">
                    </div>
                    <div class="col-lg-2">
                        <p>Volatility</p>
                        <input type="text" class="form-control" id="optionVolatility" placeholder="20%">
                    </div>
                    <div class="col-lg-2">
                        <p>Interest</p>
                        <input type="text" class="form-control" id="optionRate" placeholder="5%">
                    </div>
                </div>
                <div>&nbsp;</div>
                <ul id="optionTabs" class="nav nav-tabs">
                    <li class="active"><a data-toggle="tab" href="#OptionCall" onclick="optionTab_OnClick(1)">Calls</a></li>
                    <li><a data-toggle="tab" href="#OptionPut" onclick="optionTab_OnClick(2)">Puts</a></li>
                    <li><a data-toggle="tab" href="#MultipleExpirations" onclick="optionTab_OnClick(3)">Multiple Expiration Dates</a></li>
                </ul>
                <div id="OptionChainTab" class="tab-content">
                    <div id="OptionCall" class="tab-pane active">
                        <div id="OptionCallGrid" class="grid"></div>
                    </div>
                    <div id="OptionPut" class="tab-pane">
                        <div id="OptionPutGrid" class="grid"></div>
                    </div>
                    <div id="MultipleExpirations" class="tab-pane">
                        <div class="controls form-inline">
                            <br />
                            <p>First Expiration Date</p>
                            <select class="form-control custom-width" id="optionExpirationDate1"></select>
                            @*<label><input type="radio" name="optionExpirationStrike" value="1" checked>Compte Strike Prices</label>*@
                            <br />
                            <p>Second Expiration Date</p>
                            <select class="form-control custom-width" id="optionExpirationDate2"></select>
                            @*<label><input type="radio" name="optionExpirationStrike" value="2">Compte Strike Prices</label>*@
                            <br />
                            <p>Third Expiration Date</p>
                            <select class="form-control custom-width" id="optionExpirationDate3"></select>
                            @*<label><input type="radio" name="optionExpirationStrike" value="3">Compte Strike Prices</label>*@
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <span class='pull-left'>
                    <span>
                        <button type="button" class="btn btn-primary" id="plotCalls" onclick="plotCallOptionChain()">
                            Plot Calls
                        </button>
                        <button type="button" class="btn btn-primary" id="plotPuts" onclick="plotPutOptionChain()">
                            Plot Puts
                        </button>
                        <button type="button" class="btn btn-primary" id="plotExpiryDatesCalls" onclick="plotExpiryDates(0)">
                            Plot Exiry Dates - Calls
                        </button>
                        <button type="button" class="btn btn-primary" id="plotExpiryDatesPuts" onclick="plotExpiryDates(1)">
                            Plot Exiry Dates - Puts
                        </button>
                    </span>
                </span>
                <span class='pull-right'>
                    <button type="button" class="btn btn-danger" data-dismiss="modal">
                        Close
                    </button>
                </span>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="MovingAverage" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h4 id="MovingAverageTitle" class="modal-title"></h4>
            </div>
            <div class="modal-body">
                <div id="MovingAverageGrid" class="grid"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="applyMovingAverage" onclick="applyMovingAverage()">
                    Apply
                </button>
                <button type="button" class="btn btn-danger" data-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="UserEdit">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h4 class="modal-title">Edit User Information</h4>
            </div>
            <div class="modal-body">
                <dl class="dl-horizontal">
                    <dt>User Name</dt>
                    <dd>
                        <input class="form-control" id="UserEdit_Id" type="hidden" />
                        <input class="form-control" id="UserEdit_UserName" type="text" readonly />
                    </dd>
                    <dt>First Name</dt>
                    <dd>
                        <input class="form-control" id="UserEdit_FirstName" type="text" />
                    </dd>
                    <dt>Last Name</dt>
                    <dd>
                        <input class="form-control" id="UserEdit_LastName" type="text" />
                    </dd>
                    <dt>Email Address</dt>
                    <dd>
                        <input class="form-control" id="UserEdit_EmailAddress" type="text" />
                    </dd>
                    <dt>Phone Number</dt>
                    <dd>
                        <input class="form-control" id="UserEdit_PhoneNumber" type="text" />
                    </dd>
                </dl>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal" id="userEditOk" onclick="userEditOk()">
                    Ok
                </button>
                <button type="button" class="btn btn-danger" data-dismiss="modal" id="userEditCancel" onclick="userEditCancel()">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</div>

<script src="/js/date.js"></script>

<link rel="stylesheet" href="/amcharts/amcharts/style.css" type="text/css">
<script src="/amcharts/amcharts/amcharts.js" type="text/javascript"></script>
<script src="/amcharts/amcharts/serial.js" type="text/javascript"></script>
<script src="/amcharts/amcharts/amstock.js" type="text/javascript"></script>

@*<script src="/js/knockout-3.2.0.js"></script>*@

<link href="/wijmo/styles/wijmo.min.css" rel="stylesheet" />
<script src="/wijmo/controls/wijmo.min.js" type="text/javascript"></script>
<script src="/wijmo/controls/wijmo.grid.min.js" type="text/javascript"></script>
<script src="/wijmo/controls/wijmo.input.min.js"></script>
@*<script src="/wijmo/interop/knockout/wijmo.knockout.min.js"></script>*@

<script src="/js/simple_statistics.js"></script>
<script src="/js/black_scholes.js"></script>

<script type="text/javascript">
    // Modal
    var pleaseWaitDiv = $('<div class="modal hide" id="pleaseWaitDialog" data-backdrop="static" data-keyboard="false"><div class="modal-header"><h1>Processing...</h1></div><div class="modal-body"><div class="progress progress-striped active"><div class="bar" style="width: 100%;"></div></div></div></div>');

    // Chart data repository variable
    var dataSymbol = "";
    var dataSymbolDescription = "";
    var data;

    // AMChart variable
    var chart;
    var stockPanel1;
    var stockPanel2;
    var chartEvent1;

    // Constant colors
    var seasonColor = "#F0F004";
    var season5YearColor = "#65BF04"
    var positiveGuideColor = "#00FF00";
    var negativeGuideColor = "#FF0000";

    // 10-Year Chart Data
    var chartData = [];

    // 6-Months + Future 6 Months of Plotted Data
    var plotData = [];

    // Seasonality data
    var seasonTenYearData = [];
    var seasonFiveYearData = [];
    var seasonYearData = [];
    var closeYearData = [];

    // Hidden Season Yearly Graph
    var scannerYearGraph = [];

    // Hidden Moving Average
    var graphMA = [];

    // Number of trading days in a year / period
    var NumberOfDaysInYear = 252;

    // Number of years process (extended one year so as to exclude the last six months)
    var seasonYearNo = 12;

    // List of plotted year graphs
    var plottedYearGraphs = [];

    // List of first closing price
    var firstClosingPrice = [];

    // Scanner range
    var scannerRange = 30;

    // Variable scanner guide
    var varScannerUp;
    var varScannerDown;

    // DOM Chart Information labels
    var chartSymbol = "";
    var chartNoOfDays = 0;
    var chartChannelNoOfDays = 0;
    var chartSlopePercentage = 0;
    var chartCoefficient = 0;
    var chartChannelRange = 0;
    var chartSeasonalityCorrelation = 0;

    // Earning variables

    var earningDates = [];
    var PrePostEarningsGrid;

    // Tradier variables

    var TradierAccessToken;
    var TradierUserProfileGrid;
    var TradierOrdersGrid;
    var TradierPositionsGrid;

    // Questrade variables

    var QuestradeAccessToken;
    var QuestradeRefreshToken;
    var QuestradeTokenType;
    var QuestradeExpiresIn;
    var QuestradeApiServer;
    var QuestradeOptionChain;

    // Options Single Expiry

    var OptionCallGrid;
    var OptionPutGrid;
    var sortedDataCalls;
    var sortedDataPuts;
    var trendStrike = [];
    var guideRiskReward = [];
    var guideExpiryDate;
    var guideTargetDate;
    var trendTarget;

    // Options Multiple Expiry

    var guideExpiryDate1;
    var guideExpiryDate2;
    var guideExpiryDate3;

    var expiryDate1Strike = [];
    var expiryDate2Strike = [];
    var expiryDate3Strike = [];

    // Moving Average

    var MovingAverageGrid;
    var MovingAverageData = [];

    // Colors

    //var GoldColor = "#FFD700";
    var GoldColor = "#FFA200";
    var GrayColor = "#858583";
    var YellowColor = "#FFFF00";
    var GreenColor = "#00FF00";
    var BlueColor = "#0000FF";
    var RedColor = "#FF0000";
    var DarkGreenColor = "#65BF04";
    var MagentaColor = "#9C0063";

    // User Edit

    function userEdit() {
        $('#loading').modal({
            show: true,
            backdrop: false
        });

        var username = '@User.Identity.Name';

        $.ajax({
            url: '/api/GetUser/' + username,
            type: 'GET',
            data: {},
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            success: function (Results) {
                $('#loading').modal('hide');

                $('#UserEdit').modal({
                    show: true,
                    backdrop: false
                });

                if (Results.length > 0) {
                    document.getElementById('UserEdit_Id').value = Results[0].Id !== null && typeof (Results[0].Id) != 'undefined' ? wijmo.Globalize.format(Results[0].Id) : '';
                    document.getElementById('UserEdit_UserName').value = Results[0].UserName ? Results[0].UserName : '';
                    document.getElementById('UserEdit_FirstName').value = Results[0].FirstName ? Results[0].FirstName : '';
                    document.getElementById('UserEdit_LastName').value = Results[0].LastName ? Results[0].LastName : '';
                    document.getElementById('UserEdit_EmailAddress').value = Results[0].EmailAddress ? Results[0].EmailAddress : '';
                    document.getElementById('UserEdit_PhoneNumber').value = Results[0].PhoneNumber ? Results[0].PhoneNumber : '';
                }
            }

        }).fail(
            function (xhr, textStatus, err) {
                toastr.error(err);
                $('#UserEdit').modal('hide');
            });
    }
    function userEditOk() {
        if (confirm("Save Information?") == true) {
            var User = new Object();

            User.Id = document.getElementById('UserEdit_Id').value;
            User.UserName = document.getElementById('UserEdit_UserName').value;
            User.FirstName = document.getElementById('UserEdit_FirstName').value;
            User.LastName = document.getElementById('UserEdit_LastName').value;
            User.EmailAddress = document.getElementById('UserEdit_EmailAddress').value;
            User.PhoneNumber = document.getElementById('UserEdit_PhoneNumber').value;

            var data = JSON.stringify(User);

            $.ajax({
                type: "PUT",
                url: "/api/UpdateUser/" + User.Id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: data,
                statusCode: {
                    404: function () {
                        toastr.error("Not found");
                    },
                    400: function () {
                        toastr.error("Bad request");
                    }
                }
            });
            $('#UserEdit').modal('hide');
        }
    }
    function userEditCancel() {
        $('#UserEdit').modal('hide');
    }
    function userCheck() {
        var username = '@User.Identity.Name';
        $.ajax({
            url: '/api/GetUser/' + username,
            type: 'GET',
            data: {},
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            success: function (Results) {
                if (Results.length > 0) {
                    if (Results[0].FirstName == "NA" || Results[0].FirstName == "" ||
                        Results[0].LastName == "NA" || Results[0].LastName == "" ||
                        Results[0].EmailAddress == "NA" || Results[0].EmailAddress == "" ||
                        Results[0].PhoneNumber == "NA" || Results[0].PhoneNumber == "") {
                        toastr.error("To remove this prompt, you must fill in all user information.");
                        userEdit();
                    }
                }
            }

        });
    }

    // Option chain

    function openBrokerOptionChain() {
        var broker = getCookie("Broker");
        if (broker == "Questrade") {
            if (QuestradeAccessToken != "") {
                $.ajax({
                    type: 'GET',
                    url: '/api/GetQuestradeSymbolId/' + QuestradeApiServer + '/' + QuestradeAccessToken + '/' + chartSymbol,
                    success: function (result) {
                        if (result.symbolId > 0) {
                            openQuestradeOptionChain(result.symbolId.toString());
                        } else {
                            toastr.error("Error extracting option chain.");
                        }
                    }
                });
            } else {
                toastr.error("No Broker connection.");
            }
        } else {
            openTradierOptionChain();
        }
    }

    // Questrade

    function connectQuestrade() {
        location.href = "https://login.questrade.com/oauth2/authorize?client_id=WcWTqbKJydCkZgCCgQCfcy8ZNL9y7A&redirect_uri=https://www.magentatrader.com/Software?broker=Questrade&response_type=token";
        //location.href = "https://practicelogin.questrade.com/oauth2/authorize?client_id=kaHYGqLhISsA2i3YsvVwKu0kfwAAOA&redirect_uri=https://www.magentatrader.com/Software?broker=Questrade&response_type=token";
        //location.href = "https://practicelogin.questrade.com/oauth2/authorize?client_id=-4dSSId_7SQg-AAAB0OlUIBvHBZqXQ&redirect_uri=https://www.magentatrader.com/Software?broker=Questrade&response_type=token";
        //location.href = "https://login.questrade.com/oauth2/authorize?client_id=-4dSSId_7SQg-AAAB0OlUIBvHBZqXQ&redirect_uri=https://www.magentatrader.com/Software?broker=Questrade&response_type=token";
    }
    function openQuestradeOptionChain(symbolId) {
        $.ajax({
            type: 'GET',
            url: '/api/GetQuestradeOptions/' + QuestradeApiServer + '/' + QuestradeAccessToken + '/' + symbolId,
            success: function (result) {
                $('#TradierOptionChain').modal({
                    show: true,
                    backdrop: false
                });

                optionTab_OnClick(1);

                var change = plotData[125].close - plotData[124].close;
                if (change >= 0) {
                    $("#TradierOptionChainTitle").html(dataSymbol + " Option Chain: " + "<font color='" + GreenColor + "'>" + plotData[125].close + "(" + change.toFixed(2) + ")</font>");
                } else {
                    $("#TradierOptionChainTitle").html(dataSymbol + " Option Chain: " + "<font color='" + RedColor + "'>" + plotData[125].close + "(" + change.toFixed(2) + ")</font>");
                }

                $('#optionExpirationDates').empty();
                $('#optionExpirationDate1').empty();
                $('#optionExpirationDate2').empty();
                $('#optionExpirationDate3').empty();
                $('#OptionCallGrid').empty();
                $('#OptionPutGrid').empty();

                if (result.optionChain.length > 0) {
                    for (var i = 0; i < result.optionChain.length; i++) {
                        $('#optionExpirationDates').append("<option value='" + result.optionChain[i].expiryDate + "'>" + result.optionChain[i].expiryDate + "</option>");
                        $('#optionExpirationDate1').append("<option value='" + result.optionChain[i].expiryDate + "'>" + result.optionChain[i].expiryDate + "</option>");
                        $('#optionExpirationDate2').append("<option value='" + result.optionChain[i].expiryDate + "'>" + result.optionChain[i].expiryDate + "</option>");
                        $('#optionExpirationDate3').append("<option value='" + result.optionChain[i].expiryDate + "'>" + result.optionChain[i].expiryDate + "</option>");
                    }
                    QuestradeOptionChain = result;
                }
            }
        });
    }

    // Tradier

    function getGainLossColor(gainLoss) {
        var GreenColor = "#0FB203";
        var RedColor = "#A80008";
        return gainLoss >= 0 ? GreenColor : RedColor;
    }
    function connectTradier() {
        TradierAccessToken == ""
        document.cookie = "TradierAccessToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
        location.href = "https://api.tradier.com/v1/oauth/authorize?client_id=DxO1T2KQLG1KoGMu0FT1bTiBXYbmor8B&scope=read,write,market,trade&state=magenta";
    }
    function viewTradierAccount() {
        TradierAccessToken = getCookie("TradierAccessToken");
        if (TradierAccessToken != "") {
            $('#Tradier').modal({
                show: true,
                backdrop: false
            });

            $("#TradierAccountGrid").empty();

            $.ajax({
                url: '/api/GetTradierUserProfile/' + TradierAccessToken,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (result) {
                    if (result) {
                        var TradierUserProfileData = new wijmo.collections.ObservableArray();

                        TradierUserProfileData.push({
                            account_number: result.profile.account.account_number,
                            name: result.profile.name,
                            classification: result.profile.account.classification,
                            type: result.profile.account.type,
                            day_trader: result.profile.account.day_trader,
                        });

                        var TradierUserProfileCollection = new wijmo.collections.CollectionView(TradierUserProfileData);

                        $('.nav-tabs a[href="#TradierAccount"]').tab('show');
                        TradierUserProfileGrid.dispose();
                        TradierUserProfileGrid = new wijmo.grid.FlexGrid('#TradierAccountGrid');

                        TradierUserProfileGrid.initialize({
                            columns: [
                                        {
                                            "header": "Account No.",
                                            "binding": "account_number",
                                            "width": "1*",
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Name",
                                            "binding": "name",
                                            "width": "2*",
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Classification",
                                            "binding": "classification",
                                            "width": "1*",
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Type",
                                            "binding": "type",
                                            "width": "1*",
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Day Trader",
                                            "binding": "day_trader",
                                            "width": "1*",
                                            "isContentHtml": true
                                        }
                            ],
                            autoGenerateColumns: false,
                            itemsSource: TradierUserProfileCollection,
                            isReadOnly: true,
                            selectionMode: wijmo.grid.SelectionMode.Row
                        });

                        TradierUserProfileGrid.trackChanges = true;

                        TradierUserProfileCollection.pageSize = 10;

                        getTradierOrders(result.profile.account.account_number);

                        getTradierPositions(result.profile.account.account_number);
                    }
                }
            });
        } else {
            toastr.error("Not yet authenticated.");
        }
    }
    function getTradierOrders(account_number) {
        if (TradierAccessToken != "") {
            $("#TradierOrdersGrid").empty();
            $.ajax({
                url: '/api/GetTradierOrder/' + account_number + '/' + TradierAccessToken,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (result) {
                    var TradierOrderData = new wijmo.collections.ObservableArray();

                    TradierOrderData.push({
                        create_date: result.orders.order.create_date,
                        symbol: result.orders.order.symbol,
                        option_symbol: result.orders.order.option_symbol,
                        side: result.orders.order.side,
                        quantity: result.orders.order.quantity
                    });

                    var TradierOrderDataCollection = new wijmo.collections.CollectionView(TradierOrderData);

                    $('.nav-tabs a[href="#TradierOrders"]').tab('show');
                    TradierOrdersGrid.dispose();
                    TradierOrdersGrid = new wijmo.grid.FlexGrid('#TradierOrdersGrid');

                    TradierOrdersGrid.initialize({
                        columns: [
                                    {
                                        "header": "Created Date-Time",
                                        "binding": "create_date",
                                        "width": "2*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Symbol",
                                        "binding": "symbol",
                                        "width": "1*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Option",
                                        "binding": "option_symbol",
                                        "width": "1*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Side",
                                        "binding": "side",
                                        "width": "1*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Quantity",
                                        "binding": "quantity",
                                        "width": "1*",
                                        "isContentHtml": true
                                    }
                        ],
                        autoGenerateColumns: false,
                        itemsSource: TradierOrderDataCollection,
                        isReadOnly: true,
                        selectionMode: wijmo.grid.SelectionMode.Row
                    });

                    TradierOrdersGrid.trackChanges = true;

                    TradierOrderDataCollection.pageSize = 10;
                }
            });
        }
    }
    function getTradierPositions(account_number) {
        if (TradierAccessToken != "") {
            $("#TradierPositionsGrid").empty();
            $.ajax({
                url: '/api/GetTradierPosition/' + account_number + '/' + TradierAccessToken,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (result) {
                    var TradierPositionData = new wijmo.collections.ObservableArray();

                    for (i = 0; i < result.positions.position.length; i++) {
                        TradierPositionData.push({
                            sell_id: "<button class='btn btn-primary btn-xs' data-toggle='modal' id='sellTradierEquity' onclick='sellTradierEquity()'>Sell</button>",
                            id: result.positions.position[i].id,
                            cost_basis: result.positions.position[i].cost_basis,
                            date_acquired: result.positions.position[i].date_acquired,
                            quantity: result.positions.position[i].quantity,
                            last: 0,
                            change: 0,
                            value: 0,
                            gain_loss: 0,
                            symbol: result.positions.position[i].symbol,
                            description: ""
                        });
                    }

                    var TradierPositionDataCollection = new wijmo.collections.CollectionView(TradierPositionData);

                    $('.nav-tabs a[href="#TradierPositions"]').tab('show');
                    TradierPositionsGrid.dispose();
                    TradierPositionsGrid = new wijmo.grid.FlexGrid('#TradierPositionsGrid');

                    TradierPositionsGrid.initialize({
                        columns: [  {
                            "header": "Sell",
                            "binding": "sell_id",
                            "width": 60,
                            "isContentHtml": true
                        },
                                    {
                                        "header": "Symbol",
                                        "binding": "symbol",
                                        "width": 200,
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Quantity",
                                        "binding": "quantity",
                                        "width": "6*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Last (US$)",
                                        "binding": "last",
                                        "width": "6*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Change",
                                        "binding": "change",
                                        "width": "6*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Value (US$)",
                                        "binding": "value",
                                        "width": "6*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Cost Basis (US$)",
                                        "binding": "cost_basis",
                                        "width": "6*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Gain/Loss (US$)",
                                        "binding": "gain_loss",
                                        "width": "6*",
                                        "isContentHtml": true
                                    }
                        ],
                        autoGenerateColumns: false,
                        itemsSource: TradierPositionDataCollection,
                        isReadOnly: true,
                        selectionMode: wijmo.grid.SelectionMode.Row,
                        itemFormatter: function (panel, r, c, cell) {
                            if (wijmo.grid.CellType.Cell == panel.cellType && panel.columns[c].binding == 'gain_loss') {
                                var cellData = panel.getCellData(r, c);
                                cell.style.color = getGainLossColor(cellData);
                            }
                        }
                    });

                    TradierPositionsGrid.trackChanges = true;

                    TradierPositionDataCollection.pageSize = 10;

                    TradierPositionDataCollection.moveCurrentToFirst();
                    for (var i = 0; i < TradierPositionDataCollection.itemCount; i++) {
                        var item = TradierPositionDataCollection.currentItem;
                        TradierPositionDataCollection.editItem(item);
                        var editItem = TradierPositionDataCollection.currentEditItem;
                        $.ajax({
                            url: '/api/GetTradierQuote/' + editItem["symbol"] + '/' + TradierAccessToken,
                            cache: false,
                            type: 'GET',
                            contentType: 'application/json; charset=utf-8',
                            data: {},
                            async: false,
                            success: function (result) {
                                var last = result.quotes.quote.last;
                                var change = result.quotes.quote.change;
                                var value = result.quotes.quote.last * editItem["quantity"];
                                var gain_loss = value - editItem["cost_basis"];

                                editItem["last"] = last;
                                editItem["change"] = change;
                                editItem["value"] = value;
                                editItem["gain_loss"] = gain_loss;

                                TradierPositionDataCollection.commitEdit();
                            }
                        });
                        TradierPositionDataCollection.moveCurrentToNext();
                    }
                }
            });
        }
    }
    function getTradierAccountNumber(token) {
        $.ajax({
            url: '/api/GetTradierUserProfile/' + token,
            cache: false,
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            data: {},
            success: function (result) {
                if (result) {
                    setCookie("TradierAccountNumber", result.profile.account.account_number, 1);
                }
            }
        });
    }

    // Tradier Buy Equity

    function changeTradierOrderType() {
        var type = event.target.value;
        switch (type) {
            case "market":
                document.getElementById('TradierOrder_Price').style.visibility = 'hidden';
                document.getElementById('TradierOrder_Price_Label').style.visibility = 'hidden';
                document.getElementById('TradierOrder_Stop').style.visibility = 'hidden';
                document.getElementById('TradierOrder_Stop_Label').style.visibility = 'hidden';
                break;
            case "limit":
                document.getElementById('TradierOrder_Price').style.visibility = 'visible';
                document.getElementById('TradierOrder_Price_Label').style.visibility = 'visible';
                document.getElementById('TradierOrder_Stop').style.visibility = 'hidden';
                document.getElementById('TradierOrder_Stop_Label').style.visibility = 'hidden';
                break;
            case "stop":
                document.getElementById('TradierOrder_Price').style.visibility = 'hidden';
                document.getElementById('TradierOrder_Price_Label').style.visibility = 'hidden';
                document.getElementById('TradierOrder_Stop').style.visibility = 'visible';
                document.getElementById('TradierOrder_Stop_Label').style.visibility = 'visible';
                break;
            case "stop_limit":
                document.getElementById('TradierOrder_Price').style.visibility = 'visible';
                document.getElementById('TradierOrder_Price_Label').style.visibility = 'visible';
                document.getElementById('TradierOrder_Stop').style.visibility = 'visible';
                document.getElementById('TradierOrder_Stop_Label').style.visibility = 'visible';
                break;
            default:
                document.getElementById('TradierOrder_Price').style.visibility = 'hidden';
                document.getElementById('TradierOrder_Price_Label').style.visibility = 'hidden';
                document.getElementById('TradierOrder_Stop').style.visibility = 'hidden';
                document.getElementById('TradierOrder_Stop_Label').style.visibility = 'hidden';
        }
    }
    function getTradierQuote() {
        var GreenColor = "#0FB203";
        var RedColor = "#A80008";

        if (TradierAccessToken != "") {
            $.ajax({
                url: '/api/GetTradierQuote/' + dataSymbol + '/' + TradierAccessToken,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (result) {

                    var TradierQuoteData = {
                        "description": result.quotes.quote.description,
                        "last": result.quotes.quote.last,
                        "change": result.quotes.quote.change,
                        "bid": result.quotes.quote.bid,
                        "bidsize": result.quotes.quote.bidsize,
                        "ask": result.quotes.quote.ask,
                        "asksize": result.quotes.quote.asksize
                    };

                    var price = "";
                    if (TradierQuoteData.change >= 0) {
                        price = "<font color='" + GreenColor + "'>" + TradierQuoteData.last + " (" + TradierQuoteData.change + ")</font>";
                    } else {
                        price = "<font color='" + RedColor + "'>" + TradierQuoteData.last + " (" + TradierQuoteData.change + ")</font>";
                    }

                    $("#TradierOrderTitle").html("<span><font color='" + GreenColor + "'><b>BUY: " + dataSymbol + " </b></font> " + price + "</span>");
                    $("#TradierOrderSubtitle").html("Bid: " + TradierQuoteData.bid + " x " + TradierQuoteData.bidsize + "<span style='padding: 0 40px'>&nbsp;</span>" + "Ask: " + TradierQuoteData.ask + " x " + TradierQuoteData.asksize);
                }
            });
        }
    }
    function openTradierEquity() {
        var GreenColor = "#0FB203";
        var RedColor = "#A80008";

        if (TradierAccessToken != "") {
            $('#TradierOrder').modal({
                show: true,
                backdrop: false
            });

            $("#TradierOrderTitle").html("<font color='" + GreenColor + "'><b>BUY: " + dataSymbol + "</b></font>");
            getTradierQuote();

            document.getElementById('TradierOrder_Class').value = 'equity';
            document.getElementById('TradierOrder_Class').disabled = true;

            document.getElementById('TradierOrder_Symbol').value = dataSymbol;
            document.getElementById('TradierOrder_Symbol').disabled = true;

            document.getElementById('TradierOrder_OptionSymbol').disabled = true;
            document.getElementById('TradierOrder_OptionSymbol').style.visibility = 'hidden';
            document.getElementById('TradierOrder_OptionSymbol_Label').style.visibility = 'hidden';

            document.getElementById('TradierOrder_Side').value = 'buy';
            document.getElementById('TradierOrder_Side').disabled = true;

            document.getElementById('TradierOrder_Type').value = 'market';

            document.getElementById('TradierOrder_Price').style.visibility = 'hidden';
            document.getElementById('TradierOrder_Price_Label').style.visibility = 'hidden';

            document.getElementById('TradierOrder_Stop').style.visibility = 'hidden';
            document.getElementById('TradierOrder_Stop_Label').style.visibility = 'hidden';

            disableConfirm(true);
        } else {

            toastr.error("No Broker connection.");

        }
    }
    function previewTradierEquity() {
        var TradierAccountNumber = getCookie("TradierAccountNumber");
        if (TradierAccessToken != "" && TradierAccountNumber != "") {
            var order = new Object();

            order.token = TradierAccessToken;
            order.account = TradierAccountNumber;
            order.symbol = document.getElementById('TradierOrder_Symbol').value;
            order.duration = document.getElementById('TradierOrder_Duration').value;
            order.side = document.getElementById('TradierOrder_Side').value;
            order.quantity = document.getElementById('TradierOrder_Quantity').value;
            order.type = document.getElementById('TradierOrder_Type').value;
            order.price = document.getElementById('TradierOrder_Price').value;
            order.stop = document.getElementById('TradierOrder_Stop').value;
            order.option_symbol = document.getElementById('TradierOrder_OptionSymbol').value;

            var verified = false;
            switch(order.type) {
                case "market":
                    verified = true;
                    break;
                case "limit":
                    if (order.price > 0) verified = true;
                    break;
                case "stop":
                    if (order.stop > 0) verified = true;
                    break;
                case "stop_limit":
                    if (order.price > 0 && order.stop > 0) verified = true;
                    break;
                default:
                    verified = false;
                    break;
            }

            if (verified == true) {
                var data = JSON.stringify(order);

                disableConfirm(true);

                $.ajax({
                    type: "POST",
                    url: "/api/GetTradierPreviewEquity",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: data,
                    success: function (result) {
                        if (!!result.order.cost) {
                            disableConfirm(false);
                            $("#equityEstimatedCost").append("Est. Total Cost: $" + result.order.cost);
                        } else {
                            toastr.error("Invalid data.");
                        }
                    }
                });
            } else {
                toastr.error("Invalid order.");
            }

        } else {
            toastr.error("No Broker connection.");
        }
    }
    function confirmTradierEquity() {
        if (confirm("Confirm transaction?") == true) {
            var TradierAccountNumber = getCookie("TradierAccountNumber");
            if (TradierAccessToken != "" && TradierAccountNumber != "") {
                var order = new Object();

                order.token = TradierAccessToken;
                order.account = TradierAccountNumber;
                order.symbol = document.getElementById('TradierOrder_Symbol').value;
                order.duration = document.getElementById('TradierOrder_Duration').value;
                order.side = document.getElementById('TradierOrder_Side').value;
                order.quantity = document.getElementById('TradierOrder_Quantity').value;
                order.type = document.getElementById('TradierOrder_Type').value;
                order.price = document.getElementById('TradierOrder_Price').value;
                order.stop = document.getElementById('TradierOrder_Stop').value;
                order.option_symbol = document.getElementById('TradierOrder_OptionSymbol').value;

                var verified = false;
                switch (order.type) {
                    case "market":
                        verified = true;
                        break;
                    case "limit":
                        if (order.price > 0) verified = true;
                        break;
                    case "stop":
                        if (order.stop > 0) verified = true;
                        break;
                    case "stop_limit":
                        if (order.price > 0 && order.stop > 0) verified = true;
                        break;
                    default:
                        verified = false;
                        break;
                }

                if (verified == true) {
                    var data = JSON.stringify(order);

                    $.ajax({
                        type: "POST",
                        url: "/api/GetTradierBuyEquity",
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: data,
                        success: function (result) {
                            if (result.order.status=="ok") {
                                toastr.success("Order successful.");
                            } else {
                                toastr.error("Order cancelled.");
                            }
                        }
                    });
                } else {
                    toastr.error("Invalid order.");
                }

            } else {
                toastr.error("No Broker connection.");
            }
        }
    }
    function disableConfirm(disable) {
        $('#confirmTradierEquity').prop('disabled', disable);
        $('#cancelTradierEquity').prop('disabled', disable);
        $('#equityEstimatedCost').empty();

        if (disable == false) {
            document.getElementById('TradierOrder_Duration').disabled = true;
            document.getElementById('TradierOrder_Quantity').disabled = true;
            document.getElementById('TradierOrder_Type').disabled = true;
            document.getElementById('TradierOrder_Price').disabled = true;
            document.getElementById('TradierOrder_Stop').disabled = true;
        } else {
            document.getElementById('TradierOrder_Duration').disabled = false;
            document.getElementById('TradierOrder_Quantity').disabled = false;
            document.getElementById('TradierOrder_Type').disabled = false;
            document.getElementById('TradierOrder_Price').disabled = false;
            document.getElementById('TradierOrder_Stop').disabled = false;
        }
    }
    function cancelTradierEquity() {
        disableConfirm(true);
    }

    // Tradier Buy Option

    function openTradierOptionChain() {
        var GreenColor = "#0FB203";
        var RedColor = "#A80008";

        if (TradierAccessToken != "") {
            $('#TradierOptionChain').modal({
                show: true,
                backdrop: false
            });

            $('#optionTabs a[href="#OptionCall"]').tab('show');
            optionTab_OnClick(1);

            var change = plotData[125].close - plotData[124].close;
            if (change >= 0) {
                $("#TradierOptionChainTitle").html(dataSymbol + " Option Chain: " + "<font color='" + GreenColor + "'>" + plotData[125].close + "(" + change.toFixed(2) + ")</font>");
            } else {
                $("#TradierOptionChainTitle").html(dataSymbol + " Option Chain: " + "<font color='" + RedColor + "'>" + plotData[125].close + "(" + change.toFixed(2) + ")</font>");
            }

            $('#optionExpirationDates').empty();
            $('#optionExpirationDate1').empty();
            $('#optionExpirationDate2').empty();
            $('#optionExpirationDate3').empty();
            $('#OptionCallGrid').empty();
            $('#OptionPutGrid').empty();
            $.ajax({
                url: '/api/GetTradierOptionExpiration/' + dataSymbol + '/' + TradierAccessToken,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (result) {
                    if (result.expirations.date.length > 0) {
                        for (var i = 0; i < result.expirations.date.length; i++) {
                            $('#optionExpirationDates').append("<option value='" + result.expirations.date[i] + "'>" + result.expirations.date[i] + "</option>");
                            $('#optionExpirationDate1').append("<option value='" + result.expirations.date[i] + "'>" + result.expirations.date[i] + "</option>");
                            $('#optionExpirationDate2').append("<option value='" + result.expirations.date[i] + "'>" + result.expirations.date[i] + "</option>");
                            $('#optionExpirationDate3').append("<option value='" + result.expirations.date[i] + "'>" + result.expirations.date[i] + "</option>");
                        }
                    }
                }
            });
        } else {
            toastr.error("No Broker connection.");
        }
    }

    // Option chain grid

    function createOptionChain() {
        var broker = getCookie("Broker");
        if (broker == "Questrade") {
            var expirationDate = document.getElementById("optionExpirationDates").value;
            if (QuestradeOptionChain != "") {

                var dataCalls = [];
                var dataPuts = [];

                for (var i = 0; i < QuestradeOptionChain.optionChain.length; i++) {
                    if (expirationDate == QuestradeOptionChain.optionChain[i].expiryDate) {
                        if (QuestradeOptionChain.optionChain[i].chainPerRoot.length > 0) {
                            if (QuestradeOptionChain.optionChain[i].chainPerRoot[0].chainPerStrikePrice.length) {
                                for (var s = 0; s < QuestradeOptionChain.optionChain[i].chainPerRoot[0].chainPerStrikePrice.length; s++) {
                                    var strikePrice = QuestradeOptionChain.optionChain[i].chainPerRoot[0].chainPerStrikePrice[s];
                                    dataCalls.push({
                                        symbol: QuestradeOptionChain.optionChain[i].chainPerRoot[0].chainPerStrikePrice[s].callSymbolId,
                                        description: QuestradeOptionChain.optionChain[i].chainPerRoot[0].optionRoot + "-CALL(" + QuestradeOptionChain.optionChain[i].chainPerRoot[0].chainPerStrikePrice[s].callSymbolId + ") @@" + strikePrice.strikePrice,
                                        type: "OPTION",
                                        last: 0,
                                        change: 0,
                                        volume: 0,
                                        bid: 0,
                                        bidsize: 0,
                                        ask: 0,
                                        asksize: 0,
                                        open_interest: 0,
                                        strike: strikePrice.strikePrice,
                                        contract_size: 0,
                                        expiration_date: QuestradeOptionChain.optionChain[i].expiryDate.substring(0,10),
                                        expiration_type: "NA",
                                        option_type: "CALL",
                                        root_symbol: QuestradeOptionChain.optionChain[i].chainPerRoot[0].optionRoot
                                    });
                                    dataPuts.push({
                                        symbol: QuestradeOptionChain.optionChain[i].chainPerRoot[0].chainPerStrikePrice[s].putSymbolId,
                                        description: QuestradeOptionChain.optionChain[i].chainPerRoot[0].optionRoot + "-PUT(" + QuestradeOptionChain.optionChain[i].chainPerRoot[0].chainPerStrikePrice[s].putSymbolId + ") @@" + strikePrice.strikePrice,
                                        type: "OPTION",
                                        last: 0,
                                        change: 0,
                                        volume: 0,
                                        bid: 0,
                                        bidsize: 0,
                                        ask: 0,
                                        asksize: 0,
                                        open_interest: 0,
                                        strike: strikePrice.strikePrice,
                                        contract_size: 0,
                                        expiration_date: QuestradeOptionChain.optionChain[i].expiryDate.substring(0, 10),
                                        expiration_type: "NA",
                                        option_type: "PUT",
                                        root_symbol: QuestradeOptionChain.optionChain[i].chainPerRoot[0].optionRoot
                                    });
                                }
                            }
                        }
                    }
                }

                dataCalls.sort(function compare(a, b) {
                    if (a.strike < b.strike)
                        return -1;
                    if (a.strike > b.strike)
                        return 1;
                    return 0;
                });
                dataPuts.sort(function compare(a, b) {
                    if (a.strike < b.strike)
                        return -1;
                    if (a.strike > b.strike)
                        return 1;
                    return 0;
                });

                sortedDataCalls = new wijmo.collections.ObservableArray();
                sortedDataCalls = extractOptionChain(dataCalls);
                sortedDataPuts = new wijmo.collections.ObservableArray();
                sortedDataPuts = extractOptionChain(dataPuts);

                // Plot Calls

                var callOptionListData = [];

                callOptionListData.push(QuestradeApiServer);
                callOptionListData.push(QuestradeAccessToken);
                for(var x = 0; x < sortedDataCalls.length; x++ ) {
                    callOptionListData.push(sortedDataCalls[x].symbol.toString());
                }

                $.ajax({
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    url: '/api/GetQuestradeOptionQuotes',
                    dataType: "json",
                    data: { optionList: callOptionListData },
                    success: function (result) {
                        for (var i = 0; i < result.optionQuotes.length; i++) {
                            for (var s = 0; s < sortedDataCalls.length; s++) {
                                if (result.optionQuotes[i].symbolId == sortedDataCalls[s].symbol) {
                                    sortedDataCalls[s].description = result.optionQuotes[i].symbol;
                                    sortedDataCalls[s].type = "Call";
                                    sortedDataCalls[s].last = Math.abs(result.optionQuotes[i].lastTradePrice);
                                    sortedDataCalls[s].change = Math.abs(result.optionQuotes[i].bidPrice) - Math.abs(result.optionQuotes[i].lastTradePrice);
                                    sortedDataCalls[s].volume = Math.abs(result.optionQuotes[i].volume);
                                    sortedDataCalls[s].bid = Math.abs(result.optionQuotes[i].bidPrice);
                                    sortedDataCalls[s].bidsize = Math.abs(result.optionQuotes[i].bidSize);
                                    sortedDataCalls[s].ask = Math.abs(result.optionQuotes[i].askPrice);
                                    sortedDataCalls[s].asksize = Math.abs(result.optionQuotes[i].askSize);
                                    sortedDataCalls[s].open_interest = Math.abs(result.optionQuotes[i].openInterest);
                                    sortedDataCalls[s].contract_size = Math.abs(result.optionQuotes[i].bidSize) + Math.abs(result.optionQuotes[i].askSize);
                                }
                            }
                        }
                        var Calls = new wijmo.collections.CollectionView(sortedDataCalls);

                        OptionCallGrid.dispose();
                        OptionCallGrid = new wijmo.grid.FlexGrid('#OptionCallGrid');

                        OptionCallGrid.initialize({
                            columns: [
                                        {
                                            "header": "Description",
                                            "binding": "description",
                                            "width": "*",
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Bid",
                                            "binding": "bid",
                                            "width": 100,
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Ask",
                                            "binding": "ask",
                                            "width": 100,
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Last",
                                            "binding": "last",
                                            "width": 100,
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Change",
                                            "binding": "change",
                                            "width": 100,
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Vol.",
                                            "binding": "volume",
                                            "width": 100,
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Op Int.",
                                            "binding": "open_interest",
                                            "width": 100,
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Strike",
                                            "binding": "strike",
                                            "width": 100,
                                            "isContentHtml": true
                                        }
                            ],
                            autoGenerateColumns: false,
                            itemsSource: Calls,
                            isReadOnly: true,
                            selectionMode: wijmo.grid.SelectionMode.Row
                        });

                        OptionCallGrid.trackChanges = true;
                        Calls.pageSize = 10;
                    }
                });

                // Plot Puts

                var putOptionListData = [];

                putOptionListData.push(QuestradeApiServer);
                putOptionListData.push(QuestradeAccessToken);
                for (var x = 0; x < sortedDataPuts.length; x++) {
                    putOptionListData.push(sortedDataPuts[x].symbol.toString());
                }

                $.ajax({
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    url: '/api/GetQuestradeOptionQuotes',
                    dataType: "json",
                    data: { optionList: putOptionListData },
                    success: function (result) {
                        for (var i = 0; i < result.optionQuotes.length; i++) {
                            for (var s = 0; s < sortedDataPuts.length; s++) {
                                if (result.optionQuotes[i].symbolId == sortedDataPuts[s].symbol) {
                                    sortedDataPuts[s].description = result.optionQuotes[i].symbol;
                                    sortedDataPuts[s].type = "Put";
                                    sortedDataPuts[s].last = Math.abs(result.optionQuotes[i].lastTradePrice);
                                    sortedDataPuts[s].change = Math.abs(result.optionQuotes[i].bidPrice) - Math.abs(result.optionQuotes[i].lastTradePrice);
                                    sortedDataPuts[s].volume = Math.abs(result.optionQuotes[i].volume);
                                    sortedDataPuts[s].bid = Math.abs(result.optionQuotes[i].bidPrice);
                                    sortedDataPuts[s].bidsize = Math.abs(result.optionQuotes[i].bidSize);
                                    sortedDataPuts[s].ask = Math.abs(result.optionQuotes[i].askPrice);
                                    sortedDataPuts[s].asksize = Math.abs(result.optionQuotes[i].askSize);
                                    sortedDataPuts[s].open_interest = Math.abs(result.optionQuotes[i].openInterest);
                                    sortedDataPuts[s].contract_size = Math.abs(result.optionQuotes[i].bidSize) + Math.abs(result.optionQuotes[i].askSize);
                                }
                            }
                        }
                        var Puts = new wijmo.collections.CollectionView(sortedDataPuts);

                        OptionPutGrid.dispose();
                        OptionPutGrid = new wijmo.grid.FlexGrid('#OptionPutGrid');

                        OptionPutGrid.initialize({
                            columns: [
                                        {
                                            "header": "Description",
                                            "binding": "description",
                                            "width": "*",
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Bid",
                                            "binding": "bid",
                                            "width": 100,
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Ask",
                                            "binding": "ask",
                                            "width": 100,
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Last",
                                            "binding": "last",
                                            "width": 100,
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Change",
                                            "binding": "change",
                                            "width": 100,
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Vol.",
                                            "binding": "volume",
                                            "width": 100,
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Op Int.",
                                            "binding": "open_interest",
                                            "width": 100,
                                            "isContentHtml": true
                                        },
                                        {
                                            "header": "Strike",
                                            "binding": "strike",
                                            "width": 100,
                                            "isContentHtml": true
                                        }
                            ],
                            autoGenerateColumns: false,
                            itemsSource: Puts,
                            isReadOnly: true,
                            selectionMode: wijmo.grid.SelectionMode.Row
                        });

                        OptionPutGrid.trackChanges = true;
                        Puts.pageSize = 10;
                    }
                });
            }
        } else {
            var expirationDate = document.getElementById("optionExpirationDates").value;
            $.ajax({
                url: '/api/GetTradierOptionChain/' + dataSymbol + '/' + expirationDate + '/' + TradierAccessToken,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (result) {
                    var dataCalls = [];
                    var dataPuts = new wijmo.collections.ObservableArray();

                    for (var i = 0; i < result.options.option.length; i++) {
                        if (result.options.option[i].option_type == "call") {
                            dataCalls.push({
                                symbol: result.options.option[i].symbol,
                                description: result.options.option[i].description,
                                type: result.options.option[i].type,
                                last: result.options.option[i].last,
                                change: result.options.option[i].change,
                                volume: result.options.option[i].volume,
                                bid: result.options.option[i].bid,
                                bidsize: result.options.option[i].bidsize,
                                ask: result.options.option[i].ask,
                                asksize: result.options.option[i].asksize,
                                open_interest: result.options.option[i].open_interest,
                                strike: result.options.option[i].strike,
                                contract_size: result.options.option[i].contract_size,
                                expiration_date: result.options.option[i].expiration_date,
                                expiration_type: result.options.option[i].expiration_type,
                                option_type: result.options.option[i].option_type,
                                root_symbol: result.options.option[i].root_symbol
                            })
                        } else {
                            dataPuts.push({
                                symbol: result.options.option[i].symbol,
                                description: result.options.option[i].description,
                                type: result.options.option[i].type,
                                last: result.options.option[i].last,
                                change: result.options.option[i].change,
                                volume: result.options.option[i].volume,
                                bid: result.options.option[i].bid,
                                bidsize: result.options.option[i].bidsize,
                                ask: result.options.option[i].ask,
                                asksize: result.options.option[i].asksize,
                                open_interest: result.options.option[i].open_interest,
                                strike: result.options.option[i].strike,
                                contract_size: result.options.option[i].contract_size,
                                expiration_date: result.options.option[i].expiration_date,
                                expiration_type: result.options.option[i].expiration_type,
                                option_type: result.options.option[i].option_type,
                                root_symbol: result.options.option[i].root_symbol
                            })
                        }
                    }

                    dataCalls.sort(function compare(a, b) {
                        if (a.strike < b.strike)
                            return -1;
                        if (a.strike > b.strike)
                            return 1;
                        return 0;
                    });

                    dataPuts.sort(function compare(a, b) {
                        if (a.strike < b.strike)
                            return -1;
                        if (a.strike > b.strike)
                            return 1;
                        return 0;
                    });

                    sortedDataCalls = new wijmo.collections.ObservableArray();
                    sortedDataPuts = new wijmo.collections.ObservableArray();

                    sortedDataCalls = extractOptionChain(dataCalls);
                    sortedDataPuts = extractOptionChain(dataPuts);

                    // Call Grid
                    var Calls = new wijmo.collections.CollectionView(sortedDataCalls);

                    OptionCallGrid.dispose();
                    OptionCallGrid = new wijmo.grid.FlexGrid('#OptionCallGrid');

                    OptionCallGrid.initialize({
                        columns: [
                                    {
                                        "header": "Description",
                                        "binding": "description",
                                        "width": "*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Bid",
                                        "binding": "bid",
                                        "width": 100,
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Ask",
                                        "binding": "ask",
                                        "width": 100,
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Last",
                                        "binding": "last",
                                        "width": 100,
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Change",
                                        "binding": "change",
                                        "width": 100,
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Vol.",
                                        "binding": "volume",
                                        "width": 100,
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Op Int.",
                                        "binding": "open_interest",
                                        "width": 100,
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Strike",
                                        "binding": "strike",
                                        "width": 100,
                                        "isContentHtml": true
                                    }
                        ],
                        autoGenerateColumns: false,
                        itemsSource: Calls,
                        isReadOnly: true,
                        selectionMode: wijmo.grid.SelectionMode.Row
                    });

                    OptionCallGrid.trackChanges = true;

                    Calls.pageSize = 10;

                    // Put Grid
                    var Puts = new wijmo.collections.CollectionView(sortedDataPuts);

                    OptionPutGrid.dispose();
                    OptionPutGrid = new wijmo.grid.FlexGrid('#OptionPutGrid');

                    OptionPutGrid.initialize({
                        columns: [
                                    {
                                        "header": "Description",
                                        "binding": "description",
                                        "width": "*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Bid",
                                        "binding": "bid",
                                        "width": 100,
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Ask",
                                        "binding": "ask",
                                        "width": 100,
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Last",
                                        "binding": "last",
                                        "width": 100,
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Change",
                                        "binding": "change",
                                        "width": 100,
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Vol.",
                                        "binding": "volume",
                                        "width": 100,
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Op Int.",
                                        "binding": "open_interest",
                                        "width": 100,
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "Strike",
                                        "binding": "strike",
                                        "width": 100,
                                        "isContentHtml": true
                                    }
                        ],
                        autoGenerateColumns: false,
                        itemsSource: Puts,
                        isReadOnly: true,
                        selectionMode: wijmo.grid.SelectionMode.Row
                    });

                    OptionPutGrid.trackChanges = true;

                    Puts.pageSize = 10;
                }
            });
        }
    }
    function extractOptionChain(chain) {
        var sortedChain = new wijmo.collections.ObservableArray();
        var counter = 0;
        for (var i = 0; i < chain.length; i++) {
            if (chain[i].strike > plotData[125].close) {
                if (counter == 0) {
                    var index = new Array(6);
                    var backCounter = 0;
                    for (var b = i; b >= 0; b--) {
                        index[5 - backCounter] = b;
                        backCounter++;
                        if (backCounter > 5) break;
                    }
                    for (var b = 0; b < index.length; b++) {
                        sortedChain.push({
                            symbol: chain[index[b]].symbol,
                            description: chain[index[b]].description,
                            type: chain[index[b]].type,
                            last: !chain[index[b]].last ? 0 : chain[index[b]].last,
                            change: !chain[index[b]].change ? 0 : chain[index[b]].change,
                            volume: !chain[index[b]].volume ? 0 : chain[index[b]].volume,
                            bid: !chain[index[b]].bid ? 0 : chain[index[b]].bid,
                            bidsize: !chain[index[b]].bidsize ? 0 : chain[index[b]].bidsize,
                            ask: !chain[index[b]].ask ? 0 : chain[index[b]].ask,
                            asksize: !chain[index[b]].asksize ? 0 : chain[index[b]].asksize,
                            open_interest: !chain[index[b]].open_interest ? 0 : chain[index[b]].open_interest,
                            strike: chain[index[b]].strike,
                            contract_size: !chain[index[b]].contract_size ? 0 : chain[index[b]].contract_size,
                            expiration_date: chain[index[b]].expiration_date,
                            expiration_type: chain[index[b]].expiration_type,
                            option_type: chain[index[b]].option_type,
                            root_symbol: chain[index[b]].root_symbol
                        })
                    }
                } else {
                    sortedChain.push({
                        symbol: chain[i].symbol,
                        description: chain[i].description,
                        type: chain[i].type,
                        last: !chain[i].last ? 0 : chain[i].last,
                        change: !chain[i].change ? 0 : chain[i].change,
                        volume: !chain[i].volume ? 0 : chain[i].volume,
                        bid: !chain[i].bid ? 0 : chain[i].bid,
                        bidsize: !chain[i].bidsize ? 0 : chain[i].bidsize,
                        ask: !chain[i].ask ? 0 : chain[i].ask,
                        asksize: !chain[i].asksize ? 0 : chain[i].asksize,
                        open_interest: !chain[i].open_interest ? 0 : chain[i].open_interest,
                        strike: chain[i].strike,
                        contract_size: !chain[i].contract_size ? 0 : chain[i].contract_size,
                        expiration_date: chain[i].expiration_date,
                        expiration_type: chain[i].expiration_type,
                        option_type: chain[i].option_type,
                        root_symbol: chain[i].root_symbol
                    })
                }

                counter++;
            }
            if (counter > 4) break;
        }
        return sortedChain;
    }
    function plotCallOptionChain() {
        var callColor = "#00B92C";
        // Remove existing plot
        for (var i = 0; i < trendStrike.length; i++) {
            stockPanel1.removeTrendLine(trendStrike[i]);
        }
        for (var i = 0; i < guideRiskReward.length; i++) {
            stockPanel1.valueAxes[1].removeGuide(guideRiskReward[i]);
        }
        stockPanel1.categoryAxis.removeGuide(guideExpiryDate);
        stockPanel1.categoryAxis.removeGuide(guideExpiryDate1);
        stockPanel1.categoryAxis.removeGuide(guideExpiryDate2);
        stockPanel1.categoryAxis.removeGuide(guideExpiryDate3);
        stockPanel1.categoryAxis.removeGuide(guideTargetDate);
        for (var i = 0; i < expiryDate1Strike.length; i++) {
            stockPanel1.removeStockGraph(expiryDate1Strike[i]);
        }
        for (var i = 0; i < expiryDate2Strike.length; i++) {
            stockPanel1.removeStockGraph(expiryDate2Strike[i]);
        }
        for (var i = 0; i < expiryDate3Strike.length; i++) {
            stockPanel1.removeStockGraph(expiryDate3Strike[i]);
        }
        for (var t = 0; t < plotData.length; t++) {
            for (var s = 0; s <= 9; s++) {
                plotData[t]["s1_" + s.toString()] = 'NaN';
                plotData[t]["s2_" + s.toString()] = 'NaN';
                plotData[t]["s3_" + s.toString()] = 'NaN';
            }
        }

        chart.validateData();
        stockPanel1.validateNow();
        // Compute for the max
        var maxVolume = 0;
        for (var i = 0; i < sortedDataCalls.length; i++) {
            if ((sortedDataCalls[i].volume + sortedDataCalls[i].open_interest) > maxVolume) {
                maxVolume = sortedDataCalls[i].volume + sortedDataCalls[i].open_interest;
            }
        }
        // Plot
        if (maxVolume > 0) {
            var $optionTime = document.getElementById('optionTime').value;
            var $optionTargePrice = document.getElementById('optionTargePrice').value;
            var $optionVolatility = document.getElementById('optionVolatility').value;
            var $optionRate = document.getElementById('optionRate').value;

            $optionTime = !$optionTime ? 0.027 : $optionTime / 360; // Annualize
            $optionTargePrice = !$optionTargePrice ? plotData[125]["close"] : $optionTargePrice;
            $optionVolatility = !$optionVolatility ? 0.20 : $optionVolatility / 100; // Percentage
            $optionRate = !$optionRate ? 0.05 : $optionRate / 100; // Percentage

            for (var i = 0; i < sortedDataCalls.length; i++) {
                var volumeLength = parseInt(((sortedDataCalls[i].volume + sortedDataCalls[i].open_interest) / maxVolume) * 30);
                trendStrike[i] = new AmCharts.TrendLine();
                trendStrike[i].lineColor = callColor;
                trendStrike[i].initialDate = plotData[126]["date"];
                trendStrike[i].finalDate = plotData[126 + volumeLength]["date"];
                trendStrike[i].initialValue = sortedDataCalls[i].strike;
                trendStrike[i].finalValue = sortedDataCalls[i].strike;
                trendStrike[i].lineThickness = 10;
                trendStrike[i].lineAlpha = 0.5;
                stockPanel1.addTrendLine(trendStrike[i]);

                var option_price = black_scholes.calculate(true, $optionTargePrice, sortedDataCalls[i].strike, $optionRate, $optionTime, $optionVolatility);
                var change = option_price - sortedDataCalls[i].last;
                var percentage = 0;

                change = Math.round(change * 100) / 100;

                if (sortedDataCalls[i].last > 0) {
                    percentage = (change / sortedDataCalls[i].last) * 100;
                } else {
                    if (change > 0) {
                        percentage = 100;
                    } else if (change == 0) {
                        percentage = 0;
                    } else {
                        percentage = -100;
                    }
                }

                if (percentage < -100) {
                    percentage = -100;
                }

                guideRiskReward[i] = new AmCharts.Guide();
                guideRiskReward[i].lineColor = callColor;
                guideRiskReward[i].date = plotData[126]["date"];
                guideRiskReward[i].label = sortedDataCalls[i].strike.toString() + " (" + sortedDataCalls[i].last.toFixed(2) + "): " + AmCharts.roundTo(option_price, 2).toFixed(2) + " (" + AmCharts.roundTo(change, 2).toFixed(2) + ") " + AmCharts.roundTo(percentage, 2) + "%   ";
                guideRiskReward[i].color = callColor;
                guideRiskReward[i].value = sortedDataCalls[i].strike;
                guideRiskReward[i].inside = true;
                stockPanel1.valueAxes[1].addGuide(guideRiskReward[i]);
            }
            //chartEvent1.date = plotData[125 + parseInt($optionTime * 360)]["date"];
            //chartEvent1.backgroundColor = callColor;
            //chartEvent1.color = "#FFFFFF";

            //chart.showStockEvents();
            //chart.validateData();
            //chart.validateNow();

            guideExpiryDate = new AmCharts.Guide();
            guideExpiryDate.date = parseDate(sortedDataCalls[0].expiration_date);
            guideExpiryDate.lineColor = callColor;
            guideExpiryDate.lineAlpha = 1;
            guideExpiryDate.lineThickness = 2;
            guideExpiryDate.inside = true;
            guideExpiryDate.labelRotation = 90;
            guideExpiryDate.label = "Expiry: " + sortedDataCalls[0].expiration_date;
            stockPanel1.categoryAxis.addGuide(guideExpiryDate);

            guideTargetDate = new AmCharts.Guide();
            guideTargetDate.date = parseDate(sortedDataCalls[0].expiration_date).add(-1*parseInt($optionTime * 360)).days();
            guideTargetDate.lineColor = callColor;
            guideTargetDate.lineAlpha = 1;
            guideTargetDate.lineThickness = 2;
            guideTargetDate.inside = true;
            guideTargetDate.labelRotation = 90;
            guideTargetDate.label = "Call Target: " + (parseDate(sortedDataCalls[0].expiration_date).add(-1 * parseInt($optionTime * 360)).days()).toString("yyyy-MM-dd") + " @@ " + AmCharts.roundTo($optionTargePrice, 2).toString();
            stockPanel1.categoryAxis.addGuide(guideTargetDate);

            stockPanel1.validateNow();
        }
        // Hide modal
        $('#TradierOptionChain').modal('hide');
    }
    function plotPutOptionChain() {
        var putColor = "#A51717";

        // Remove existing plot
        for (var i = 0; i < trendStrike.length; i++) {
            stockPanel1.removeTrendLine(trendStrike[i]);
        }
        for (var i = 0; i < guideRiskReward.length; i++) {
            stockPanel1.valueAxes[1].removeGuide(guideRiskReward[i]);
        }
        stockPanel1.categoryAxis.removeGuide(guideExpiryDate);
        stockPanel1.categoryAxis.removeGuide(guideExpiryDate1);
        stockPanel1.categoryAxis.removeGuide(guideExpiryDate2);
        stockPanel1.categoryAxis.removeGuide(guideExpiryDate3);
        stockPanel1.categoryAxis.removeGuide(guideTargetDate);
        for (var i = 0; i < expiryDate1Strike.length; i++) {
            stockPanel1.removeStockGraph(expiryDate1Strike[i]);
        }
        for (var i = 0; i < expiryDate2Strike.length; i++) {
            stockPanel1.removeStockGraph(expiryDate2Strike[i]);
        }
        for (var i = 0; i < expiryDate3Strike.length; i++) {
            stockPanel1.removeStockGraph(expiryDate3Strike[i]);
        }
        for (var t = 0; t < plotData.length; t++) {
            for (var s = 0; s <= 9; s++) {
                plotData[t]["s1_" + s.toString()] = 'NaN';
                plotData[t]["s2_" + s.toString()] = 'NaN';
                plotData[t]["s3_" + s.toString()] = 'NaN';
            }
        }

        chart.validateData();
        stockPanel1.validateNow();

        // Compute for the max volumen
        var maxVolume = 0;
        for (var i = 0; i < sortedDataPuts.length; i++) {
            if ((sortedDataPuts[i].volume + sortedDataPuts[i].open_interest) > maxVolume) {
                maxVolume = sortedDataPuts[i].volume + sortedDataPuts[i].open_interest;
            }
        }
        // Plot
        if (maxVolume > 0) {
            var $optionTime = document.getElementById('optionTime').value;
            var $optionTargePrice = document.getElementById('optionTargePrice').value;
            var $optionVolatility = document.getElementById('optionVolatility').value;
            var $optionRate = document.getElementById('optionRate').value;

            $optionTime = !$optionTime ? 0.027 : $optionTime / 360; // Annualize
            $optionTargePrice = !$optionTargePrice ? plotData[125]["close"] : $optionTargePrice;
            $optionVolatility = !$optionVolatility ? 0.20 : $optionVolatility / 100; // Percentage
            $optionRate = !$optionRate ? 0.05 : $optionRate / 100; // Percentage

            for (var i = 0; i < sortedDataPuts.length; i++) {
                var volumeLength = parseInt(((sortedDataPuts[i].volume + sortedDataPuts[i].open_interest) / maxVolume) * 30);
                trendStrike[i] = new AmCharts.TrendLine();
                trendStrike[i].lineColor = putColor;
                trendStrike[i].initialDate = plotData[126]["date"];
                trendStrike[i].finalDate = plotData[126 + volumeLength]["date"];
                trendStrike[i].initialValue = sortedDataPuts[i].strike;
                trendStrike[i].finalValue = sortedDataPuts[i].strike;
                trendStrike[i].lineThickness = 10;
                trendStrike[i].lineAlpha = 0.5;
                stockPanel1.addTrendLine(trendStrike[i]);

                var option_price = black_scholes.calculate(false, $optionTargePrice, sortedDataPuts[i].strike, $optionRate, $optionTime, $optionVolatility);
                var change = option_price - sortedDataPuts[i].last;
                var percentage = 0;

                change = Math.round(change * 100) / 100;

                if (sortedDataPuts[i].last > 0) {
                    percentage = (change / sortedDataPuts[i].last) * 100;
                } else {
                    if (change > 0) {
                        percentage = 100;
                    } else if (change == 0) {
                        percentage = 0;
                    } else {
                        percentage = -100;
                    }
                }

                if (percentage < -100) {
                    percentage = -100;
                }

                guideRiskReward[i] = new AmCharts.Guide();
                guideRiskReward[i].lineColor = putColor;
                guideRiskReward[i].date = plotData[126]["date"];
                guideRiskReward[i].label = sortedDataPuts[i].strike.toString() + " (" + sortedDataPuts[i].last.toFixed(2) + "): " + AmCharts.roundTo(option_price, 2).toFixed(2) + " (" + AmCharts.roundTo(change, 2).toFixed(2) + ") " + AmCharts.roundTo(percentage, 2) + "%   ";
                guideRiskReward[i].color = putColor;
                guideRiskReward[i].value = sortedDataPuts[i].strike;
                guideRiskReward[i].inside = true;
                stockPanel1.valueAxes[1].addGuide(guideRiskReward[i]);
            }

            //chartEvent1.date = plotData[125 + parseInt($optionTime*360)]["date"];
            //chartEvent1.backgroundColor = putColor;
            //chartEvent1.color = "#FFFFFF";

            //chart.showStockEvents();
            //chart.validateData();
            //chart.validateNow();

            guideExpiryDate = new AmCharts.Guide();
            guideExpiryDate.date = parseDate(sortedDataPuts[0].expiration_date);
            guideExpiryDate.lineColor = putColor;
            guideExpiryDate.lineAlpha = 1;
            guideExpiryDate.lineThickness = 2;
            guideExpiryDate.inside = true;
            guideExpiryDate.labelRotation = 90;
            guideExpiryDate.label = "Expiry: " + sortedDataPuts[0].expiration_date;
            stockPanel1.categoryAxis.addGuide(guideExpiryDate);

            guideTargetDate = new AmCharts.Guide();
            guideTargetDate.date = parseDate(sortedDataPuts[0].expiration_date).add(-1 * parseInt($optionTime * 360)).days();
            guideTargetDate.lineColor = putColor;
            guideTargetDate.lineAlpha = 1;
            guideTargetDate.lineThickness = 2;
            guideTargetDate.inside = true;
            guideTargetDate.labelRotation = 90;
            guideTargetDate.label = "Put Target: " + (parseDate(sortedDataPuts[0].expiration_date).add(-1 * parseInt($optionTime * 360)).days()).toString("yyyy-MM-dd") + " @@ " + AmCharts.roundTo($optionTargePrice, 2).toString();
            stockPanel1.categoryAxis.addGuide(guideTargetDate);

            stockPanel1.validateNow();
        }
        // Hide modal
        $('#TradierOptionChain').modal('hide');
    }
    function plotExpiryDates(optionType) {
        var expirationDate1 = document.getElementById("optionExpirationDate1").value.substring(0, 10);
        var expirationDate2 = document.getElementById("optionExpirationDate2").value.substring(0, 10);
        var expirationDate3 = document.getElementById("optionExpirationDate3").value.substring(0, 10);
        var lineColor = BlueColor;
        //var optionExpiryDatePick = parseInt(document.querySelector('input[name="optionExpirationStrike"]:checked').value);

        if (optionType == 0) {
            lineColor = "#00B92C"; //Call Color
        } else {
            lineColor = "#A51717"; //Put Color
        }

        // Remove existing plot
        for (var i = 0; i < trendStrike.length; i++) {
            stockPanel1.removeTrendLine(trendStrike[i]);
        }
        for (var i = 0; i < guideRiskReward.length; i++) {
            stockPanel1.valueAxes[1].removeGuide(guideRiskReward[i]);
        }
        stockPanel1.categoryAxis.removeGuide(guideExpiryDate);
        stockPanel1.categoryAxis.removeGuide(guideExpiryDate1);
        stockPanel1.categoryAxis.removeGuide(guideExpiryDate2);
        stockPanel1.categoryAxis.removeGuide(guideExpiryDate3);
        stockPanel1.categoryAxis.removeGuide(guideTargetDate);
        for (var i = 0; i < expiryDate1Strike.length; i++) {
            stockPanel1.removeStockGraph(expiryDate1Strike[i]);
        }
        for (var i = 0; i < expiryDate2Strike.length; i++) {
            stockPanel1.removeStockGraph(expiryDate2Strike[i]);
        }
        for (var i = 0; i < expiryDate3Strike.length; i++) {
            stockPanel1.removeStockGraph(expiryDate3Strike[i]);
        }
        stockPanel1.validateNow();

        var $optionTime = document.getElementById('optionTime').value;
        $optionTime = !$optionTime ? 10 : $optionTime;

        var d1 = new Date(parseDate(expirationDate1)); var nd1 = new Date(d1);
        var d2 = new Date(parseDate(expirationDate2)); var nd2 = new Date(d2);
        var d3 = new Date(parseDate(expirationDate3)); var nd3 = new Date(d3);

        nd1.setDate(nd1.getDate() - $optionTime);
        nd2.setDate(nd2.getDate() - $optionTime);
        nd3.setDate(nd3.getDate() - $optionTime);

        var nd1dd = nd1.getDate(); var nd1mm = nd1.getMonth() + 1; var nd1yy = nd1.getFullYear();
        var nd2dd = nd2.getDate(); var nd2mm = nd2.getMonth() + 1; var nd2yy = nd2.getFullYear();
        var nd3dd = nd3.getDate(); var nd3mm = nd3.getMonth() + 1; var nd3yy = nd3.getFullYear();

        var exp1Date = parseDate(nd1yy + '-' + nd1mm + '-' + nd1dd);
        var exp2Date = parseDate(nd2yy + '-' + nd2mm + '-' + nd2dd);
        var exp3Date = parseDate(nd3yy + '-' + nd3mm + '-' + nd3dd);

        guideExpiryDate1 = new AmCharts.Guide();
        guideExpiryDate1.date = exp1Date;
        guideExpiryDate1.lineColor = lineColor;
        guideExpiryDate1.lineAlpha = 1;
        guideExpiryDate1.lineThickness = 4;
        guideExpiryDate1.inside = true;
        guideExpiryDate1.labelRotation = 90;
        guideExpiryDate1.label = $optionTime.toString() + " Days prior to expiry: " + expirationDate1;
        stockPanel1.categoryAxis.addGuide(guideExpiryDate1);

        guideExpiryDate2 = new AmCharts.Guide();
        guideExpiryDate2.date = exp2Date;
        guideExpiryDate2.lineColor = lineColor;
        guideExpiryDate2.lineAlpha = 1;
        guideExpiryDate2.lineThickness = 4;
        guideExpiryDate2.inside = true;
        guideExpiryDate2.labelRotation = 90;
        guideExpiryDate2.label = $optionTime.toString() + " Days prior to expiry: " + expirationDate2;
        stockPanel1.categoryAxis.addGuide(guideExpiryDate2);

        guideExpiryDate3 = new AmCharts.Guide();
        guideExpiryDate3.date = exp3Date;
        guideExpiryDate3.lineColor = lineColor;
        guideExpiryDate3.lineAlpha = 1;
        guideExpiryDate3.lineThickness = 4;
        guideExpiryDate3.inside = true;
        guideExpiryDate3.labelRotation = 90;
        guideExpiryDate3.label = $optionTime.toString() + " Days prior to expiry: " + expirationDate3;
        stockPanel1.categoryAxis.addGuide(guideExpiryDate3);

        stockPanel1.validateNow();
        $('#TradierOptionChain').modal('hide');

        plotExpiryDateStrikes(1, expirationDate1, optionType, false);
    }
    function plotExpiryDateStrikes(id, expirationDate, optionType, refreshChart) {
        var broker = getCookie("Broker");

        var dataCalls = [];
        var dataPuts = [];

        var callColor = "#00B92C";
        var putColor = "#A51717";

        var $optionTime;
        var $optionTargePrice;
        var $optionVolatility;
        var $optionRate;

        var option_price;
        var change;
        var percentage;

        var callOptionListData = [];
        var putOptionListData = [];

        if (broker == "Questrade") {
            // =========
            // Questrade
            // =========

            // Set dataCalls and Puts
            for (var i = 0; i < QuestradeOptionChain.optionChain.length; i++) {
                if (expirationDate == QuestradeOptionChain.optionChain[i].expiryDate.substring(0, 10)) {
                    if (QuestradeOptionChain.optionChain[i].chainPerRoot.length > 0) {
                        if (QuestradeOptionChain.optionChain[i].chainPerRoot[0].chainPerStrikePrice.length) {
                            for (var s = 0; s < QuestradeOptionChain.optionChain[i].chainPerRoot[0].chainPerStrikePrice.length; s++) {
                                var strikePrice = QuestradeOptionChain.optionChain[i].chainPerRoot[0].chainPerStrikePrice[s];
                                dataCalls.push({
                                    symbol: QuestradeOptionChain.optionChain[i].chainPerRoot[0].chainPerStrikePrice[s].callSymbolId,
                                    description: QuestradeOptionChain.optionChain[i].chainPerRoot[0].optionRoot + "-CALL(" + QuestradeOptionChain.optionChain[i].chainPerRoot[0].chainPerStrikePrice[s].callSymbolId + ") @@" + strikePrice.strikePrice,
                                    type: "OPTION",
                                    last: 0,
                                    change: 0,
                                    volume: 0,
                                    bid: 0,
                                    bidsize: 0,
                                    ask: 0,
                                    asksize: 0,
                                    open_interest: 0,
                                    strike: strikePrice.strikePrice,
                                    contract_size: 0,
                                    expiration_date: QuestradeOptionChain.optionChain[i].expiryDate.substring(0, 10),
                                    expiration_type: "NA",
                                    option_type: "CALL",
                                    root_symbol: QuestradeOptionChain.optionChain[i].chainPerRoot[0].optionRoot
                                });
                                dataPuts.push({
                                    symbol: QuestradeOptionChain.optionChain[i].chainPerRoot[0].chainPerStrikePrice[s].putSymbolId,
                                    description: QuestradeOptionChain.optionChain[i].chainPerRoot[0].optionRoot + "-PUT(" + QuestradeOptionChain.optionChain[i].chainPerRoot[0].chainPerStrikePrice[s].putSymbolId + ") @@" + strikePrice.strikePrice,
                                    type: "OPTION",
                                    last: 0,
                                    change: 0,
                                    volume: 0,
                                    bid: 0,
                                    bidsize: 0,
                                    ask: 0,
                                    asksize: 0,
                                    open_interest: 0,
                                    strike: strikePrice.strikePrice,
                                    contract_size: 0,
                                    expiration_date: QuestradeOptionChain.optionChain[i].expiryDate.substring(0, 10),
                                    expiration_type: "NA",
                                    option_type: "PUT",
                                    root_symbol: QuestradeOptionChain.optionChain[i].chainPerRoot[0].optionRoot
                                });
                            }
                        }
                    }
                }
            }
            dataCalls.sort(function compare(a, b) {
                if (a.strike < b.strike)
                    return -1;
                if (a.strike > b.strike)
                    return 1;
                return 0;
            });
            dataPuts.sort(function compare(a, b) {
                if (a.strike < b.strike)
                    return -1;
                if (a.strike > b.strike)
                    return 1;
                return 0;
            });

            sortedDataCalls = new wijmo.collections.ObservableArray();
            sortedDataPuts = new wijmo.collections.ObservableArray();

            sortedDataCalls = extractOptionChain(dataCalls);
            sortedDataPuts = extractOptionChain(dataPuts);

            // Black-Schole Default Values

            $optionTime = document.getElementById('optionTime').value;
            $optionTargePrice = document.getElementById('optionTargePrice').value;
            $optionVolatility = document.getElementById('optionVolatility').value;
            $optionRate = document.getElementById('optionRate').value;

            option_price = 0;
            change = 0;
            percentage = 0;

            $optionTime = !$optionTime ? 0.027 : $optionTime / 360;                                 // Annualize
            $optionTargePrice = !$optionTargePrice ? plotData[125]["close"] : $optionTargePrice;    // Stock Price
            $optionVolatility = !$optionVolatility ? 0.20 : $optionVolatility / 100;                // Percentage
            $optionRate = !$optionRate ? 0.05 : $optionRate / 100;                                  // Percentage

            // Calls
            if (optionType == 0) {

                // Calls Parameter
                callOptionListData.push(QuestradeApiServer);
                callOptionListData.push(QuestradeAccessToken);
                for (var x = 0; x < sortedDataCalls.length; x++) {
                    callOptionListData.push(sortedDataCalls[x].symbol.toString());
                }

                $.ajax({
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    url: '/api/GetQuestradeOptionQuotes',
                    dataType: "json",
                    data: { optionList: callOptionListData },
                    success: function (result) {

                        // Modify dataCalls
                        for (var i = 0; i < result.optionQuotes.length; i++) {
                            for (var s = 0; s < sortedDataCalls.length; s++) {
                                if (result.optionQuotes[i].symbolId == sortedDataCalls[s].symbol) {
                                    sortedDataCalls[s].description = result.optionQuotes[i].symbol;
                                    sortedDataCalls[s].type = "Call";
                                    sortedDataCalls[s].last = Math.abs(result.optionQuotes[i].lastTradePrice);
                                    sortedDataCalls[s].change = Math.abs(result.optionQuotes[i].bidPrice) - Math.abs(result.optionQuotes[i].lastTradePrice);
                                    sortedDataCalls[s].volume = Math.abs(result.optionQuotes[i].volume);
                                    sortedDataCalls[s].bid = Math.abs(result.optionQuotes[i].bidPrice);
                                    sortedDataCalls[s].bidsize = Math.abs(result.optionQuotes[i].bidSize);
                                    sortedDataCalls[s].ask = Math.abs(result.optionQuotes[i].askPrice);
                                    sortedDataCalls[s].asksize = Math.abs(result.optionQuotes[i].askSize);
                                    sortedDataCalls[s].open_interest = Math.abs(result.optionQuotes[i].openInterest);
                                    sortedDataCalls[s].contract_size = Math.abs(result.optionQuotes[i].bidSize) + Math.abs(result.optionQuotes[i].askSize);
                                }
                            }
                        }

                        // Plot
                        expiryDateStrike = [];
                        for (var s = 0; s < sortedDataCalls.length; s++) {

                            option_price = black_scholes.calculate(true, $optionTargePrice, sortedDataCalls[s].strike, $optionRate, $optionTime, $optionVolatility);
                            change = option_price - sortedDataCalls[s].last;
                            percentage = 0;
                            change = Math.round(change * 100) / 100;

                            if (sortedDataCalls[s].last > 0) {
                                percentage = (change / sortedDataCalls[s].last) * 100;
                            } else {
                                if (change > 0) {
                                    percentage = 100;
                                } else if (change == 0) {
                                    percentage = 0;
                                } else {
                                    percentage = -100;
                                }
                            }

                            if (percentage < -100) {
                                percentage = -100;
                            }

                            for (var t = 0; t < plotData.length; t++) {
                                plotData[t]["s" + id.toString() + "_" + s.toString()] = 'NaN';
                            }
                            for (var t = 0; t < plotData.length; t++) {
                                var $priorday1 = document.getElementById('optionTime').value;
                                $priorday1 = !$priorday1 ? 10 : $priorday1;

                                var d1 = new Date(parseDate(expirationDate)); var nd1 = new Date(d1);

                                nd1.setDate(nd1.getDate() - $priorday1);

                                var nd1dd = nd1.getDate(); var nd1mm = nd1.getMonth() + 1; var nd1yy = nd1.getFullYear();

                                var expDate = parseDate(nd1yy + '-' + nd1mm + '-' + nd1dd);

                                if (plotData[t]["date"] >= expDate) {
                                    plotData[t]["s" + id.toString() + "_" + s.toString()] = sortedDataCalls[s].strike;
                                    break;
                                }
                            }

                            if (id == 1) {
                                expiryDate1Strike[s] = new AmCharts.StockGraph();
                                expiryDate1Strike[s].type = "candlestick";
                                expiryDate1Strike[s].openField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].closeField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].highField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].lowField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].valueField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].balloonText = "$" + sortedDataCalls[s].strike.toString() + "  :  " + AmCharts.roundTo(percentage, 2) + "%   ";
                                expiryDate1Strike[s].lineColor = callColor;
                                expiryDate1Strike[s].fillColors = callColor;
                                expiryDate1Strike[s].fillAlphas = 1;
                                expiryDate1Strike[s].proCandlesticks = false;
                                expiryDate1Strike[s].visibleInLegend = false;
                                expiryDate1Strike[s].bullet = "round";
                                expiryDate1Strike[s].bulletColor = callColor;
                                expiryDate1Strike[s].bulletBorderColor = callColor;

                                stockPanel1.addStockGraph(expiryDate1Strike[s]);
                            } else if (id == 2) {
                                expiryDate2Strike[s] = new AmCharts.StockGraph();
                                expiryDate2Strike[s].type = "candlestick";
                                expiryDate2Strike[s].openField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].closeField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].highField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].lowField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].valueField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].balloonText = "$" + sortedDataCalls[s].strike.toString() + "  :  " + AmCharts.roundTo(percentage, 2) + "%   ";
                                expiryDate2Strike[s].lineColor = callColor;
                                expiryDate2Strike[s].fillColors = callColor;
                                expiryDate2Strike[s].fillAlphas = 1;
                                expiryDate2Strike[s].proCandlesticks = false;
                                expiryDate2Strike[s].visibleInLegend = false;
                                expiryDate2Strike[s].bullet = "round";
                                expiryDate2Strike[s].bulletColor = callColor;
                                expiryDate2Strike[s].bulletBorderColor = callColor;

                                stockPanel1.addStockGraph(expiryDate2Strike[s]);
                            } else if (id == 3) {
                                expiryDate3Strike[s] = new AmCharts.StockGraph();
                                expiryDate3Strike[s].type = "candlestick";
                                expiryDate3Strike[s].openField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].closeField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].highField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].lowField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].valueField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].balloonText = "$" + sortedDataCalls[s].strike.toString() + "  :  " + AmCharts.roundTo(percentage, 2) + "%   ";
                                expiryDate3Strike[s].lineColor = callColor;
                                expiryDate3Strike[s].fillColors = callColor;
                                expiryDate3Strike[s].fillAlphas = 1;
                                expiryDate3Strike[s].proCandlesticks = false;
                                expiryDate3Strike[s].visibleInLegend = false;
                                expiryDate3Strike[s].bullet = "round";
                                expiryDate3Strike[s].bulletColor = callColor;
                                expiryDate3Strike[s].bulletBorderColor = callColor;

                                stockPanel1.addStockGraph(expiryDate3Strike[s]);
                            }
                        }
                        if (refreshChart == true) {
                            chart.validateData();
                            stockPanel1.validateNow();
                            $('#loading').modal('hide');
                        } else {
                            if (id == 1) {
                                $('#loading').modal({
                                    show: true,
                                    backdrop: false
                                });
                                var expirationDate2 = document.getElementById("optionExpirationDate2").value.substring(0, 10);
                                plotExpiryDateStrikes(2, expirationDate2, optionType, false);
                            } else if (id == 2) {
                                var expirationDate3 = document.getElementById("optionExpirationDate3").value.substring(0, 10);
                                plotExpiryDateStrikes(3, expirationDate3, optionType, true);
                            }
                        }
                    }
                });

            // Puts
            } else {

                // Puts Parameter
                putOptionListData.push(QuestradeApiServer);
                putOptionListData.push(QuestradeAccessToken);
                for (var x = 0; x < sortedDataPuts.length; x++) {
                    putOptionListData.push(sortedDataPuts[x].symbol.toString());
                }

                $.ajax({
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    url: '/api/GetQuestradeOptionQuotes',
                    dataType: "json",
                    data: { optionList: putOptionListData },
                    success: function (result) {

                        // Modify dataPuts
                        for (var i = 0; i < result.optionQuotes.length; i++) {
                            for (var s = 0; s < sortedDataPuts.length; s++) {
                                if (result.optionQuotes[i].symbolId == sortedDataPuts[s].symbol) {
                                    sortedDataPuts[s].description = result.optionQuotes[i].symbol;
                                    sortedDataPuts[s].type = "Put";
                                    sortedDataPuts[s].last = Math.abs(result.optionQuotes[i].lastTradePrice);
                                    sortedDataPuts[s].change = Math.abs(result.optionQuotes[i].bidPrice) - Math.abs(result.optionQuotes[i].lastTradePrice);
                                    sortedDataPuts[s].volume = Math.abs(result.optionQuotes[i].volume);
                                    sortedDataPuts[s].bid = Math.abs(result.optionQuotes[i].bidPrice);
                                    sortedDataPuts[s].bidsize = Math.abs(result.optionQuotes[i].bidSize);
                                    sortedDataPuts[s].ask = Math.abs(result.optionQuotes[i].askPrice);
                                    sortedDataPuts[s].asksize = Math.abs(result.optionQuotes[i].askSize);
                                    sortedDataPuts[s].open_interest = Math.abs(result.optionQuotes[i].openInterest);
                                    sortedDataPuts[s].contract_size = Math.abs(result.optionQuotes[i].bidSize) + Math.abs(result.optionQuotes[i].askSize);
                                }
                            }
                        }

                        // Plot
                        expiryDateStrike = [];
                        for (var s = 0; s < sortedDataPuts.length; s++) {

                            option_price = black_scholes.calculate(true, $optionTargePrice, sortedDataPuts[s].strike, $optionRate, $optionTime, $optionVolatility);
                            change = option_price - sortedDataPuts[s].last;
                            percentage = 0;
                            change = Math.round(change * 100) / 100;

                            if (sortedDataCalls[s].last > 0) {
                                percentage = (change / sortedDataPuts[s].last) * 100;
                            } else {
                                if (change > 0) {
                                    percentage = 100;
                                } else if (change == 0) {
                                    percentage = 0;
                                } else {
                                    percentage = -100;
                                }
                            }

                            if (percentage < -100) {
                                percentage = -100;
                            }

                            for (var t = 0; t < plotData.length; t++) {
                                plotData[t]["s" + id.toString() + "_" + s.toString()] = 'NaN';
                            }
                            for (var t = 0; t < plotData.length; t++) {
                                var $priorday2 = document.getElementById('optionTime').value;
                                $priorday2 = !$priorday2 ? 10 : $priorday2;

                                var d2 = new Date(parseDate(expirationDate)); var nd2 = new Date(d2);

                                nd2.setDate(nd2.getDate() - $priorday2);

                                var nd2dd = nd2.getDate(); var nd2mm = nd2.getMonth() + 1; var nd2yy = nd2.getFullYear();

                                var expDate2 = parseDate(nd2yy + '-' + nd2mm + '-' + nd2dd);

                                if (plotData[t]["date"] >= expDate2) {
                                    plotData[t]["s" + id.toString() + "_" + s.toString()] = sortedDataPuts[s].strike;
                                    break;
                                }
                            }

                            if (id == 1) {
                                expiryDate1Strike[s] = new AmCharts.StockGraph();
                                expiryDate1Strike[s].type = "candlestick";
                                expiryDate1Strike[s].openField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].closeField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].highField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].lowField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].valueField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].balloonText = "$" + sortedDataPuts[s].strike.toString() + "  :  " + AmCharts.roundTo(percentage, 2) + "%   ";
                                expiryDate1Strike[s].lineColor = putColor;
                                expiryDate1Strike[s].fillColors = putColor;
                                expiryDate1Strike[s].fillAlphas = 1;
                                expiryDate1Strike[s].proCandlesticks = false;
                                expiryDate1Strike[s].visibleInLegend = false;
                                expiryDate1Strike[s].bullet = "round";
                                expiryDate1Strike[s].bulletColor = putColor;
                                expiryDate1Strike[s].bulletBorderColor = putColor;

                                stockPanel1.addStockGraph(expiryDate1Strike[s]);
                            } else if (id == 2) {
                                expiryDate2Strike[s] = new AmCharts.StockGraph();
                                expiryDate2Strike[s].type = "candlestick";
                                expiryDate2Strike[s].openField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].closeField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].highField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].lowField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].valueField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].balloonText = "$" + sortedDataPuts[s].strike.toString() + "  :  " + AmCharts.roundTo(percentage, 2) + "%   ";
                                expiryDate2Strike[s].lineColor = putColor;
                                expiryDate2Strike[s].fillColors = putColor;
                                expiryDate2Strike[s].fillAlphas = 1;
                                expiryDate2Strike[s].proCandlesticks = false;
                                expiryDate2Strike[s].visibleInLegend = false;
                                expiryDate2Strike[s].bullet = "round";
                                expiryDate2Strike[s].bulletColor = putColor;
                                expiryDate2Strike[s].bulletBorderColor = putColor;

                                stockPanel1.addStockGraph(expiryDate2Strike[s]);
                            } else if (id == 3) {
                                expiryDate3Strike[s] = new AmCharts.StockGraph();
                                expiryDate3Strike[s].type = "candlestick";
                                expiryDate3Strike[s].openField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].closeField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].highField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].lowField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].valueField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].balloonText = "$" + sortedDataPuts[s].strike.toString() + "  :  " + AmCharts.roundTo(percentage, 2) + "%   ";
                                expiryDate3Strike[s].lineColor = putColor;
                                expiryDate3Strike[s].fillColors = putColor;
                                expiryDate3Strike[s].fillAlphas = 1;
                                expiryDate3Strike[s].proCandlesticks = false;
                                expiryDate3Strike[s].visibleInLegend = false;
                                expiryDate3Strike[s].bullet = "round";
                                expiryDate3Strike[s].bulletColor = putColor;
                                expiryDate3Strike[s].bulletBorderColor = putColor;

                                stockPanel1.addStockGraph(expiryDate3Strike[s]);
                            }
                        }
                        if (refreshChart == true) {
                            chart.validateData();
                            stockPanel1.validateNow();
                            $('#loading').modal('hide');
                        } else {
                            if (id == 1) {
                                $('#loading').modal({
                                    show: true,
                                    backdrop: false
                                });
                                var expirationDate2 = document.getElementById("optionExpirationDate2").value.substring(0, 10);
                                plotExpiryDateStrikes(2, expirationDate2, optionType, false);
                            } else if (id == 2) {
                                var expirationDate3 = document.getElementById("optionExpirationDate3").value.substring(0, 10);
                                plotExpiryDateStrikes(3, expirationDate3, optionType, true);
                            }
                        }
                    }
                });
            }

        } else {

            // Tradier
            $.ajax({
                url: '/api/GetTradierOptionChain/' + dataSymbol + '/' + expirationDate + '/' + TradierAccessToken,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (result) {
                    for (var r = 0; r < result.options.option.length; r++) {
                        if (result.options.option[r].option_type == "call") {
                            dataCalls.push({
                                symbol: result.options.option[r].symbol,
                                description: result.options.option[r].description,
                                type: result.options.option[r].type,
                                last: result.options.option[r].last,
                                change: result.options.option[r].change,
                                volume: result.options.option[r].volume,
                                bid: result.options.option[r].bid,
                                bidsize: result.options.option[r].bidsize,
                                ask: result.options.option[r].ask,
                                asksize: result.options.option[r].asksize,
                                open_interest: result.options.option[r].open_interest,
                                strike: result.options.option[r].strike,
                                contract_size: result.options.option[r].contract_size,
                                expiration_date: result.options.option[r].expiration_date,
                                expiration_type: result.options.option[r].expiration_type,
                                option_type: result.options.option[r].option_type,
                                root_symbol: result.options.option[r].root_symbol
                            })
                        } else {
                            dataPuts.push({
                                symbol: result.options.option[r].symbol,
                                description: result.options.option[r].description,
                                type: result.options.option[r].type,
                                last: result.options.option[r].last,
                                change: result.options.option[r].change,
                                volume: result.options.option[r].volume,
                                bid: result.options.option[r].bid,
                                bidsize: result.options.option[r].bidsize,
                                ask: result.options.option[r].ask,
                                asksize: result.options.option[r].asksize,
                                open_interest: result.options.option[r].open_interest,
                                strike: result.options.option[r].strike,
                                contract_size: result.options.option[r].contract_size,
                                expiration_date: result.options.option[r].expiration_date,
                                expiration_type: result.options.option[r].expiration_type,
                                option_type: result.options.option[r].option_type,
                                root_symbol: result.options.option[r].root_symbol
                            })
                        }
                    }

                    dataCalls.sort(function compare(a, b) {
                        if (a.strike < b.strike)
                            return -1;
                        if (a.strike > b.strike)
                            return 1;
                        return 0;
                    });
                    dataPuts.sort(function compare(a, b) {
                        if (a.strike < b.strike)
                            return -1;
                        if (a.strike > b.strike)
                            return 1;
                        return 0;
                    });

                    sortedDataCalls = new wijmo.collections.ObservableArray();
                    sortedDataPuts = new wijmo.collections.ObservableArray();

                    sortedDataCalls = extractOptionChain(dataCalls);
                    sortedDataPuts = extractOptionChain(dataPuts);

                    // Black-Schole Default Values
                    $optionTime = document.getElementById('optionTime').value;
                    $optionTargePrice = document.getElementById('optionTargePrice').value;
                    $optionVolatility = document.getElementById('optionVolatility').value;
                    $optionRate = document.getElementById('optionRate').value;

                    option_price = 0;
                    change = 0;
                    percentage = 0;

                    $optionTime = !$optionTime ? 0.027 : $optionTime / 360;                                 // Annualize
                    $optionTargePrice = !$optionTargePrice ? plotData[125]["close"] : $optionTargePrice;    // Stock Price
                    $optionVolatility = !$optionVolatility ? 0.20 : $optionVolatility / 100;                // Percentage
                    $optionRate = !$optionRate ? 0.05 : $optionRate / 100;                                  // Percentage

                    if (optionType == 0) {
                        expiryDateStrike = [];
                        for (var s = 0; s < sortedDataCalls.length; s++) {

                            option_price = black_scholes.calculate(true, $optionTargePrice, sortedDataCalls[s].strike, $optionRate, $optionTime, $optionVolatility);
                            change = option_price - sortedDataCalls[s].last;
                            percentage = 0;
                            change = Math.round(change * 100) / 100;

                            if (sortedDataCalls[s].last > 0) {
                                percentage = (change / sortedDataCalls[s].last) * 100;
                            } else {
                                if (change > 0) {
                                    percentage = 100;
                                } else if (change == 0) {
                                    percentage = 0;
                                } else {
                                    percentage = -100;
                                }
                            }

                            if (percentage < -100) {
                                percentage = -100;
                            }

                            for (var t = 0; t < plotData.length; t++) {
                                plotData[t]["s" + id.toString() + "_" + s.toString()] = 'NaN';
                            }
                            for (var t = 0; t < plotData.length; t++) {
                                var $priorday1 = document.getElementById('optionTime').value;
                                $priorday1 = !$priorday1 ? 10 : $priorday1;

                                var d1 = new Date(parseDate(expirationDate)); var nd1 = new Date(d1);

                                nd1.setDate(nd1.getDate() - $priorday1);

                                var nd1dd = nd1.getDate(); var nd1mm = nd1.getMonth() + 1; var nd1yy = nd1.getFullYear();

                                var expDate = parseDate(nd1yy + '-' + nd1mm + '-' + nd1dd);

                                if (plotData[t]["date"] >= expDate) {
                                    plotData[t]["s" + id.toString()  + "_" + s.toString()] = sortedDataCalls[s].strike;
                                    break;
                                }
                            }

                            if (id == 1) {
                                expiryDate1Strike[s] = new AmCharts.StockGraph();
                                expiryDate1Strike[s].type = "candlestick";
                                expiryDate1Strike[s].openField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].closeField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].highField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].lowField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].valueField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].balloonText = "$" + sortedDataCalls[s].strike.toString() + "  :  " + AmCharts.roundTo(percentage, 2) + "%   ";
                                expiryDate1Strike[s].lineColor = callColor;
                                expiryDate1Strike[s].fillColors = callColor;
                                expiryDate1Strike[s].fillAlphas = 1;
                                expiryDate1Strike[s].proCandlesticks = false;
                                expiryDate1Strike[s].visibleInLegend = false;
                                expiryDate1Strike[s].bullet = "round";
                                expiryDate1Strike[s].bulletColor = callColor;
                                expiryDate1Strike[s].bulletBorderColor = callColor;

                                stockPanel1.addStockGraph(expiryDate1Strike[s]);
                            } else if (id == 2) {
                                expiryDate2Strike[s] = new AmCharts.StockGraph();
                                expiryDate2Strike[s].type = "candlestick";
                                expiryDate2Strike[s].openField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].closeField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].highField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].lowField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].valueField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].balloonText = "$" + sortedDataCalls[s].strike.toString() + "  :  " + AmCharts.roundTo(percentage, 2) + "%   ";
                                expiryDate2Strike[s].lineColor = callColor;
                                expiryDate2Strike[s].fillColors = callColor;
                                expiryDate2Strike[s].fillAlphas = 1;
                                expiryDate2Strike[s].proCandlesticks = false;
                                expiryDate2Strike[s].visibleInLegend = false;
                                expiryDate2Strike[s].bullet = "round";
                                expiryDate2Strike[s].bulletColor = callColor;
                                expiryDate2Strike[s].bulletBorderColor = callColor;

                                stockPanel1.addStockGraph(expiryDate2Strike[s]);
                            } else if (id == 3) {
                                expiryDate3Strike[s] = new AmCharts.StockGraph();
                                expiryDate3Strike[s].type = "candlestick";
                                expiryDate3Strike[s].openField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].closeField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].highField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].lowField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].valueField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].balloonText = "$" + sortedDataCalls[s].strike.toString() + "  :  " + AmCharts.roundTo(percentage, 2) + "%   ";
                                expiryDate3Strike[s].lineColor = callColor;
                                expiryDate3Strike[s].fillColors = callColor;
                                expiryDate3Strike[s].fillAlphas = 1;
                                expiryDate3Strike[s].proCandlesticks = false;
                                expiryDate3Strike[s].visibleInLegend = false;
                                expiryDate3Strike[s].bullet = "round";
                                expiryDate3Strike[s].bulletColor = callColor;
                                expiryDate3Strike[s].bulletBorderColor = callColor;

                                stockPanel1.addStockGraph(expiryDate3Strike[s]);
                            }
                        }
                        if (refreshChart == true) {
                            chart.validateData();
                            stockPanel1.validateNow();
                            $('#loading').modal('hide');
                        } else {
                            if (id == 1) {
                                $('#loading').modal({
                                    show: true,
                                    backdrop: false
                                });
                                var expirationDate2 = document.getElementById("optionExpirationDate2").value.substring(0, 10);
                                plotExpiryDateStrikes(2, expirationDate2, optionType, false);
                            } else if (id == 2) {
                                var expirationDate3 = document.getElementById("optionExpirationDate3").value.substring(0, 10);
                                plotExpiryDateStrikes(3, expirationDate3, optionType, true);
                            }
                        }
                    } else {
                        expiryDateStrike = [];
                        for (var s = 0; s < sortedDataPuts.length; s++) {

                            option_price = black_scholes.calculate(true, $optionTargePrice, sortedDataPuts[s].strike, $optionRate, $optionTime, $optionVolatility);
                            change = option_price - sortedDataPuts[s].last;
                            percentage = 0;
                            change = Math.round(change * 100) / 100;
                            
                            if (sortedDataCalls[s].last > 0) {
                                percentage = (change / sortedDataPuts[s].last) * 100;
                            } else {
                                if (change > 0) {
                                    percentage = 100;
                                } else if (change == 0) {
                                    percentage = 0;
                                } else {
                                    percentage = -100;
                                }
                            }

                            if (percentage < -100) {
                                percentage = -100;
                            }

                            for (var t = 0; t < plotData.length; t++) {
                                plotData[t]["s" + id.toString() + "_" + s.toString()] = 'NaN';
                            }
                            for (var t = 0; t < plotData.length; t++) {
                                var $priorday2 = document.getElementById('optionTime').value;
                                $priorday2 = !$priorday2 ? 10 : $priorday2;

                                var d2 = new Date(parseDate(expirationDate)); var nd2 = new Date(d2);

                                nd2.setDate(nd2.getDate() - $priorday2);

                                var nd2dd = nd2.getDate(); var nd2mm = nd2.getMonth() + 1; var nd2yy = nd2.getFullYear();

                                var expDate2 = parseDate(nd2yy + '-' + nd2mm + '-' + nd2dd);

                                if (plotData[t]["date"] >= expDate2) {
                                    plotData[t]["s" + id.toString() + "_" + s.toString()] = sortedDataPuts[s].strike;
                                    break;
                                }
                            }

                            if (id == 1) {
                                expiryDate1Strike[s] = new AmCharts.StockGraph();
                                expiryDate1Strike[s].type = "candlestick";
                                expiryDate1Strike[s].openField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].closeField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].highField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].lowField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].valueField = 's' + id.toString() + '_' + s.toString();
                                expiryDate1Strike[s].balloonText = "$" + sortedDataPuts[s].strike.toString() + "  :  " + AmCharts.roundTo(percentage, 2) + "%   ";
                                expiryDate1Strike[s].lineColor = putColor;
                                expiryDate1Strike[s].fillColors = putColor;
                                expiryDate1Strike[s].fillAlphas = 1;
                                expiryDate1Strike[s].proCandlesticks = false;
                                expiryDate1Strike[s].visibleInLegend = false;
                                expiryDate1Strike[s].bullet = "round";
                                expiryDate1Strike[s].bulletColor = putColor;
                                expiryDate1Strike[s].bulletBorderColor = putColor;

                                stockPanel1.addStockGraph(expiryDate1Strike[s]);
                            } else if (id == 2) {
                                expiryDate2Strike[s] = new AmCharts.StockGraph();
                                expiryDate2Strike[s].type = "candlestick";
                                expiryDate2Strike[s].openField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].closeField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].highField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].lowField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].valueField = 's' + id.toString() + '_' + s.toString();
                                expiryDate2Strike[s].balloonText = "$" + sortedDataPuts[s].strike.toString() + "  :  " + AmCharts.roundTo(percentage, 2) + "%   ";
                                expiryDate2Strike[s].lineColor = putColor;
                                expiryDate2Strike[s].fillColors = putColor;
                                expiryDate2Strike[s].fillAlphas = 1;
                                expiryDate2Strike[s].proCandlesticks = false;
                                expiryDate2Strike[s].visibleInLegend = false;
                                expiryDate2Strike[s].bullet = "round";
                                expiryDate2Strike[s].bulletColor = putColor;
                                expiryDate2Strike[s].bulletBorderColor = putColor;

                                stockPanel1.addStockGraph(expiryDate2Strike[s]);
                            } else if (id == 3) {
                                expiryDate3Strike[s] = new AmCharts.StockGraph();
                                expiryDate3Strike[s].type = "candlestick";
                                expiryDate3Strike[s].openField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].closeField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].highField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].lowField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].valueField = 's' + id.toString() + '_' + s.toString();
                                expiryDate3Strike[s].balloonText = "$" + sortedDataPuts[s].strike.toString() + "  :  " + AmCharts.roundTo(percentage, 2) + "%   ";
                                expiryDate3Strike[s].lineColor = putColor;
                                expiryDate3Strike[s].fillColors = putColor;
                                expiryDate3Strike[s].fillAlphas = 1;
                                expiryDate3Strike[s].proCandlesticks = false;
                                expiryDate3Strike[s].visibleInLegend = false;
                                expiryDate3Strike[s].bullet = "round";
                                expiryDate3Strike[s].bulletColor = putColor;
                                expiryDate3Strike[s].bulletBorderColor = putColor;

                                stockPanel1.addStockGraph(expiryDate3Strike[s]);
                            }
                        }
                        if (refreshChart == true) {
                            chart.validateData();
                            stockPanel1.validateNow();
                            $('#loading').modal('hide');
                        } else {
                            if (id == 1) {
                                $('#loading').modal({
                                    show: true,
                                    backdrop: false
                                });
                                var expirationDate2 = document.getElementById("optionExpirationDate2").value.substring(0, 10);
                                plotExpiryDateStrikes(2, expirationDate2, optionType, false);
                            } else if (id == 2) {
                                var expirationDate3 = document.getElementById("optionExpirationDate3").value.substring(0, 10);
                                plotExpiryDateStrikes(3, expirationDate3, optionType, true);
                            }
                        }
                    }
                }
            });
        }
    }
    function optionTab_OnClick(tab) {
        switch (tab) {
            case 1:
                document.getElementById('plotCalls').style.visibility = 'visible';
                document.getElementById('plotPuts').style.visibility = 'hidden';
                document.getElementById('plotExpiryDatesCalls').style.visibility = 'hidden';
                document.getElementById('plotExpiryDatesPuts').style.visibility = 'hidden';
                break;
            case 2:
                document.getElementById('plotCalls').style.visibility = 'hidden';
                document.getElementById('plotPuts').style.visibility = 'visible';
                document.getElementById('plotExpiryDatesCalls').style.visibility = 'hidden';
                document.getElementById('plotExpiryDatesPuts').style.visibility = 'hidden';
                break;
            case 3:
                document.getElementById('plotCalls').style.visibility = 'hidden';
                document.getElementById('plotPuts').style.visibility = 'hidden';
                document.getElementById('plotExpiryDatesCalls').style.visibility = 'visible';
                document.getElementById('plotExpiryDatesPuts').style.visibility = 'visible';
                break;
        }
    }

    // Moving Average

    function generateMovingAverage() {
        if (MovingAverageData.length == 0) {
            MovingAverageData = [{
                "id": 1,
                "description": "EMA 8",
                "type": "e",
                "noOfDays": 8,
                "color": "#070BB0",
                "isActive": true
            }, {
                "id": 2,
                "description": "EMA 21",
                "type": "e",
                "noOfDays": 21,
                "color": "#B1030B",
                "isActive": true
            }, {
                "id": 3,
                "description": "SMA 50",
                "type": "s",
                "noOfDays": 50,
                "color": "#C97232",
                "isActive": false
            }, {
                "id": 4,
                "description": "SMA 200",
                "type": "s",
                "noOfDays": 200,
                "color": "#C607BB",
                "isActive": false
            }, {
                "id": 5,
                "description": "Custom",
                "type": "e",
                "noOfDays": 0,
                "color": "#000000",
                "isActive": false
            }];
        }
    }
    function openMovingAverage() {
        $('#MovingAverage').modal({
            show: true,
            backdrop: false
        });
        $("#MovingAverageTitle").text("Moving Average");

        generateMovingAverage();

        var MovingAverageType = [{
            "type": 'e',
            "name": 'Exponential'
        }, {
            "type": 's',
            "name": 'Simple'
        }];

        var MovingAverageColor = [{
            "color": '#070BB0',
            "name": "Blue",
            "nameHTML": "<font color='#070BB0'>Blue</font>"
        }, {
            "color": '#0088BB',
            "name": "Light Blue",
            "nameHTML": "<font color='#0088BB'>Light Blue</font>"
        }, {
            "color": '#C607BB',
            "name": "Magenta",
            "nameHTML": "<font color='#C607BB'>Magenta</font>"
        }, {
            "color": '#C97232',
            "name": "Orange",
            "nameHTML": "<font color='#C97232'>Orange</font>"
        }, {
            "color": '#B1030B',
            "name": "Red",
            "nameHTML": "<font color='#B1030B'>Red</font>"
        }, {
            "color": '#1A8B24',
            "name": "Green",
            "nameHTML": "<font color='#1A8B24'>Green</font>"
        }, {
            "color": '#000000',
            "name": "Black",
            "nameHTML": "<font color='#000000'>Black</font>"
        }];

        MovingAverageGrid.dispose();
        MovingAverageGrid = new wijmo.grid.FlexGrid('#MovingAverageGrid');

        MovingAverageGrid.initialize({
            columns: [
                        {
                            "header": "Moving Average",
                            "binding": "description",
                            "width": "*"
                        },
                        {
                            "header": "Type",
                            "binding": "type",
                            "width": 120,
                            "dataMap": new wijmo.grid.DataMap(MovingAverageType, 'type', 'name')
                        },
                        {
                            "header": "Days",
                            "binding": "noOfDays",
                            "width": 60
                        },
                        {
                            "header": "Color",
                            "binding": "color",
                            "width": 90,
                            "dataMap": new wijmo.grid.DataMap(MovingAverageColor, 'color', 'name')
                        },
                        {
                            "header": "Active",
                            "binding": "isActive",
                            "width": 60,
                        }
            ],
            autoGenerateColumns: false,
            selectionMode: 'Row',
            itemsSource: MovingAverageData
        });

        //createColorEditor(MovingAverageGrid.columns.getColumn('color'));
    }
    function applyMovingAverage() {
        computeMovingAverage();
        plotMovingAverage();
        $('#MovingAverage').modal('hide');
    }
    function computeMovingAverage() {
        if (chartData.length > 252) {
            for (var m = 0; m < 5; m++) {
                if (MovingAverageData[m].isActive == true) {
                    if (MovingAverageData[m].type == "e") {
                        // Exponential Moving Average
                        var day = 1;
                        var noOfDays = MovingAverageData[m].noOfDays;
                        var ma_close = 0;
                        var ma = 0;
                        var ma_previous = 0;
                        for (var i = 252; i >= 0; i--) {
                            if (day < noOfDays) {
                                ma_close = ma_close + chartData[i].close;
                            } else if (day == noOfDays) {
                                ma_close = ma_close + chartData[i].close;
                                ma = ma_close / noOfDays;
                                ma_previous = ma;
                                switch (m) {
                                    case 0: chartData[i].ma1 = ma; break;
                                    case 1: chartData[i].ma2 = ma; break;
                                    case 2: chartData[i].ma3 = ma; break;
                                    case 3: chartData[i].ma4 = ma; break;
                                    case 4: chartData[i].ma5 = ma; break;
                                }
                            } else if (day > noOfDays) {
                                ma = (chartData[i].close * (2 / (noOfDays + 1)) + ma_previous * (1 - (2 / (noOfDays + 1))));
                                ma_previous = ma;
                                switch (m) {
                                    case 0: chartData[i].ma1 = ma; break;
                                    case 1: chartData[i].ma2 = ma; break;
                                    case 2: chartData[i].ma3 = ma; break;
                                    case 3: chartData[i].ma4 = ma; break;
                                    case 4: chartData[i].ma5 = ma; break;
                                }
                            }
                            day++;
                        }
                    }
                    else {
                        // Simple Moving Average
                        var day = 1;
                        var noOfDays = MovingAverageData[m].noOfDays;
                        var ma_close = 0;
                        var ma = 0;
                        var ma_previous = 0;
                        for (var i = 252; i >= 0; i--) {
                            if (day < noOfDays) {
                                ma_close = ma_close + chartData[i].close;
                            } else if (day == noOfDays) {
                                ma_close = ma_close + chartData[i].close;
                                ma = ma_close / noOfDays;
                                switch (m) {
                                    case 0: chartData[i].ma1 = ma; break;
                                    case 1: chartData[i].ma2 = ma; break;
                                    case 2: chartData[i].ma3 = ma; break;
                                    case 3: chartData[i].ma4 = ma; break;
                                    case 4: chartData[i].ma5 = ma; break;
                                }
                            } else if (day > noOfDays) {
                                ma_close = ma_close + chartData[i].close - chartData[i + noOfDays].close;
                                ma = ma_close / noOfDays;
                                switch (m) {
                                    case 0: chartData[i].ma1 = ma; break;
                                    case 1: chartData[i].ma2 = ma; break;
                                    case 2: chartData[i].ma3 = ma; break;
                                    case 3: chartData[i].ma4 = ma; break;
                                    case 4: chartData[i].ma5 = ma; break;
                                }
                            }
                            day++;
                        }
                    }
                }
            }
            // Modify the plot data
            for (i = 0; i < 252; i++) {
                if (i <= 125) {
                    plotData[i].ma1 = AmCharts.roundTo(chartData[125 - i]["ma1"], 2);
                    plotData[i].ma2 = AmCharts.roundTo(chartData[125 - i]["ma2"], 2);
                    plotData[i].ma3 = AmCharts.roundTo(chartData[125 - i]["ma3"], 2);
                    plotData[i].ma4 = AmCharts.roundTo(chartData[125 - i]["ma4"], 2);
                    plotData[i].ma5 = AmCharts.roundTo(chartData[125 - i]["ma5"], 2);
                }
            }
        }
    }
    function plotMovingAverage() {
        chart.validateData();
        for (var m = 0; m < 5; m++) {
            if (MovingAverageData[m].isActive == true) {
                graphMA[m].title = MovingAverageData[m].description;
                graphMA[m].lineColor = MovingAverageData[m].color;
                graphMA[m].visibleInLegend = true;
                stockPanel1.showGraph(graphMA[m]);
            } else {
                graphMA[m].visibleInLegend = false;
                stockPanel1.hideGraph(graphMA[m]);
            }
        }
    }

    // Earnings

    function openEarnings() {
        $("#EarningsTitle").text(dataSymbol + " Earnings Percentage (%)");
        $('#Earnings').modal({
            show: true,
            backdrop: false
        });

        $("#DateButtons").empty();
        for (var i = 0; i < earningDates.length; i++) {
            $("#DateButtons").append("<div class='col-lg-3'><button type='submit' class='btn btn-primary btn-block' onclick='createEarningChart(this)'>" + earningDates[i] + "</button></div>");
        }
        $("#earningChartdiv").empty();
    }
    function clearEarningChart() {
        $("#earningChartdiv").empty();
    }
    function createEarningChart(button) {
        var GreenColor = "#0FB203";
        var RedColor = "#A80008";

        var url = "";
        if (document.getElementById('ChronologicalOrder').checked == true) {
            url = '/api/StockEarningHistoryChronologically/' + dataSymbol + '/' + button.textContent;
        } else {
            url = '/api/StockEarningHistory/' + dataSymbol + '/' + button.textContent;
        }

        $.ajax({
            url: url,
            cache: false,
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            data: {},
            success: function (result) {
                if (result.length > 0) {

                    var earningDatesPlotted = [];
                    var y = 0;
                    for (var i = 0; i < result.length; i++) {
                        var value = earningPercentage(result[i].EarningDate, result[i].EarningTime);
                        earningDatesPlotted.push({
                            date: result[i].EarningDate + " " + result[i].EarningTime,
                            start: 0,
                            value: value,
                            color: value >= 0 ? GreenColor : RedColor
                        })
                        y++;
                        if(y>9) break;
                    }

                    var earningChart = new AmCharts.AmSerialChart();
                    earningChart.theme = "none";
                    earningChart.dataProvider = earningDatesPlotted;
                    earningChart.categoryField = "date";
                    earningChart.rotate = true;
                    earningChart.columnWidth = 1;
                    earningChart.categoryAxis = {
                        "gridPosition": "start",
                        "axisAlpha": 0,
                        "gridAlpha": 0.1,
                        "position": "left"
                    };
                    earningChart.valueAxes = [{
                        "unit": ":00",
                        "axisAlpha": 0,
                        "gridAlpha": 0.1
                    }];
                    earningChart.startDuration = 1;

                    var graphEarnings = new AmCharts.AmGraph();
                    graphEarnings.valueField = "value";
                    graphEarnings.type = "column";
                    graphEarnings.colorField = "color";
                    graphEarnings.fillAlphas = 0.8;
                    graphEarnings.lineAlpha = 0;
                    graphEarnings.openField = "start";
                    graphEarnings.labelText = "[[value]]";

                    earningChart.addGraph(graphEarnings);
                    earningChart.write('earningChartdiv');
                }
            }
        });
    }
    function earningPercentage(earningDate, earningTime) {
        var startPrice = 0;
        var endPrice = 0;
        var percentage = 0;
        if (earningTime == "After Market Close") {
            for (var i = 0; i < chartData.length; i++) {
                var chartDate = new Date(chartData[i]["date"]);
                if (parseDate(earningDate).equals(chartDate) == true) {
                    startPrice = chartData[i].close;
                    endPrice = chartData[i-1].close;
                    if (startPrice > 0) {
                        percentage = ((endPrice - startPrice) / startPrice) * 100;
                    } else {
                        percentage = 0;;
                    }
                    break;
                }
            }
        } else {
            for (var i = 0; i < chartData.length; i++) {
                var chartDate = new Date(chartData[i]["date"]);
                if (parseDate(earningDate).equals(chartDate) == true) {
                    startPrice = chartData[i+1].close;
                    endPrice = chartData[i].close;
                    if (startPrice > 0) {
                        percentage = ((endPrice - startPrice) / startPrice) * 100;
                    } else {
                        percentage = 0;;
                    }
                    break;
                }
            }
        }
        return AmCharts.roundTo(percentage,2);
    }
    function updateZacksEarningHistory() {
        if (confirm("Update earnings?") == true) {
            clearEarningChart();
            $.ajax({
                type: "GET",
                url: "/api/GetZacksEarningHistory/" + dataSymbol,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Success");
                    },
                    404: function () {
                        toastr.error("Not found");
                    },
                    400: function () {
                        toastr.error("Bad request");
                    }
                }
            });
        }
    }

    // Pre/Post Earnings

    function openPrePostEarnings() {
        $("#PrePostEarningsTitle").text(dataSymbol + " Pre/Post Earnings Percentage (%)");
        $('#PrePostEarnings').modal({
            show: true,
            backdrop: false
        });

        $("#PrePostDateButtons").empty();
        for (var i = 0; i < earningDates.length; i++) {
            $("#PrePostDateButtons").append("<div class='col-lg-3'><button type='submit' class='btn btn-primary btn-block' onclick='createPrePostEarningTable(this)'>" + earningDates[i] + "</button></div>");
        }
        $("#PrePostEarningsGrid").empty();
        $("#prePostEarningChartdiv").empty();
    }
    function createPrePostEarningTable(button) {
        $('.nav-tabs a[href="#PrePostEarningTableSection"]').tab('show');
        $.ajax({
            url: '/api/StockEarningHistory/' + dataSymbol + '/' + button.textContent,
            cache: false,
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            data: {},
            success: function (result) {
                if (result.length > 0) {

                    var EarningDates = new wijmo.collections.ObservableArray();
                    var y = 0;
                    for (var i = 0; i < result.length; i++) {
                        EarningDates.push({
                            date: "<font face='Arial Narrow' size=2>" + result[i].EarningDate + "</font>",
                            time: result[i].EarningTime,
                            dayB10: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, - 10, true),
                            dayB09: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, -9, true),
                            dayB08: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, -8, true),
                            dayB07: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, -7, true),
                            dayB06: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, -6, true),
                            dayB05: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, -5, true),
                            dayB04: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, -4, true),
                            dayB03: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, -3, true),
                            dayB02: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, -2, true),
                            dayB01: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, -1, true),
                            day0: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, 0, true),
                            dayA01: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, 1, true),
                            dayA02: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, 2, true),
                            dayA03: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, 3, true),
                            dayA04: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, 4, true),
                            dayA05: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, 5, true),
                            dayA06: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, 6, true),
                            dayA07: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, 7, true),
                            dayA08: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, 8, true),
                            dayA09: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, 9, true),
                            dayA10: prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, 10, true),
                        })
                        y++;
                        if (y > 9) break;
                    }

                    var Earnings = new wijmo.collections.CollectionView(EarningDates);

                    PrePostEarningsGrid.dispose();
                    PrePostEarningsGrid = new wijmo.grid.FlexGrid('#PrePostEarningsGrid');

                    PrePostEarningsGrid.initialize({
                        columns: [
                                    {
                                        "header": "Date",
                                        "binding": "date",
                                        "width": 80,
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "-10",
                                        "binding": "dayB10",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "-9",
                                        "binding": "dayB09",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "-8",
                                        "binding": "dayB08",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "-7",
                                        "binding": "dayB07",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "-6",
                                        "binding": "dayB06",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "-5",
                                        "binding": "dayB05",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "-4",
                                        "binding": "dayB04",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "-3",
                                        "binding": "dayB03",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "-2",
                                        "binding": "dayB02",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "-1",
                                        "binding": "dayB01",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "E",
                                        "binding": "day0",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "+1",
                                        "binding": "dayA01",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "+2",
                                        "binding": "dayA02",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "+3",
                                        "binding": "dayA03",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "+4",
                                        "binding": "dayA04",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "+5",
                                        "binding": "dayA05",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "+6",
                                        "binding": "dayA06",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "+7",
                                        "binding": "dayA07",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "+8",
                                        "binding": "dayA08",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "+9",
                                        "binding": "dayA09",
                                        "width": "11*",
                                        "isContentHtml": true
                                    },
                                    {
                                        "header": "+10",
                                        "binding": "dayA10",
                                        "width": "11*",
                                        "isContentHtml": true
                                    }
                        ],
                        autoGenerateColumns: false,
                        itemsSource: Earnings,
                        isReadOnly: true,
                        selectionMode: wijmo.grid.SelectionMode.Row
                    });

                    PrePostEarningsGrid.trackChanges = true;

                    Earnings.pageSize = 10;

                    createPrePostEarningChart(button, result);

                    createPrePostEarningDates(result);
                }
            }
        });
    }
    function createPrePostEarningChart(button, result) {
        var GreenColor = "#0FB203";
        var RedColor = "#A80008";
        var BlackColor = "#000000";

        if (result.length > 0) {

            var earningDatesPlotted = [];
            for (var x = -10; x < 11; x++) {
                var value = [];
                var color = [];

                for (var i = 0; i < 10; i++) value.push(0);
                for (var i = 0; i < 10; i++) color.push(GreenColor);

                var y = 0;
                for (var i = 0; i < result.length; i++) {
                    value[i] = prePostEarningPercentage(result[i].EarningDate, result[i].EarningTime, x, false);
                    color[i] = value[i] >= 0 ? GreenColor : RedColor;
                    y++;
                    if (y > 9) break;
                }

                earningDatesPlotted.push({
                    category: x,
                    start: 0,
                    value01: value[0], color01: color[0],
                    value02: value[1], color02: color[1],
                    value03: value[2], color03: color[2],
                    value04: value[3], color04: color[3],
                    value05: value[4], color05: color[4],
                    value06: value[5], color06: color[5],
                    value07: value[6], color07: color[6],
                    value08: value[7], color08: color[7],
                    value09: value[8], color09: color[8],
                    value10: value[9], color10: color[9]
                });
            }

            var prePostEarningChart = new AmCharts.AmSerialChart();
            prePostEarningChart.theme = "none";
            prePostEarningChart.dataProvider = earningDatesPlotted;
            prePostEarningChart.categoryField = "category";
            prePostEarningChart.valueAxes = [{
                "stackType":"regular"
            }];

            var graph01 = new AmCharts.AmGraph();
            graph01.openField = "start";
            graph01.valueField = "value01";
            graph01.colorField = "color01";
            graph01.type = "column";
            graph01.fillAlphas = 0.8;
            graph01.lineAlpha = 1;
            graph01.lineColorField = "color01";

            var graph02 = new AmCharts.AmGraph();
            graph02.openField = "start";
            graph02.valueField = "value02";
            graph02.colorField = "color02";
            graph02.type = "column";
            graph02.fillAlphas = 0.8;
            graph02.lineAlpha = 1;
            graph02.lineColorField = "color02";

            var graph03 = new AmCharts.AmGraph();
            graph03.openField = "start";
            graph03.valueField = "value03";
            graph03.colorField = "color03";
            graph03.type = "column";
            graph03.fillAlphas = 0.8;
            graph03.lineAlpha = 1;
            graph03.lineColorField = "color03";

            var graph04 = new AmCharts.AmGraph();
            graph04.openField = "start";
            graph04.valueField = "value04";
            graph04.colorField = "color04";
            graph04.type = "column";
            graph04.fillAlphas = 0.8;
            graph04.lineAlpha = 1;
            graph04.lineColorField = "color04";

            var graph05 = new AmCharts.AmGraph();
            graph05.openField = "start";
            graph05.valueField = "value05";
            graph05.colorField = "color05";
            graph05.type = "column";
            graph05.fillAlphas = 0.8;
            graph05.lineAlpha = 1;
            graph05.lineColorField = "color05";

            var graph06 = new AmCharts.AmGraph();
            graph06.openField = "start";
            graph06.valueField = "value06";
            graph06.colorField = "color06";
            graph06.type = "column";
            graph06.fillAlphas = 0.8;
            graph06.lineAlpha = 1;
            graph06.lineColorField = "color06";

            var graph07 = new AmCharts.AmGraph();
            graph07.openField = "start";
            graph07.valueField = "value07";
            graph07.colorField = "color07";
            graph07.type = "column";
            graph07.fillAlphas = 0.8;
            graph07.lineAlpha = 1;
            graph07.lineColorField = "color07";

            var graph08 = new AmCharts.AmGraph();
            graph08.openField = "start";
            graph08.valueField = "value08";
            graph08.colorField = "color08";
            graph08.type = "column";
            graph08.fillAlphas = 0.8;
            graph08.lineAlpha = 1;
            graph08.lineColorField = "color08";

            var graph09 = new AmCharts.AmGraph();
            graph09.openField = "start";
            graph09.valueField = "value09";
            graph09.colorField = "color09";
            graph09.type = "column";
            graph09.fillAlphas = 0.8;
            graph09.lineAlpha = 1;
            graph09.lineColorField = "color09";

            var graph10 = new AmCharts.AmGraph();
            graph10.openField = "start";
            graph10.valueField = "value10";
            graph10.colorField = "color10";
            graph10.type = "column";
            graph10.fillAlphas = 0.8;
            graph10.lineAlpha = 1;
            graph10.lineColorField = "color10";

            prePostEarningChart.addGraph(graph01);
            prePostEarningChart.addGraph(graph02);
            prePostEarningChart.addGraph(graph03);
            prePostEarningChart.addGraph(graph04);
            prePostEarningChart.addGraph(graph05);
            prePostEarningChart.addGraph(graph06);
            prePostEarningChart.addGraph(graph07);
            prePostEarningChart.addGraph(graph08);
            prePostEarningChart.addGraph(graph09);
            prePostEarningChart.addGraph(graph10);

            $('.nav-tabs a[href="#PrePostEarningGraphSection"]').tab('show');
            prePostEarningChart.write('prePostEarningChartdiv');
            $('.nav-tabs a[href="#PrePostEarningTableSection"]').tab('show');
        }
    }
    function createPrePostEarningDates(result) {
        $('#prePostEarningDates').empty();
        $('#prePostEarningCandleStickChartdiv').empty();
        if (result.length > 0) {
            var y = 0;
            for (var i = 0; i < result.length; i++) {
                $('#prePostEarningDates').append("<option value='" + result[i].EarningDate + "'>" + result[i].EarningDate + "</option>");
                y++;
                if (y > 9) break;
            }
        }
    }
    function createPrePostEarningCandleStick() {
        // Chart Data
        var earningDate = event.target.value;
        var earningCandleStickPlotted = [];
        for (var i = 0; i < chartData.length; i++) {
            var chartDate = new Date(chartData[i]["date"]);
            if (parseDate(earningDate).equals(chartDate) == true) {
                for (var x = -10; x < 11; x++) {
                    if (x > 0) {
                        earningCandleStickPlotted.push({
                            category: x,
                            open: chartData[i - Math.abs(x)].open,
                            high: chartData[i - Math.abs(x)].high,
                            low: chartData[i - Math.abs(x)].low,
                            close: chartData[i - Math.abs(x)].close
                        });
                    } else {
                        earningCandleStickPlotted.push({
                            category: x,
                            open: chartData[i + Math.abs(x)].open,
                            high: chartData[i + Math.abs(x)].high,
                            low: chartData[i + Math.abs(x)].low,
                            close: chartData[i + Math.abs(x)].close
                        });
                    }
                }
            }
        }
        // Chart
        var prePostEarningCandleStickChart = new AmCharts.AmSerialChart();
        prePostEarningCandleStickChart.theme = "none";
        prePostEarningCandleStickChart.dataProvider = earningCandleStickPlotted;
        prePostEarningCandleStickChart.categoryField = "category";

        var graph01 = new AmCharts.AmGraph();
        graph01.type = "candlestick";
        graph01.openField = "open";
        graph01.closeField = "close";
        graph01.highField = "high";
        graph01.lowField = "low";
        graph01.valueField = "close";
        graph01.lineColor = "#0FB203";
        graph01.fillColors = "#0FB203";
        graph01.negativeLineColor = "#A80008";
        graph01.negativeFillColors = "#A80008";
        graph01.fillAlphas = 1;
        graph01.useDataSetColors = false;
        graph01.showBalloon = true;
        graph01.proCandlesticks = false;

        prePostEarningCandleStickChart.addGraph(graph01);

        $('#prePostEarningCandleStickChartdiv').empty();
        prePostEarningCandleStickChart.write('prePostEarningCandleStickChartdiv');
    }
    function prePostEarningPercentage(earningDate, earningTime, interval, formated) {
        var GreenColor = "#0FB203";
        var RedColor = "#A80008";

        var startPrice = 0;
        var endPrice = 0;
        var percentage = 0;

        var returnPercentage = "";

        for (var i = 0; i < chartData.length; i++) {
            var chartDate = new Date(chartData[i]["date"]);
            if (parseDate(earningDate).equals(chartDate) == true) {
                if (interval > 0) {
                    if (i - 1 >= 0) {
                        startPrice = chartData[i - 1].close;
                    } else {
                        startPrice = 0;
                    }
                    if((i - (Math.abs(interval) + 1)) >= 0) {
                        endPrice = chartData[i - (Math.abs(interval) + 1)].close;
                    } else {
                        endPrice = 0;
                    }
                } else if (interval == 0) {
                    if (earningTime == "After Market Close") {
                        startPrice = chartData[i].close;
                        if (i - 1 >= 0) {
                            endPrice = chartData[i - 1].close;
                        } else {
                            endPrice = 0;
                        }
                    } else {
                        startPrice = chartData[i + 1].close;
                        endPrice = chartData[i].close;
                    }
                } else {
                    startPrice = chartData[i + 11].close;
                    endPrice = chartData[i + Math.abs(interval)].close;
                }

                if (startPrice > 0 && endPrice > 0) {
                    percentage = ((endPrice - startPrice) / startPrice) * 100;
                } else {
                    percentage = 0;;
                }
                break;
            }
        }

        if (formated == true) {
            if (percentage < 0) {
                returnPercentage = "<font face='Arial Narrow' size=2 color='red'>" + AmCharts.roundTo(percentage, 2).toString() + "</font>";
            } else {
                returnPercentage = "<font face='Arial Narrow' size=2 color='green'>" + AmCharts.roundTo(percentage, 2).toString() + "</font>";
            }
        } else {
            returnPercentage = AmCharts.roundTo(percentage, 2);
        }

        return returnPercentage;
    }

    // Stock Chart

    function getSymbol() {
        var symbol = $('#searchSymbol').val().toUpperCase();

        symbol = symbol.replace(".", ",");

        if (document.getElementById("Exchange").value == "TSX") {
            document.getElementById("searchSymbol").value = symbol;
            symbol = "TSX-" + symbol;
        } else if (document.getElementById("Exchange").value == "PSE") {
            document.getElementById("searchSymbol").value = symbol;
            symbol = "PSE-" + symbol;
        } else {
            document.getElementById("searchSymbol").value = symbol;
        }

        if (symbol != "") {
            chartSymbol = symbol;
            getEarningsSchedule(symbol);
            getData(symbol);
            userCheck();
        }
    }
    function getData(symbol) {
        $('#loading').modal({
            show: true,
            backdrop: false
        });
        $.ajax({
            url: '/api/StockPrice/' + symbol,
            cache: false,
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            data: {},
            success: function (priceData) {
                $('#loading').modal('hide');
                if (priceData.StockPrices.length > 0) {
                    dataSymbol = priceData.Symbol;
                    dataSymbolDescription = priceData.SymbolDescription;
                    data = priceData.StockPrices;

                    document.getElementById("Exchange").value = priceData.Exchange;

                    $('#chartdiv').empty();

                    createStockChart(symbol, data);
                } else {
                    toastr.error("Please retry.  Symbol not found.");
                }
            }
        }).fail(
                function (xhr, textStatus, err) {
                    //pleaseWaitDiv.modal('hide');
                    $('#loading').modal('hide');
                    toastr.error(err);
                }
        );
    }
    function createStockChart(symbol, stockPrice) {
        document.title = chartSymbol + ' - Magenta Trader'

        chart = new AmCharts.AmStockChart();

        chart.pathToImages = "/amcharts/amcharts/images/";
        chart.hideStockEvents();

        // Day number (0-251) in a year: mid year - 125
        var dayIndex = 0;

        // Chart data
        while (chartData.length > 0) chartData.pop();

        // Plot data
        while (plotData.length > 0) plotData.pop();

        // First Closing Prices
        while (firstClosingPrice.length > 0) firstClosingPrice.pop();

        // Hidden season yearly data
        while (scannerYearGraph.length > 0) scannerYearGraph.pop();

        // Hidden moving average data
        while (graphMA.length > 0) graphMA.pop();

        // Hidden plotted season yearly data
        while (plottedYearGraphs.length > 0) plottedYearGraphs.pop();

        // 10-Years Seasonality data (average)
        while (seasonTenYearData.length > 0) seasonTenYearData.pop();
        for (var i = 0; i < NumberOfDaysInYear; i++) seasonTenYearData.push(0);

        // 5-Years Seasonality data (average)
        while (seasonFiveYearData.length > 0) seasonFiveYearData.pop();
        for (var i = 0; i < NumberOfDaysInYear; i++) seasonFiveYearData.push(0);

        // Yearly Seasonality data
        while (seasonYearData.length > 0) seasonYearData.pop();
        for (var i = 0; i < seasonYearNo; i++) {
            seasonYearData[i] = [];
            for (var d = 0; d < NumberOfDaysInYear; d++) seasonYearData[i].push(0);
        }

        // Yearly closing price data
        while (closeYearData.length > 0) closeYearData.pop();
        for (var i = 0; i < seasonYearNo; i++) {
            closeYearData[i] = [];
            for (var d = 0; d < NumberOfDaysInYear; d++) closeYearData[i].push(0);
        }

        // Fill the Chart Data and First Closing Price each year
        var symbolDescription = dataSymbolDescription;

        dayIndex = 126;
        var countYear = 0;

        for (var i = 0; i < stockPrice.length; i++) {
            var date = new Date();
            var open = 0;
            var high = 0;
            var low = 0;
            var close = 0;
            var volume = 0;

            for (var prop in stockPrice[i]) {
                if (prop == "QuoteDate") date = parseDate(stockPrice[i][prop]);
                if (prop == "OpenPrice") open = stockPrice[i][prop];
                if (prop == "HighPrice") high = stockPrice[i][prop];
                if (prop == "LowPrice") low = stockPrice[i][prop];
                if (prop == "ClosePrice") close = stockPrice[i][prop];
                if (prop == "Volume") volume = stockPrice[i][prop];
            }

            chartData.push({
                date: date,
                open: open,
                high: high,
                low: low,
                close: close,
                season: 0,
                season5Year: 0,
                seasonCount: dayIndex,
                volume: AmCharts.roundTo(volume / 1000000, 2),
                ema1: 0,
                ema2: 0,
                macd: 0,
                macdSignal: 0,
                ma1: 0,
                ma2: 0,
                ma3: 0,
                ma4: 0,
                ma5: 0
            });

            dayIndex--;
            if (dayIndex == 0) {
                dayIndex = 252;

                if (countYear > 0) {
                    firstClosingPrice.push(close);
                }
                countYear++;
            } else {
                if (i == stockPrice.length - 1) {
                    if (countYear > 0) {
                        firstClosingPrice.push(close);
                    }
                }
            }
        }

        // MACD Computation
        var macd_index = 0;

        var ema1_closePrices = 0;
        var ema1_previous = 0;
        var ema1 = 0;

        var ema2_closePrices = 0;
        var ema2_previous = 0;
        var ema2 = 0;

        var macd_values = 0;
        var macd_sginal = 0;
        var macd_sginal_previous = 0;

        for (var i = chartData.length - 1; i >= 0; i--) {
            if (macd_index < 11) {
                ema1_closePrices = ema1_closePrices + chartData[i].close;
            } else if(macd_index == 11) {
                ema1 = ema1_closePrices / 12;
                ema1_previous = ema1;
                chartData[i].ema1 = ema1;
            } else if (macd_index > 11) {
                ema1 = (chartData[i].close * (2 / (12 + 1)) + ema1_previous * (1 - (2 / (12 + 1))));
                ema1_previous = ema1;
                chartData[i].ema1 = ema1;
            }

            if (macd_index < 25) {
                ema2_closePrices = ema2_closePrices + chartData[i].close;
            } else if (macd_index == 25) {
                ema2 = ema2_closePrices / 26;
                ema2_previous = ema2;
                chartData[i].ema2 = ema2;
                chartData[i].macd = chartData[i].ema1 - ema2;
            } else if (macd_index > 25) {
                ema2 = (chartData[i].close * (2 / (26 + 1)) + ema2_previous * (1 - (2 / (26 + 1))));
                ema2_previous = ema2;
                chartData[i].ema2 = ema2;
                chartData[i].macd = chartData[i].ema1 - ema2;
            }

            if (macd_index < 34) {
                macd_values = macd_values + chartData[i].macd;
            } else if (macd_index == 34) {
                macd_sginal = macd_values / 9;
                macd_sginal_previous = macd_sginal;
                chartData[i].macdSignal = macd_sginal;
            } else if (macd_index > 34) {
                macd_sginal = (chartData[i].macd * (2 / (9 + 1)) + macd_sginal * (1 - (2 / (9 + 1))));
                macd_sginal_previous = macd_sginal;
                chartData[i].macdSignal = macd_sginal;
            }

            macd_index++;
        }

        // Compute for the yearly data, e.g., closing price, seasonality, etc.
        var season = 0;
        var season5Year = 0;

        countYear = 0;
        dayIndex = 251;
        for (var i = 126; i < chartData.length; i++) {
            if (firstClosingPrice[countYear] > 0) {
                season = ((parseFloat(chartData[i]["close"]) - firstClosingPrice[countYear]) / firstClosingPrice[countYear]) * 100;
            } else {
                season = 0;
            }

            if (countYear < 5) season5Year = season;

            chartData[i]["season"] = season;
            chartData[i]["season5Year"] = season5Year;

            seasonYearData[countYear][dayIndex] = season;
            closeYearData[countYear][dayIndex] = parseFloat(chartData[i]["close"]);

            dayIndex--;
            if (dayIndex == -1) {
                dayIndex = 251;
                countYear++;
            }
        }

        for (i = 0; i < 252; i++) {
            season = 0;
            season5Year = 0;
            for (y = 0; y < 10; y++) {
                season = season + seasonYearData[y][i];
                if (y < 5) season5Year = season5Year + seasonYearData[y][i];
            }
            seasonTenYearData[i] = season;
            seasonFiveYearData[i] = season5Year;
        }

        // Fill the Plot Data
        var futureDate = new Date((new Date(chartData[0]["date"])).add(1).days());
        var earningValue = parseFloat(chartData[0]["close"]) * .95; // The earning value is set to the latest price.

        for (i = 0; i < 252; i++) {
            var earning = 0;
            if (i > 125) {
                if (new Date(futureDate).getDay() == 0 || new Date(futureDate).getDay() == 6) {
                    i--;
                } else {
                    for (e = 0; e < earningDates.length; e++) {
                        var categoryDate = new Date(futureDate);
                        var earningDate = new Date(parseDate(earningDates[e]));
                        if (categoryDate.equals(earningDate) == true) {
                            earning = earningValue;
                        }
                    }
                    plotData.push({
                        date: new Date(futureDate),
                        season: (seasonTenYearData[i] / 10).toFixed(2),
                        season5Year: (seasonFiveYearData[i] / 5).toFixed(2),
                        seasonCount: i + 1,
                        seasonY0: seasonYearData[0][i].toFixed(2),
                        seasonY1: seasonYearData[1][i].toFixed(2),
                        seasonY2: seasonYearData[2][i].toFixed(2),
                        seasonY3: seasonYearData[3][i].toFixed(2),
                        seasonY4: seasonYearData[4][i].toFixed(2),
                        seasonY5: seasonYearData[5][i].toFixed(2),
                        seasonY6: seasonYearData[6][i].toFixed(2),
                        seasonY7: seasonYearData[7][i].toFixed(2),
                        seasonY8: seasonYearData[8][i].toFixed(2),
                        seasonY9: seasonYearData[9][i].toFixed(2),
                        earnings: earning == 0 ? 'NaN' : earning,
                        s1_0: 'NaN', s1_1: 'NaN', s1_2: 'NaN', s1_3: 'NaN', s1_4: 'NaN',
                        s1_5: 'NaN', s1_6: 'NaN', s1_7: 'NaN', s1_8: 'NaN', s1_9: 'NaN',
                        s2_0: 'NaN', s2_1: 'NaN', s2_2: 'NaN', s2_3: 'NaN', s2_4: 'NaN',
                        s2_5: 'NaN', s2_6: 'NaN', s2_7: 'NaN', s2_8: 'NaN', s2_9: 'NaN',
                        s3_0: 'NaN', s3_1: 'NaN', s3_2: 'NaN', s3_3: 'NaN', s3_4: 'NaN',
                        s3_5: 'NaN', s3_6: 'NaN', s3_7: 'NaN', s3_8: 'NaN', s3_9: 'NaN'
                    });
                }
                futureDate = futureDate.add(1).day();
            } else {
                for (e = 0; e < earningDates.length; e++) {
                    var categoryDate = new Date(chartData[125 - i]["date"]);
                    var earningDate = new Date(parseDate(earningDates[e]));
                    if (categoryDate.equals(earningDate) == true) {
                        earning = earningValue;
                    }
                }
                plotData.push({
                    date: chartData[125 - i]["date"],
                    open: chartData[125 - i]["open"],
                    high: chartData[125 - i]["high"],
                    low: chartData[125 - i]["low"],
                    close: chartData[125 - i]["close"],
                    season: (seasonTenYearData[i] / 10).toFixed(2),
                    season5Year: (seasonFiveYearData[i] / 5).toFixed(2),
                    seasonCount: i+1,
                    seasonY0: seasonYearData[0][i].toFixed(2),
                    seasonY1: seasonYearData[1][i].toFixed(2),
                    seasonY2: seasonYearData[2][i].toFixed(2),
                    seasonY3: seasonYearData[3][i].toFixed(2),
                    seasonY4: seasonYearData[4][i].toFixed(2),
                    seasonY5: seasonYearData[5][i].toFixed(2),
                    seasonY6: seasonYearData[6][i].toFixed(2),
                    seasonY7: seasonYearData[7][i].toFixed(2),
                    seasonY8: seasonYearData[8][i].toFixed(2),
                    seasonY9: seasonYearData[9][i].toFixed(2),
                    earnings: earning == 0 ? 'NaN' : earning,
                    volume: chartData[125 - i]["volume"],
                    volumeDescription: AmCharts.roundTo(chartData[125 - i]["volume"]/1000000,2).toString() + "M",
                    macd: AmCharts.roundTo(chartData[125 - i]["macd"], 2),
                    macdSignal: AmCharts.roundTo(chartData[125 - i]["macdSignal"], 2),
                    ma1: 0,
                    ma2: 0,
                    ma3: 0,
                    ma4: 0,
                    ma5: 0,
                    s1_0: 'NaN', s1_1: 'NaN', s1_2: 'NaN', s1_3: 'NaN', s1_4: 'NaN',
                    s1_5: 'NaN', s1_6: 'NaN', s1_7: 'NaN', s1_8: 'NaN', s1_9: 'NaN',
                    s2_0: 'NaN', s2_1: 'NaN', s2_2: 'NaN', s2_3: 'NaN', s2_4: 'NaN',
                    s2_5: 'NaN', s2_6: 'NaN', s2_7: 'NaN', s2_8: 'NaN', s2_9: 'NaN',
                    s3_0: 'NaN', s3_1: 'NaN', s3_2: 'NaN', s3_3: 'NaN', s3_4: 'NaN',
                    s3_5: 'NaN', s3_6: 'NaN', s3_7: 'NaN', s3_8: 'NaN', s3_9: 'NaN'
                });
            }
        }

        // Compute moving average

        generateMovingAverage();
        computeMovingAverage();

        // AMChart legend


        // AMChart events

        chartEvent1 = new AmCharts.StockEvent();
        chartEvent1.date = plotData[125]["date"];
        chartEvent1.type =  "sign";
        chartEvent1.backgroundColor = "#7f8da9";
        chartEvent1.graph = "graphSeason";
        chartEvent1.text =  "T";
        chartEvent1.description =  "Target Price";

        // AMChart dataset

        var dataSet = new AmCharts.DataSet();
        dataSet.title = symbol;
        dataSet.color = "#7f8da9";
        dataSet.fieldMappings = [{
            fromField: "open",
            toField: "open"
        }, {
            fromField: "high",
            toField: "high"
        }, {
            fromField: "low",
            toField: "low"
        }, {
            fromField: "close",
            toField: "close"
        }, {
            fromField: "season",
            toField: "season"
        }, {
            fromField: "season5Year",
            toField: "season5Year"
        }, {
            fromField: "seasonY0",
            toField: "seasonY0"
        }, {
            fromField: "seasonY1",
            toField: "seasonY1"
        }, {
            fromField: "seasonY2",
            toField: "seasonY2"
        }, {
            fromField: "seasonY3",
            toField: "seasonY3"
        }, {
            fromField: "seasonY4",
            toField: "seasonY4"
        }, {
            fromField: "seasonY5",
            toField: "seasonY5"
        }, {
            fromField: "seasonY6",
            toField: "seasonY6"
        }, {
            fromField: "seasonY7",
            toField: "seasonY7"
        }, {
            fromField: "seasonY8",
            toField: "seasonY8"
        }, {
            fromField: "seasonY9",
            toField: "seasonY9"
        }, {
            fromField: "volume",
            toField: "volume"
        }, {
            fromField: "earnings",
            toField: "earnings"
        }, {
            fromField: "macd",
            toField: "macd"
        }, {
            fromField: "macdSignal",
            toField: "macdSignal"
        }, {
            fromField: "ma1",
            toField: "ma1"
        }, {
            fromField: "ma2",
            toField: "ma2"
        }, {
            fromField: "ma3",
            toField: "ma3"
        }, {
            fromField: "ma4",
            toField: "ma4"
        }, {
            fromField: "ma5",
            toField: "ma5"
        }, { fromField: "s1_0", toField: "s1_0" }, { fromField: "s1_1", toField: "s1_1" }, { fromField: "s1_2", toField: "s1_2" },
           { fromField: "s1_3", toField: "s1_3" }, { fromField: "s1_4", toField: "s1_4" }, { fromField: "s1_5", toField: "s1_5" },
           { fromField: "s1_6", toField: "s1_6" }, { fromField: "s1_7", toField: "s1_7" }, { fromField: "s1_8", toField: "s1_8" },
           { fromField: "s1_9", toField: "s1_9" },
           { fromField: "s2_0", toField: "s2_0" }, { fromField: "s2_1", toField: "s2_1" }, { fromField: "s2_2", toField: "s2_2" },
           { fromField: "s2_3", toField: "s2_3" }, { fromField: "s2_4", toField: "s2_4" }, { fromField: "s2_5", toField: "s2_5" },
           { fromField: "s2_6", toField: "s2_6" }, { fromField: "s2_7", toField: "s2_7" }, { fromField: "s2_8", toField: "s2_8" },
           { fromField: "s2_9", toField: "s2_9" },
           { fromField: "s3_0", toField: "s3_0" }, { fromField: "s3_1", toField: "s3_1" }, { fromField: "s3_2", toField: "s3_2" },
           { fromField: "s3_3", toField: "s3_3" }, { fromField: "s3_4", toField: "s3_4" }, { fromField: "s3_5", toField: "s3_5" },
           { fromField: "s3_6", toField: "s3_6" }, { fromField: "s3_7", toField: "s3_7" }, { fromField: "s3_8", toField: "s3_8" },
           { fromField: "s3_9", toField: "s3_9" }
        ];
        dataSet.dataProvider = plotData;
        dataSet.categoryField = "date";
        dataSet.stockEvents = [chartEvent1];

        chart.dataSets = [dataSet];

        // AMChart Panels

        stockPanel1 = new AmCharts.StockPanel();
        stockPanel1.showCategoryAxis = false;
        stockPanel1.title = symbolDescription;
        stockPanel1.percentHeight = 70;
        stockPanel1.recalculateToPercents = "never";

        stockPanel2 = new AmCharts.StockPanel();
        stockPanel2.allowTurningOff = true;
        stockPanel2.percentHeight = 30;

        // Current date (middle date) guide

        var guideCurrentDate = new AmCharts.Guide();
        guideCurrentDate.date = plotData[125]["date"];
        guideCurrentDate.lineColor = RedColor;
        guideCurrentDate.lineAlpha = 1;
        guideCurrentDate.dashLength = 2;
        guideCurrentDate.inside = true;
        guideCurrentDate.labelRotation = 90;
        guideCurrentDate.label = "";
        stockPanel1.categoryAxis.addGuide(guideCurrentDate);

        // Calibrated Price Axis

        var minValue = 0;
        var maxValue = 0;
        var upDistance = 0;
        var downDistance = 0;
        var addInterval = 0;

        var valueAxisPrice = new AmCharts.ValueAxis();
        var valueAxisStrikePrice = new AmCharts.ValueAxis();
        for (var i = 0; i < NumberOfDaysInYear / 2; i++) {
            if (i == 0) {
                minValue = parseFloat(plotData[i]["close"]);
                maxValue = parseFloat(plotData[i]["close"]);
            } else {
                if (parseFloat(plotData[i]["close"]) < minValue) minValue = parseFloat(plotData[i]["close"]);
                if (parseFloat(plotData[i]["close"]) > maxValue) maxValue = parseFloat(plotData[i]["close"]);
            }
        }
        upDistance = maxValue - parseFloat(plotData[125]["close"]);
        downDistance = parseFloat(plotData[125]["close"]) - minValue;
        addInterval = 0;
        if (upDistance > downDistance) {
            valueAxisPrice.maximum = maxValue;
            valueAxisPrice.minimum = minValue - (upDistance - downDistance);
            valueAxisStrikePrice.maximum = maxValue;
            valueAxisStrikePrice.minimum = minValue - (upDistance - downDistance);
        } else if (upDistance < downDistance) {
            valueAxisPrice.maximum = maxValue + (downDistance - upDistance);
            valueAxisPrice.minimum = minValue;
            valueAxisStrikePrice.maximum = maxValue + (downDistance - upDistance);
            valueAxisStrikePrice.minimum = minValue;
        }
        valueAxisPrice.color = BlueColor;
        valueAxisStrikePrice.position = "right";
        valueAxisStrikePrice.labelsEnabled = false;
        stockPanel1.addValueAxis(valueAxisPrice);
        stockPanel1.addValueAxis(valueAxisStrikePrice);

        // Calibrated Seasonality 10 Year Axis

        var valueAxisTenYearSeasonality = new AmCharts.ValueAxis();
        for (var i = 0; i < NumberOfDaysInYear; i++) {
            if (i == 0) {
                minValue = parseFloat(plotData[i]["season"]);
                maxValue = parseFloat(plotData[i]["season"]);
            } else {
                if (parseFloat(plotData[i]["season"]) < minValue) minValue = parseFloat(plotData[i]["season"]);
                if (parseFloat(plotData[i]["season"]) > maxValue) maxValue = parseFloat(plotData[i]["season"]);
            }
        }
        upDistance = maxValue - parseFloat(plotData[125]["season"]);
        downDistance = parseFloat(plotData[125]["season"]) - minValue;
        addInterval = 0;
        if (upDistance > downDistance) {
            valueAxisTenYearSeasonality.maximum = maxValue;
            valueAxisTenYearSeasonality.minimum = minValue - (upDistance - downDistance);
        } else if (upDistance < downDistance) {
            valueAxisTenYearSeasonality.maximum = maxValue + (downDistance - upDistance);
            valueAxisTenYearSeasonality.minimum = minValue;
        }
        valueAxisTenYearSeasonality.labelsEnabled = false;
        valueAxisTenYearSeasonality.position = "right";
        valueAxisTenYearSeasonality.gridThickness = 0;
        valueAxisTenYearSeasonality.axisThickness = 0;
        stockPanel1.addValueAxis(valueAxisTenYearSeasonality);

        // Calibrated Seasonality 5 Year Axis

        var valueAxisFiveYearSeasonality = new AmCharts.ValueAxis();
        for (var i = 0; i < NumberOfDaysInYear; i++) {
            if (i == 0) {
                minValue = parseFloat(plotData[i]["season5Year"]);
                maxValue = parseFloat(plotData[i]["season5Year"]);
            } else {
                if (parseFloat(plotData[i]["season5Year"]) < minValue) minValue = parseFloat(plotData[i]["season5Year"]);
                if (parseFloat(plotData[i]["season5Year"]) > maxValue) maxValue = parseFloat(plotData[i]["season5Year"]);
            }
        }
        upDistance = maxValue - parseFloat(plotData[125]["season5Year"]);
        downDistance = parseFloat(plotData[125]["season5Year"]) - minValue;
        addInterval = 0;
        if (upDistance > downDistance) {
            valueAxisFiveYearSeasonality.maximum = maxValue;
            valueAxisFiveYearSeasonality.minimum = minValue - (upDistance - downDistance);
        } else if (upDistance < downDistance) {
            valueAxisFiveYearSeasonality.maximum = maxValue + (downDistance - upDistance);
            valueAxisFiveYearSeasonality.minimum = minValue;
        }
        valueAxisFiveYearSeasonality.labelsEnabled = false;
        valueAxisFiveYearSeasonality.position = "right";
        valueAxisFiveYearSeasonality.gridThickness = 0;
        valueAxisFiveYearSeasonality.axisThickness = 0;
        stockPanel1.addValueAxis(valueAxisFiveYearSeasonality);

        var valueAxisVolume = new AmCharts.ValueAxis();
        valueAxisVolume.labelsEnabled = false;
        valueAxisVolume.position = "right";
        valueAxisVolume.gridThickness = 0;
        valueAxisVolume.axisThickness = 0;
        stockPanel1.addValueAxis(valueAxisVolume);

        var valueAxisMACD = new AmCharts.ValueAxis();
        valueAxisMACD.labelsEnabled = false;
        valueAxisMACD.position = "right";
        valueAxisMACD.gridThickness = 0;
        valueAxisMACD.axisThickness = 0;
        stockPanel2.addValueAxis(valueAxisMACD);

        // AMChart Visible Graphs, Price, 10-Year Seasonality, 5-Year Seasonality

        var graphPrice = new AmCharts.StockGraph();
        graphPrice.id = "graphPrice";
        graphPrice.title = "Price";
        graphPrice.type = "candlestick";
        graphPrice.openField = "open";
        graphPrice.closeField = "close";
        graphPrice.highField = "high";
        graphPrice.lowField = "low";
        graphPrice.valueField = "close";
        graphPrice.lineColor = "#0FB203";
        graphPrice.fillColors = "#0FB203";
        graphPrice.negativeLineColor = "#A80008";
        graphPrice.negativeFillColors = "#A80008";
        graphPrice.fillAlphas = 1;
        graphPrice.useDataSetColors = false;
        graphPrice.showBalloon = true;
        graphPrice.proCandlesticks = false;
        graphPrice.valueAxis = valueAxisPrice;

        var graphEarnings = new AmCharts.AmGraph();
        graphEarnings.id = "graphEarnings";
        graphEarnings.valueField = 'earnings';
        graphEarnings.valueAxis = valueAxisStrikePrice
        graphEarnings.type = 'line';
        graphEarnings.fillAlphas = 0;
        graphEarnings.balloonText = 'Earnings'
        graphEarnings.bullet =  'round';
        graphEarnings.bulletSize = 10;
        graphEarnings.bulletBorderAlpha = 1;
        graphEarnings.lineThickness = 0;
        graphEarnings.visibleInLegend = false;

        var graphSeason = new AmCharts.StockGraph();
        graphSeason.id = "graphSeason";
        graphSeason.title = "10-Years Seasonality";
        graphSeason.valueField = "season";
        graphSeason.useDataSetColors = false;
        graphSeason.color = GoldColor;
        graphSeason.lineColor = GoldColor;
        graphSeason.type = "line";
        graphSeason.lineThickness = 2;
        graphSeason.showBalloon = false;
        graphSeason.valueAxis = valueAxisTenYearSeasonality;

        var graphSeason5Year = new AmCharts.StockGraph();
        graphSeason5Year.id = "graphSeason5Year";
        graphSeason5Year.title = "5-Years Seasonality";
        graphSeason5Year.valueField = "season5Year";
        graphSeason5Year.useDataSetColors = false;
        graphSeason5Year.color = DarkGreenColor;
        graphSeason5Year.lineColor = DarkGreenColor;
        graphSeason5Year.type = "line";
        graphSeason5Year.lineThickness = 1;
        graphSeason5Year.showBalloon = false;
        graphSeason5Year.valueAxis = valueAxisFiveYearSeasonality;

        var graphVolume = new AmCharts.StockGraph();
        graphVolume.id = "graphVolume";
        graphVolume.title = "Volume (M)";
        graphVolume.valueField = "volume";
        graphVolume.type = "column";
        graphVolume.useDataSetColors = false;
        graphVolume.color = GrayColor;
        graphVolume.lineColor = GrayColor;
        graphVolume.showBalloon = false;
        graphVolume.lineAlpha = 0;
        graphVolume.fillAlphas = 0.3;
        graphVolume.valueAxis = valueAxisVolume;

        var graphMACD = new AmCharts.StockGraph();
        graphMACD.id = "graphMACD";
        graphMACD.title = "MACD";
        graphMACD.valueField = "macd";
        graphMACD.useDataSetColors = false;
        graphMACD.color = BlueColor;
        graphMACD.lineColor = BlueColor;
        graphMACD.type = "line";
        graphMACD.lineThickness = 1;
        graphMACD.showBalloon = false;
        graphMACD.valueAxis = valueAxisMACD;

        var graphMACDSignal = new AmCharts.StockGraph();
        graphMACDSignal.id = "graphMACDSignal";
        graphMACDSignal.title = "Signal";
        graphMACDSignal.valueField = "macdSignal";
        graphMACDSignal.useDataSetColors = false;
        graphMACDSignal.color = RedColor;
        graphMACDSignal.lineColor = RedColor;
        graphMACDSignal.type = "line";
        graphMACDSignal.lineThickness = 1;
        graphMACDSignal.showBalloon = false;
        graphMACDSignal.valueAxis = valueAxisMACD;

        // Moving Average

        for (var m = 0; m < 5; m++) {
            graphMA[m] = new AmCharts.StockGraph();
            graphMA[m].id = "graphMA" + (m+1).toString();
            graphMA[m].valueField = "ma" + (m + 1).toString();
            graphMA[m].title = MovingAverageData[m].description;
            graphMA[m].useDataSetColors = false;
            graphMA[m].type = "line";
            graphMA[m].lineThickness = 1;
            graphMA[m].showBalloon = false;
            graphMA[m].lineColor = MovingAverageData[m].color;
            graphMA[m].valueAxis = valueAxisPrice;
            stockPanel1.addStockGraph(graphMA[m]);

            if (MovingAverageData[m].isActive == true) {
                graphMA[m].visibleInLegend = true;
                stockPanel1.showGraph(graphMA[m]);
            } else {
                graphMA[m].visibleInLegend = false;
                stockPanel1.hideGraph(graphMA[m]);
            }
        }

        // AMChart Invisible Graphs, Yearly Seasonality

        var valueAxisYearSeasonality = [];
        for (var y = 0; y < 10; y++) {
            valueAxisYearSeasonality[y] = new AmCharts.ValueAxis();
            for (var i = 0; i < NumberOfDaysInYear; i++) {
                if (i == 0) {
                    minValue = parseFloat(plotData[i]["seasonY" + y]);
                    maxValue = parseFloat(plotData[i]["seasonY" + y]);
                } else {
                    if (parseFloat(plotData[i]["seasonY" + y]) < minValue) minValue = parseFloat(plotData[i]["seasonY" + y]);
                    if (parseFloat(plotData[i]["seasonY" + y]) > maxValue) maxValue = parseFloat(plotData[i]["seasonY" + y]);
                }
            }
            upDistance = maxValue - parseFloat(plotData[125]["seasonY" + y]);
            downDistance = parseFloat(plotData[125]["seasonY" + y]) - minValue;
            addInterval = 0;
            if (upDistance > downDistance) {
                valueAxisYearSeasonality[y].maximum = maxValue;
                valueAxisYearSeasonality[y].minimum = minValue - (upDistance - downDistance);
            } else if (upDistance < downDistance) {
                valueAxisYearSeasonality[y].maximum = maxValue + (downDistance - upDistance);
                valueAxisYearSeasonality[y].minimum = minValue;
            }
            valueAxisYearSeasonality[y].labelsEnabled = false;
            valueAxisYearSeasonality[y].position = "right";
            valueAxisYearSeasonality[y].gridThickness = 0;
            valueAxisYearSeasonality[y].axisThickness = 0;
            stockPanel1.addValueAxis(valueAxisYearSeasonality[y]);

            scannerYearGraph[y] = new AmCharts.StockGraph();
            scannerYearGraph[y].valueField = "seasonY" + y;
            scannerYearGraph[y].useDataSetColors = false;
            scannerYearGraph[y].visibleInLegend = false;
            scannerYearGraph[y].type = "line";
            scannerYearGraph[y].lineThickness = 1;
            scannerYearGraph[y].lineColor = "#9E9E9E";
            scannerYearGraph[y].showBalloon = false;
            scannerYearGraph[y].valueAxis = valueAxisYearSeasonality[y];
            stockPanel1.addStockGraph(scannerYearGraph[y]);
            stockPanel1.hideGraph(scannerYearGraph[y]);
        }

        // Plot the graphs in the panels
        stockPanel1.addStockGraph(graphVolume);
        stockPanel1.addStockGraph(graphPrice);
        stockPanel1.addStockGraph(graphEarnings);
        stockPanel1.addStockGraph(graphSeason);
        stockPanel1.addStockGraph(graphSeason5Year);

        var stockLegend1 = new AmCharts.StockLegend();
        stockLegend1.color = BlueColor;

        stockPanel1.stockLegend = stockLegend1;

        //stockPanel1.addStockGraph(graphVolume);
        stockPanel2.addStockGraph(graphMACD);
        stockPanel2.addStockGraph(graphMACDSignal);

        var stockLegend2 = new AmCharts.StockLegend();
        stockLegend2.color = BlueColor;

        stockPanel2.stockLegend = stockLegend2;

        chart.panels = [stockPanel1, stockPanel2];

        // AMChart scrollbar settings

        chart.chartScrollbarSettings.enabled = false;

        //var chartScrollbarSettings = new AmCharts.ChartScrollbarSettings();
        //chartScrollbarSettings.graph = graphPrice;
        //chartScrollbarSettings.graphType = "line";
        //chart.chartScrollbarSettings = chartScrollbarSettings;

        // AMChart category axis (x axis) settings

        var categoryAxesSettings = new AmCharts.CategoryAxesSettings()
        categoryAxesSettings.maxSeries = 0;
        categoryAxesSettings.groupToPeriods = ["DD", "WW"]
        categoryAxesSettings.equalSpacing = true;
        categoryAxesSettings.color = BlueColor;
        categoryAxesSettings.inside = true;
        chart.categoryAxesSettings = categoryAxesSettings;

        // AMChart cursor settings

        var chartCursorSettings = new AmCharts.ChartCursorSettings();
        chartCursorSettings.valueLineEnabled = true;
        chartCursorSettings.valueBalloonsEnabled = true;
        chart.chartCursorSettings = chartCursorSettings;

        // AMChart period selector

        var periodSelector = new AmCharts.PeriodSelector();
        periodSelector.position = "top";
        periodSelector.inputFieldsEnabled = false;
        periodSelector.color = BlueColor;
        periodSelector.periods = [
        {
            period: "MAX",
            selected: true,
            label: "MAX"
        }];
        chart.periodSelector = periodSelector;

        // Default Moving Average

        // plotMovingAverageImmediately();

        // Draw the chart

        chart.write('chartdiv');

        // Trend Lines (Magenta lines)

        var upChannelLine = new AmCharts.TrendLine();
        var downChannelLine = new AmCharts.TrendLine();
        var midChannelLine = new AmCharts.TrendLine();

        drawTrendLines(stockPanel1, plotData, 1, 252, upChannelLine, downChannelLine, midChannelLine);

        // Sidebar information

        displayChartInfo();

        // Zoom event

        chart.addListener("zoomed", function (event) {

            // Redraw Trendlines

            var start = 0;
            var end = 0;
            var startDate = new Date(event.startDate);
            var endDate = new Date(event.endDate);

            stockPanel1.removeTrendLine(upChannelLine);
            stockPanel1.removeTrendLine(downChannelLine);
            stockPanel1.removeTrendLine(midChannelLine);
            stockPanel1.validateNow();

            for (var i = 0; i < NumberOfDaysInYear; i++) {
                var plotDate = new Date(plotData[i]["date"]);
                if (startDate.equals(plotDate) == true) start = parseInt(plotData[i]["seasonCount"]);
                if (endDate.equals(plotDate) == true) end = parseInt(plotData[i]["seasonCount"]);
            }

            if (end > 0) {
                drawTrendLines(stockPanel1, plotData, start, end, upChannelLine, downChannelLine, midChannelLine);
            } else {
                drawTrendLines(stockPanel1, plotData, 1, 252, upChannelLine, downChannelLine, midChannelLine);
            }

            // Recalibrate axis

            for (var i = 0; i < NumberOfDaysInYear; i++) {
                var plotDate = new Date(plotData[i]["date"]);
                if (startDate.equals(plotDate) == true) start = i;
                if (endDate.equals(plotDate) == true) end = i;
            }

            if (start == 0 && end == 0) {
                for (var i = 0; i < NumberOfDaysInYear; i++) {
                    if (i == 0) {
                        minValue = parseFloat(plotData[i]["close"]);
                        maxValue = parseFloat(plotData[i]["close"]);
                    } else {
                        if (parseFloat(plotData[i]["close"]) < minValue) minValue = parseFloat(plotData[i]["close"]);
                        if (parseFloat(plotData[i]["close"]) > maxValue) maxValue = parseFloat(plotData[i]["close"]);
                    }
                }
                upDistance = maxValue - parseFloat(plotData[125]["close"]);
                downDistance = parseFloat(plotData[125]["close"]) - minValue;
                if (upDistance > downDistance) {
                    valueAxisPrice.maximum = maxValue;
                    valueAxisPrice.minimum = minValue - (upDistance - downDistance);
                    valueAxisStrikePrice.maximum = maxValue;
                    valueAxisStrikePrice.minimum = minValue - (upDistance - downDistance);
                } else if (upDistance < downDistance) {
                    valueAxisPrice.maximum = maxValue + (downDistance - upDistance);
                    valueAxisPrice.minimum = minValue;
                    valueAxisStrikePrice.maximum = maxValue + (downDistance - upDistance);
                    valueAxisStrikePrice.minimum = minValue;
                }
            } else {
                for (var i = start; i < end + 1; i++) {
                    if (i == start) {
                        minValue = parseFloat(plotData[i]["close"]);
                        maxValue = parseFloat(plotData[i]["close"]);
                    } else {
                        if (parseFloat(plotData[i]["close"]) < minValue) minValue = parseFloat(plotData[i]["close"]);
                        if (parseFloat(plotData[i]["close"]) > maxValue) maxValue = parseFloat(plotData[i]["close"]);
                    }
                }
                if (end > 124) {
                    upDistance = maxValue - parseFloat(plotData[125]["close"]);
                    downDistance = parseFloat(plotData[125]["close"]) - minValue;
                    if (upDistance > downDistance) {
                        valueAxisPrice.maximum = maxValue;
                        valueAxisPrice.minimum = minValue - (upDistance - downDistance);
                        valueAxisStrikePrice.maximum = maxValue;
                        valueAxisStrikePrice.minimum = minValue - (upDistance - downDistance);
                    } else if (upDistance < downDistance) {
                        valueAxisPrice.maximum = maxValue + (downDistance - upDistance);
                        valueAxisPrice.minimum = minValue;
                        valueAxisStrikePrice.maximum = maxValue + (downDistance - upDistance);
                        valueAxisStrikePrice.minimum = minValue;
                    }
                } else {
                    valueAxisPrice.maximum = maxValue;
                    valueAxisPrice.minimum = minValue;
                    valueAxisStrikePrice.maximum = maxValue;
                    valueAxisStrikePrice.minimum = minValue;
                }
            }

            if (start == 0 && end == 0) {
                for (var i = 0; i < NumberOfDaysInYear; i++) {
                    if (i == 0) {
                        minValue = parseFloat(plotData[i]["season"]);
                        maxValue = parseFloat(plotData[i]["season"]);
                    } else {
                        if (parseFloat(plotData[i]["season"]) < minValue) minValue = parseFloat(plotData[i]["season"]);
                        if (parseFloat(plotData[i]["season"]) > maxValue) maxValue = parseFloat(plotData[i]["season"]);
                    }
                }
                upDistance = maxValue - parseFloat(plotData[125]["season"]);
                downDistance = parseFloat(plotData[125]["season"]) - minValue;
                if (upDistance > downDistance) {
                    valueAxisTenYearSeasonality.maximum = maxValue;
                    valueAxisTenYearSeasonality.minimum = minValue - (upDistance - downDistance);
                } else if (upDistance < downDistance) {
                    valueAxisTenYearSeasonality.maximum = maxValue + (downDistance - upDistance);
                    valueAxisTenYearSeasonality.minimum = minValue;
                }
            } else {
                for (var i = start; i < end + 1; i++) {
                    if (i == start) {
                        minValue = parseFloat(plotData[i]["season"]);
                        maxValue = parseFloat(plotData[i]["season"]);
                    } else {
                        if (parseFloat(plotData[i]["season"]) < minValue) minValue = parseFloat(plotData[i]["season"]);
                        if (parseFloat(plotData[i]["season"]) > maxValue) maxValue = parseFloat(plotData[i]["season"]);
                    }
                }
                if (end > 124) {
                    upDistance = maxValue - parseFloat(plotData[125]["season"]);
                    downDistance = parseFloat(plotData[125]["season"]) - minValue;
                    if (upDistance > downDistance) {
                        valueAxisTenYearSeasonality.maximum = maxValue;
                        valueAxisTenYearSeasonality.minimum = minValue - (upDistance - downDistance);
                    } else if (upDistance < downDistance) {
                        valueAxisTenYearSeasonality.maximum = maxValue + (downDistance - upDistance);
                        valueAxisTenYearSeasonality.minimum = minValue;
                    }
                } else {
                    valueAxisTenYearSeasonality.maximum = maxValue;
                    valueAxisTenYearSeasonality.minimum = minValue;
                }
            }

            if (start == 0 && end == 0) {
                for (var i = 0; i < NumberOfDaysInYear; i++) {
                    if (i == 0) {
                        minValue = parseFloat(plotData[i]["season5Year"]);
                        maxValue = parseFloat(plotData[i]["season5Year"]);
                    } else {
                        if (parseFloat(plotData[i]["season5Year"]) < minValue) minValue = parseFloat(plotData[i]["season5Year"]);
                        if (parseFloat(plotData[i]["season5Year"]) > maxValue) maxValue = parseFloat(plotData[i]["season5Year"]);
                    }
                }
                upDistance = maxValue - parseFloat(plotData[125]["season5Year"]);
                downDistance = parseFloat(plotData[125]["season5Year"]) - minValue;
                if (upDistance > downDistance) {
                    valueAxisFiveYearSeasonality.maximum = maxValue;
                    valueAxisFiveYearSeasonality.minimum = minValue - (upDistance - downDistance);
                } else if (upDistance < downDistance) {
                    valueAxisFiveYearSeasonality.maximum = maxValue + (downDistance - upDistance);
                    valueAxisFiveYearSeasonality.minimum = minValue;
                }
            } else {
                for (var i = start; i < end + 1; i++) {
                    if (i == start) {
                        minValue = parseFloat(plotData[i]["season5Year"]);
                        maxValue = parseFloat(plotData[i]["season5Year"]);
                    } else {
                        if (parseFloat(plotData[i]["season5Year"]) < minValue) minValue = parseFloat(plotData[i]["season5Year"]);
                        if (parseFloat(plotData[i]["season5Year"]) > maxValue) maxValue = parseFloat(plotData[i]["season5Year"]);
                    }
                }
                if (end > 124) {
                    upDistance = maxValue - parseFloat(plotData[125]["season5Year"]);
                    downDistance = parseFloat(plotData[125]["season5Year"]) - minValue;
                    if (upDistance > downDistance) {
                        valueAxisFiveYearSeasonality.maximum = maxValue;
                        valueAxisFiveYearSeasonality.minimum = minValue - (upDistance - downDistance);
                    } else if (upDistance < downDistance) {
                        valueAxisFiveYearSeasonality.maximum = maxValue + (downDistance - upDistance);
                        valueAxisFiveYearSeasonality.minimum = minValue;
                    }
                } else {
                    valueAxisFiveYearSeasonality.maximum = maxValue;
                    valueAxisFiveYearSeasonality.minimum = minValue;
                }
            }

            // Refresh panel

            stockPanel1.validateNow();

            // Redisplay side bar information

            displayChartInfo();
        });

        // Mouse movement event

        $("#chartdiv").mousemove(function (event) {
            event = event || window.event;
            fixPageXY(event);

            var xValue = stockPanel1.categoryAxis.xToIndex(event.pageX.toFixed() - 260);
            var currentYear = plotData[125]["date"].getFullYear();

            if (xValue >= 0 && xValue <= 251) {
                var dateValue = (new Date(plotData[xValue]["date"])).toString('M/d/yyyy');
                $('#scannerYear').empty();
                displayScannerYears(seasonYearData, currentYear, xValue, dateValue);
            }

        });

    }

    // Trend Lines (Magenta Channel)

    function getCorrelation(plotData, startIndex, endIndex) {
        var X = 0;
        var Y = 0;
        var sumOfX = 0;
        var sumOfY = 0;
        var sumOfX2 = 0;
        var sumOfY2 = 0;
        var sumOfXY = 0;

        for (var i = startIndex - 1; i < endIndex - 1; i++) {
            X = X + 1;
            Y = parseFloat(plotData[i]["close"]);
            sumOfX = sumOfX + X;
            sumOfY = sumOfY + Y;
            sumOfXY = sumOfXY + (X * Y);
            sumOfX2 = sumOfX2 + (X * X);
            sumOfY2 = sumOfY2 + (Y * Y);
        }
        //r = Σ (xy) / sqrt [ ( Σ x2 ) * ( Σ y2 ) ]
        // return sumOfXY / Math.sqrt(sumOfX2 * sumOfY2); // Simple
        return (sumOfXY - ((sumOfX * sumOfY) / X)) / Math.sqrt(((sumOfX2 - ((sumOfX * sumOfX) / X)) * (sumOfY2 - ((sumOfY * sumOfY) / X)))); // Pearson
    }
    function drawTrendLines(stockPanel, plotData, startIndex, endIndex, upChannelLine, downChannelLine, midChannelLine) {
        var m = 0;
        var NumberOfDays = 0;

        // Get the number of days
        if (endIndex > 126) {
            NumberOfDays = 126 - startIndex + 1;
            chartNoOfDays = NumberOfDays;
        } else {
            NumberOfDays = endIndex - startIndex + 1;
        }
        chartNoOfDays = NumberOfDays; // Use to display the Number of days in the chart.

        // Check for the correlation (you only check for the correlation if the data is more than 30 days onward)
        // Move the startIndex if the correlation is greater than 0.8 both ways to that day
        // Recompute the number of days to that day
        //debugger;
        if (NumberOfDays > 30) {
            var correlationStartIndex = endIndex > 126 ? 126 : endIndex;
            var counter = 0;
            for (var i = correlationStartIndex; i > startIndex - 1; i--) {
                if (counter > 30) {
                    chartCoefficient = Math.abs(getCorrelation(plotData, i, correlationStartIndex));
                    if (chartCoefficient <= 0.9) {
                        startIndex = i;
                        if (endIndex > 126) {
                            NumberOfDays = 126 - startIndex + 1;
                        } else {
                            NumberOfDays = endIndex - startIndex + 1;
                        }
                        break;
                    }
                }
                counter++;
            }
            //debugger;
        } else {
            if (startIndex <= 126) {
                chartCoefficient = Math.abs(getCorrelation(plotData, startIndex, endIndex > 126 ? 126 : endIndex));
            }
        }
        //debugger;
        chartChannelNoOfDays = NumberOfDays; // Use to display the number of days in the channel.

        // Compute for the slope
        if (endIndex > 126) {
            m = (parseFloat(plotData[125]["close"]) - parseFloat(plotData[startIndex - 1]["close"])) / NumberOfDays;

            if (parseFloat(plotData[startIndex - 1]["close"]) == 0) {
                chartSlopePercentage = 0;
            } else {
                chartSlopePercentage = ((parseFloat(plotData[125]["close"]) - parseFloat(plotData[startIndex - 1]["close"])) / parseFloat(plotData[startIndex - 1]["close"])) * 100;
            }
        } else {
            m = (parseFloat(plotData[endIndex - 1]["close"]) - parseFloat(plotData[startIndex - 1]["close"])) / NumberOfDays;

            if (parseFloat(plotData[startIndex - 1]["close"]) == 0) {
                chartSlopePercentage = 0;
            } else {
                chartSlopePercentage = ((parseFloat(plotData[endIndex - 1]["close"]) - parseFloat(plotData[startIndex - 1]["close"])) / parseFloat(plotData[startIndex - 1]["close"])) * 100;
            }
        }

        // Prepare the data (intercepts)
        var b = [];
        for (var i = 0; i < NumberOfDays ; i++) {
            b[i] = parseFloat(plotData[i + startIndex - 1]["close"]) - (m * (i + 1));
        }
        b.sort(function (a, b) {
            return a - b;
        });

        // Set the b-intercepts
        var bMax = b[parseInt(NumberOfDays * .9)];
        var bMid = b[parseInt(NumberOfDays * .5)];
        var bMin = b[parseInt(NumberOfDays * .1)];

        if (bMin != 0) {
            chartChannelRange = ((bMax - bMin) / bMin) * 100;
        } else {
            chartChannelRange = 100;
        }

        // Plot the channels
        upChannelLine.lineColor = GreenColor;
        upChannelLine.initialDate = plotData[startIndex - 1]["date"];
        upChannelLine.finalDate = plotData[endIndex - 1]["date"];
        upChannelLine.initialValue = (m + bMax);
        upChannelLine.finalValue = ((m * (endIndex - startIndex + 1)) + bMax);
        upChannelLine.lineThickness = 2;
        stockPanel.addTrendLine(upChannelLine);

        downChannelLine.lineColor = RedColor;
        downChannelLine.initialDate = plotData[startIndex - 1]["date"];
        downChannelLine.finalDate = plotData[endIndex - 1]["date"];
        downChannelLine.initialValue = (m + bMin);
        downChannelLine.finalValue = ((m * (endIndex - startIndex + 1)) + bMin);
        downChannelLine.lineThickness = 2;
        stockPanel.addTrendLine(downChannelLine);

        midChannelLine.lineColor = MagentaColor;
        midChannelLine.initialDate = plotData[startIndex - 1]["date"];
        midChannelLine.finalDate = plotData[endIndex - 1]["date"];
        midChannelLine.initialValue = (m + bMid);
        midChannelLine.finalValue = ((m * (endIndex - startIndex + 1)) + bMid);
        midChannelLine.lineThickness = 1;
        stockPanel.addTrendLine(midChannelLine);

        stockPanel.validateNow();
    }

    // Sidebar Chart Information

    function displayChartInfo() {
        var GreenColor = "#0FB203";
        var RedColor = "#A80008";

        $("#symbol").empty();
        $("#symbolInfoChart").empty();
        $("#symbolInfoChannel").empty();
        $("#symbolSlopePercentage").empty();
        $("#symbolInfoCoefficient").empty();
        $("#symbolInfoRange").empty();
        $("#symbolInfoSeasonalityCorrelation").empty();

        //$("#symbol").html("<span><b>" + chartSymbol + "</b></span>");
        $("#symbol").html("<span><b>" + chartSymbol + ":</b>&nbsp;<button class='btn btn-success btn-xs' data-toggle='modal' id='openTradierEquity' onclick='openTradierEquity()'>Buy</button>&nbsp;<button class='btn btn-info btn-xs' data-toggle='modal' id='openBrokerOptionChain' onclick='openBrokerOptionChain()'>Option Chain</button></span>");
        $("#symbolInfoChart").html("<a href='#' style='padding: 2px 20px'><span>Chart:</span><span class='pull-right'>" + chartNoOfDays + "</span></a>");
        $("#symbolInfoChannel").html("<a href='#' style='padding: 2px 20px'><span>Channel:</span><span class='pull-right'>" + chartChannelNoOfDays + "</span></a>");
        if (chartSlopePercentage >= 0) {
            var AGR = 0;
            if (chartChannelNoOfDays == 0) {
                AGR = 0;
            } else {
                AGR = (chartSlopePercentage / chartChannelNoOfDays) * 252;
            }
            $("#symbolSlopePercentage").html("<a href='#' style='padding: 2px 20px'><font color='" + GreenColor + "'><span>AGR:</span><span class='pull-right'>" + AGR.toFixed(2) + "%</span></font></a>");
        } else {
            var ADR = 0;
            if (chartChannelNoOfDays == 0) {
                ADR = 0;
            } else {
                ADR = (chartSlopePercentage / chartChannelNoOfDays) * 252;
            }
            $("#symbolSlopePercentage").html("<a href='#' style='padding: 2px 20px'><font color='" + RedColor + "'><span>ADR:</span><span class='pull-right'>" + ADR.toFixed(2) + "%</span></font></a>");
        }

        $("#symbolInfoCoefficient").html("<a href='#' style='padding: 2px 20px'><span>Linear:</span><span class='pull-right'>" + chartCoefficient.toFixed(2) + "</span></a>");
        $("#symbolInfoRange").html("<a href='#' style='padding: 2px 20px'><span>Range:</span><span class='pull-right'>" + chartChannelRange.toFixed(2) + "%</span></a>");

        var corrPriceData = [];
        var corrSeasonData = [];
        while (corrPriceData.length > 0) corrPriceData.pop();
        while (corrSeasonData.length > 0) corrSeasonData.pop();
        for (var i = 0; i < 126; i++) {
            corrPriceData[i] = plotData[i].close;
            corrSeasonData[i] = parseFloat(plotData[i].season);
        }

        chartSeasonalityCorrelation = Math.abs(ss.sample_correlation(corrPriceData, corrSeasonData));

        $("#symbolInfoSeasonalityCorrelation").html("<a href='#' style='padding: 2px 20px'><span>Correlation:</span><span class='pull-right'>" + chartSeasonalityCorrelation.toFixed(2) + "</span></a>");
    }

    // Scanner Years

    function displayScannerYears(seasonYearData, currentYear, xValue, dateValue) {
        var GreenColor = "#0FB203";
        var RedColor = "#A80008";

        var noOfYears = firstClosingPrice.length;

        var win = 0;
        var loss = 0;
        var winTotal = 0;
        var lossTotal = 0;

        $("#scannerYearHeading").empty();
        $("#scannerYearHeading").html("<span>30 Day Scanner:</span><span class='pull-right'>" + dateValue + "</span>");

        $("#scannerYear").append("<li id='ChartIndex'><a href='#' style='padding: 2px 20px'>Day: " + (xValue + 1) + "</a></li>");
        for (var i = 0 ; i < seasonYearData.length; i++) {
            if (i < noOfYears) {
                var Year = currentYear - (noOfYears - i);

                var startValue = AmCharts.roundTo(closeYearData[noOfYears - i - 1][xValue], 2);
                var endValue = AmCharts.roundTo(closeYearData[noOfYears - i - 1][xValue + scannerRange - 1], 2);

                var checked = plottedYearGraphs.indexOf(Year) >= 0 ? "checked" : "";
                var status = "<span><input id='checked" + Year + "' type='checkbox' value='' " + checked + " onclick='checkYear(" + Year + "," + i + ")'></span><span> " + Year + ":</span><span class='pull-right'>No change.</span>";

                if (endValue > startValue) {
                    if (checked == "") win++;
                    if (startValue == 0) {
                        status = "<span><input id='checked" + Year + "' type='checkbox' value='' " + checked + " onclick='checkYear(" + Year + "," + i + ")'></span><font color='" + GreenColor + "'><span> " + Year + "</span><span class='pull-right'>100.00%</span></font>";
                    } else {
                        if (checked == "") winTotal = winTotal + AmCharts.roundTo((((endValue - startValue) / startValue) * 100 * sign(startValue)), 2);
                        status = "<span><input id='checked" + Year + "' type='checkbox' value='' " + checked + " onclick='checkYear(" + Year + "," + i + ")'></span><font color='" + GreenColor + "'><span> " + Year + "</span><span class='pull-right'>" + AmCharts.roundTo((((endValue - startValue) / startValue) * 100 * sign(startValue)), 2) + "%</span></font>";
                    }
                } else if (startValue > endValue) {
                    if (checked == "") loss++;
                    if (endValue == 0) {
                        status = "<span><input id='checked" + Year + "' type='checkbox' value='' " + checked + " onclick='checkYear(" + Year + "," + i + ")'></span><font color='" + RedColor + "'><span> " + Year + "</span><span class='pull-right'>100.00%</span></font>";
                    } else {
                        if (checked == "") lossTotal = lossTotal + AmCharts.roundTo((((startValue - endValue) / endValue) * 100 * sign(endValue)), 2);
                        status = "<span><input id='checked" + Year + "' type='checkbox' value='' " + checked + " onclick='checkYear(" + Year + "," + i + ")'></span><font color='" + RedColor + "'><span> " + Year + "</span><span class='pull-right'>" + AmCharts.roundTo((((startValue - endValue) / endValue) * 100 * sign(endValue)), 2) + "%</span></font>";
                    }
                }
                $("#scannerYear").append("<li id='scannerYearItem" + Year + "'><a id=Y" + Year + " href='#' style='padding: 2px 20px'>" + status + "</a></li>");
            }
        }
        $("#averageScannerTotal").empty();
        if (win >= loss) {
            if (win > 0) {
                $("#averageScannerTotal").html("<span>&nbsp;</span><font color='" + GreenColor + "'><span class='pull-right'>" + win + "/" + loss + " - " + AmCharts.roundTo(winTotal / win, 2) + "%</span></font>");
            }
        } else {
            if (loss > 0) {
                $("#averageScannerTotal").html("<span>&nbsp;</span><font color='" + RedColor + "'><span class='pull-right'>" + loss + "/" + win + " - " + AmCharts.roundTo(lossTotal / loss, 2) + "%</span></font>");
            }
        }
    }
    function checkYear(Year, i) {
        $("#checked" + Year).attr("checked", !$("#checked" + Year).attr("checked"));

        if ($("#checked" + Year).attr("checked") == "checked") {
            if (!!scannerYearGraph[i]) {
                stockPanel1.showGraph(scannerYearGraph[i]);
                plottedYearGraphs.push(Year);
            }
        } else {
            if (!!scannerYearGraph[i]) {
                stockPanel1.hideGraph(scannerYearGraph[i]);
                var index = plottedYearGraphs.indexOf(Year);
                if (index > -1) {
                    plottedYearGraphs.splice(index, 1);
                }
            }
        }
    }

    // Earnings Schedule

    function getEarningsSchedule(symbol) {
        $.ajax({
            url: '/api/StockEarning/' + symbol,
            cache: false,
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            data: {},
            success: function (result) {
                $("#earningSchedule").empty();
                if (result.length > 0) {
                    while (earningDates.length > 0) earningDates.pop();
                    for (var i = 0; i < result.length; i++) {
                        var earningDate = result[i].EarningDate;
                        $("#earningSchedule").append("<li id='earningScheduleItem'><a href='#' style='padding: 2px 20px; text-align: center'>" + earningDate + "</a></li>");
                        earningDates.push(earningDate);
                    }
                }
            }
        });
    }

    // Utilities

    function sign(x) {
        return typeof x === 'number' ? x ? x < 0 ? -1 : 1 : x === x ? 0 : NaN : NaN;
    }
    function fixPageXY(e) {
        if (e.pageX == null && e.clientX != null) {
            var html = document.documentElement
            var body = document.body

            e.pageX = e.clientX + (html.scrollLeft || body && body.scrollLeft || 0)
            e.pageX -= html.clientLeft || 0

            e.pageY = e.clientY + (html.scrollTop || body && body.scrollTop || 0)
            e.pageY -= html.clientTop || 0
        }
    }
    function parseDate(input) {
        var parts = input.split('-');
        return new Date(parts[0], parts[1] - 1, parts[2]);
    }
    function addZeroes(num) {
        // Cast as number
        var num = Number(num);
        // If not a number, return 0
        if (isNaN) {
            return 0;
        }
        // If there is no decimal, or the decimal is less than 2 digits, toFixed
        if (String(num).split(".").length < 2 || String(num).split(".")[1].length <= 2) {
            num = num.toFixed(2);
        }
        // Return the number
        return num;
    }

    // Variable Scanner

    function scanYearlyData(yearlyData, noOfYears, index, daySpan, direction) {
        var result = [];
        var up = 0;
        var down = 0;
        var averageUp = 0;
        var averageDown = 0;
        if (direction == "up") {
            for (var y = 0; y < noOfYears; y++) {
                var startData = yearlyData[y][index];
                var endData = yearlyData[y][index + daySpan - 1];
                if (endData > startData) {
                    up++;
                    if (startData != 0) {
                        averageUp = averageUp + AmCharts.roundTo(((((endData - startData) / startData) * sign(startData)) * 100),2);
                    }
                }
            }
            if (up > 0) {
                averageUp = averageUp / up;
            }
            result[0] = up;
            result[1] = averageUp;
            result[2] = 0;
            result[3] = 0;
        } else {
            for (var y = 0; y < noOfYears; y++) {
                var startData = yearlyData[y][index];
                var endData = yearlyData[y][index + daySpan - 1];
                if (startData > endData) {
                    down++;
                    if (endData != 0) {
                        averageDown = averageDown + AmCharts.roundTo(((((startData - endData) / endData) * sign(endData)) * 100),2);
                    }
                }
            }
            if (down > 0) {
                averageDown = averageDown / down;
            }
            result[0] = 0;
            result[1] = 0;
            result[2] = down;
            result[3] = averageDown;
        }
        return result;
    }
    function varScanner() {
        if (!!chart) {
            // Checking of range values
            var startNoOfDay = parseInt($('#startNoOfDay').val());
            var endNoOfDay = parseInt($('#endNoOfDay').val());
            var process = true;
            var noOfYears = 0;

            noOfYears = firstClosingPrice.length;

            if (!startNoOfDay) {
                startNoOfDay = 10;
            } else {
                if (parseInt(startNoOfDay) >= 10 && parseInt(startNoOfDay) <= 40) {
                    process = true;
                } else {
                    process = false;
                }
            }

            if (!endNoOfDay) {
                endNoOfDay = 40;
            } else {
                if (parseInt(endNoOfDay) >= 10 && parseInt(endNoOfDay) <= 40) {
                    process = true;
                } else {
                    process = false;
                }
            }

            if (process == true) {
                if (parseInt(startNoOfDay) > parseInt(endNoOfDay)) {
                    process = false;
                }
            }
            // Processing
            if (process == false) {
                toastr.error("Invalid range of number of days.");
            } else {
                // if (confirm("Compute variable scanner?") == true) {
                var highestUp = 0;
                var highestUpAverage = 0;
                var highestUpIndex = 0;
                var highestUpDaySpan = 0;
                var highestDown = 0;
                var highestDownAverage = 0;
                var highestDownIndex = 0;
                var highestDownDaySpan = 0;

                // Process result
                for (var d = startNoOfDay; d <= endNoOfDay; d++) {
                    for (var i = 125 ; i < NumberOfDaysInYear - d ; i++) {
                        // Get the yearly result
                        var seasonTenYear = parseFloat(plotData[i]["season"]);
                        var seasonTenYearPlusVarDays = parseFloat(plotData[i + d - 1]["season"]);
                        var result = [];
                        if (seasonTenYearPlusVarDays > seasonTenYear) {
                            //result = scanYearlyData(seasonYearData, 10, i, d, "up");
                            result = scanYearlyData(closeYearData, noOfYears, i, d, "up");
                        } else {
                            //result = scanYearlyData(seasonYearData, 10, i, d, "down");
                            result = scanYearlyData(closeYearData, noOfYears, i, d, "down");
                        }
                        // Compare the yearly result
                        if (result[0] > 0) {
                            if (result[0] > highestUp || (result[0] == highestUp && result[1] > highestUpAverage)) {
                                highestUp = result[0];
                                highestUpAverage = result[1];
                                highestUpIndex = i;
                                highestUpDaySpan = d;
                            }
                        } else if (result[2] > 0) {
                            if (result[2] > highestDown || (result[2] == highestDown && result[3] > highestDownAverage)) {
                                highestDown = result[2];
                                highestDownAverage = result[3];
                                highestDownIndex = i;
                                highestDownDaySpan = d;
                            }
                        }

                    }
                }

                // Plot result
                if (highestUp > 0) {
                    if (!varScannerUp) varScannerUp = new AmCharts.Guide();
                    else stockPanel1.categoryAxis.removeGuide(varScannerUp);

                    varScannerUp.date = plotData[highestUpIndex]["date"];
                    varScannerUp.toDate = plotData[highestUpIndex + highestUpDaySpan]["date"];
                    varScannerUp.fillColor = positiveGuideColor;
                    varScannerUp.fillAlpha = 0.6;
                    //varScannerUp.labelRotation = 90;
                    varScannerUp.inside = true;
                    varScannerUp.label = "Variable Scanner\nUp: " + highestUp + "/" + (noOfYears - highestUp) + " " + highestUpAverage.toFixed(2) + "%\nRange: " + highestUpDaySpan + " Days";
                    varScannerUp.position = "top";
                    stockPanel1.categoryAxis.addGuide(varScannerUp);
                }
                if (highestDown > 0) {
                    if (!varScannerDown) varScannerDown = new AmCharts.Guide();
                    else stockPanel1.categoryAxis.removeGuide(varScannerDown);

                    varScannerDown.date = plotData[highestDownIndex]["date"];
                    varScannerDown.toDate = plotData[highestDownIndex + highestDownDaySpan]["date"];
                    varScannerDown.fillColor = negativeGuideColor;
                    varScannerDown.fillAlpha = 0.6;
                    //varScannerDown.labelRotation = 90;
                    varScannerDown.inside = true;
                    varScannerDown.label = "Variable Scanner\nDown: " + highestDown + "/" + (noOfYears - highestDown) + " " + highestDownAverage.toFixed(2) + "%\nRange: " + highestDownDaySpan + " Days";
                    varScannerDown.position = "top";
                    stockPanel1.categoryAxis.addGuide(varScannerDown);
                }
                stockPanel1.validateNow();

            } // Compute?
            // } // Process = true?
        }  // Chart
    }

    // Broker Account (Free Accounts)

    function verifyBrokerAccount() {
        var username = '@User.Identity.Name';
        $.ajax({
            url: '/api/GetUserRoles/' + username,
            type: 'GET',
            data: {},
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            success: function (Results) {
                if (Results.length > 0) {
                    for (var i = 0; i < Results.length; i++) {
                        if (Results[i].Name == "Broker") {
                            location.href = "/BrokerLogin";
                        }
                    }
                }
            }
        });
    }

    $(document).ready(function () {

        // Scanner day range drop down list

        for (var i = 0 ; i < 252; i++) {
            $("#scannerDayRangeItem").append("<li><a href='#' data-value='" + (i + 1) + "'><b>" + (i + 1) + " Day(s) Scanner</b></a></li>");
        }

        // Scanner day range click event

        $("#scannerDayRangeItem li a").click(function () {
            $("#scannerDayRangeMenu").html("<b>" + $(this).text() + "</b>");
            $("#scannerDayRangeMenu").val($(this).data('value'));

            scannerRange = parseInt($(this).data('value'));
        });

        // Preload symbol

        var symbol = "@Symbol";
        if (symbol != "") {
            chartSymbol = symbol.toUpperCase();
            $('#searchSymbol').val(symbol);
            getEarningsSchedule(symbol);
            getData(symbol);
            userCheck();
        }

        //  After update event on Search Symbol (on exit and enter key press)

        $("#searchSymbol").blur(function () {
            getSymbol();
        });

        $("#searchSymbol").keyup(function (e) {
            if (e.which != 13) {
                return;
            } else {
                this.blur();
            }
        });

        // Earnings global variables

        PrePostEarningsGrid = new wijmo.grid.FlexGrid('#PrePostEarningsGrid');

        // Moving Average variables

        MovingAverageGrid = new wijmo.grid.FlexGrid('#MovingAverageGrid');

        // Tradier Global Variable

        TradierUserProfileGrid = new wijmo.grid.FlexGrid('#TradierAccountGrid');
        TradierOrdersGrid = new wijmo.grid.FlexGrid('#TradierOrdersGrid');
        TradierPositionsGrid = new wijmo.grid.FlexGrid('#TradierPositionsGrid');

        // Option

        OptionCallGrid = new wijmo.grid.FlexGrid('#OptionCallGrid');
        OptionPutGrid = new wijmo.grid.FlexGrid('#OptionPutGrid');

        // Broker Authorization Code
        var url = window.location.href;
        var queryString = url.substring(url.indexOf('#') + 1);
        var broker = "";
        if (queryString.length > 0) {
            var params = {}, queries, temp, i, l;
            queries = queryString.split("&");
            for (i = 0, l = queries.length; i < l; i++) {
                temp = queries[i].split('=');
                params[temp[0]] = temp[1];
            }
            broker = params.broker;
            setCookie("Broker", broker, 1);
        } else {
            broker = "@Broker";
            setCookie("Broker", broker, 1);
        }

        if (broker == "Questrade") {
            QuestradeAccessToken = params.access_token;
            QuestradeRefreshToken = params.refresh_token;
            QuestradeTokenType = params.token_type;
            QuestradeExpiresIn = params.expires_in;
            QuestradeApiServer = params.api_server.replace(/^https?:\/\//, '').replace("/", "");

            setCookie("QuestradeAccessToken", QuestradeAccessToken, 1);
            setCookie("QuestradeRefreshToken", QuestradeRefreshToken, 1);
            setCookie("QuestradeTokenType", QuestradeTokenType, 1);
            setCookie("QuestradeExpiresIn", QuestradeExpiresIn, 1);
            setCookie("QuestradeApiServer", QuestradeApiServer, 1);
        } else {
            TradierAccessToken = getCookie("TradierAccessToken");
            if (TradierAccessToken == "") {
                var code = "@TradierCode";
                if (code != "") {
                    $.ajax({
                        type: 'GET',
                        url: '/api/GetTradierAccessToken/' + code,
                        success: function (Result) {
                            TradierAccessToken = Result.access_token == null ? '' : Result.access_token;
                            setCookie("TradierAccessToken", TradierAccessToken, 1);

                            getTradierAccountNumber(TradierAccessToken);
                        }
                    });
                } else {
                    verifyBrokerAccount();
                }
            } else {
                getTradierAccountNumber(TradierAccessToken); 
            }
        }


        $("a[href='#OptionCall']").on('shown.bs.tab', function (e) {
            OptionCallGrid.invalidate();
        });
        $("a[href='#OptionPut']").on('shown.bs.tab', function (e) {
            OptionPutGrid.invalidate();
        });

        //$.ajax({
        //    type: 'GET',
        //    url: 'https://api.tradier.com/v1/user/profile',
        //    contentType: 'application/json',
        //    beforeSend: function (xhr) {
        //        xhr.setRequestHeader("Authorization", "Bearer iFH6oicABZEt3zTAGlQiL3UQkCN2");
        //    },
        //    success: function (Result) {
        //        alert(Result.id);
        //    }
        //});

        $('#chartBlackBackground').bootstrapToggle('off')
        $('#chartBlackBackground').change(function () {
            if ($(this).prop('checked') == true) {
                $('#chartdiv').addClass('darkDiv');
                $('#wrapper').addClass('darkDiv');
                $('#menu-wrapper').addClass('darkDiv');
                $('#page-wrapper').addClass('darkDiv');
                $('#sidebar-wrapper').addClass('darkDiv');
                document.body.style.backgroundColor = '#030433';
            } else {
                $('#chartdiv').removeClass('darkDiv');
                $('#wrapper').removeClass('darkDiv');
                $('#menu-wrapper').removeClass('darkDiv');
                $('#page-wrapper').removeClass('darkDiv');
                $('#sidebar-wrapper').removeClass('darkDiv');
                document.body.style.backgroundColor = '#FFFFFF';
            }
        })
    });

    function setCookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + "; " + expires;
    }
    function getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1);
            if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
        }
        return "";
    }

</script>

