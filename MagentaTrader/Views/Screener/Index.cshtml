@{
    //ViewBag.Title = "Index";

    var Version = "v.Beta.1.20150515";
}

<link href="/wijmo/styles/wijmo.min.css" rel="stylesheet" />
<script src="/js/jquery-1.10.2.min.js"></script>
<script src="/js/knockout-3.2.0.js"></script>
<script src="/wijmo/controls/wijmo.min.js" type="text/javascript"></script>
<script src="/wijmo/controls/wijmo.grid.min.js" type="text/javascript"></script>
<script src="/js/date.js"></script>

<nav class="navbar navbar-default navbar-fixed-top topnav" role="navigation">
    <div class="container topnav">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand topnav" href="/Home"><span><img src="/img/logo-1.png" /></span><span class="hidden-xs"> - Screener @Version</span></a>
        </div>
    </div>
</nav>

<div class="container">
    <div class="row">
        <h2 class="section-heading">Screener</h2>
        <div class="col-lg-6">
            <p>Strategy</p>
            <select id="Strategy" class="form-control" onchange="Strategy_AfterUpdate()">
                <option value="CUS" selected="selected">Customize</option>
                <option value="SSU">Strong and Steady (Up)</option>
                <option value="SSD">Strong and Steady (Down)</option>
                <option value="WLS">Win/Loss Strategy</option>
                <option value="MEU">Magenta Early Up</option>
                <option value="MED">Magenta Early Down</option>
                <option value="UPL">Upload Symbols</option>
                <option value="FAV">Favorites</option>
            </select>
        </div>
    </div>  
    <br />
    <div class="row" id="parameter1">
        <div class="col-lg-2">
            <p>Exchange</p>
            <select id="Exchange" class="form-control">
                <option value="All">All</option>
                <option value="NASDAQ">NASDAQ</option>
                <option value="NYSE">NYSE</option>
                <option value="AMEX">AMEX</option>
            </select>
        </div>
        <div class="col-lg-2">
            <p>Price</p>
            <input type="text" class="form-control" id="ClosePrice" placeholder="Price - [US $10]">
        </div>
        <div class="col-lg-2">
            <p>Volume</p>
            <input type="text" class="form-control" id="Volume" placeholder="Volume - [1M]">
        </div>
        <div class="col-lg-2">
            <p>Growth(Decay) Rate</p>
            <input type="text" class="form-control" id="GrowthDecayRate" placeholder="Growth(Decay) - [100]">
        </div>
        <div class="col-lg-2">
            <p>Growth(Decay) Time</p>
            <select id="GrowthDecayTime" class="form-control">
                <option value="C0">Current Trend</option>
                <option value="W1">One Week</option>
                <option value="W2">Two Weeks</option>
                <option value="W3">Three Weeks</option>
                <option value="M1">One Month</option>
                <option value="M2">Two Months</option>
                <option value="M3">Three Months</option>
            </select>
        </div>
        <div class="col-lg-2">
            <p>No. of Years</p>
            <select id="NoOfYears" class="form-control">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8" selected="selected">8</option>
                <option value="9">9</option>
                <option value="10">10</option>
            </select>
        </div>
    </div>
    <br />
    <div class="row" id="parameter2">
        <div class="col-lg-2">
            <p>30 Days Linear</p>
            <select id="Correlation30" class="form-control">
                <option value="10" selected="selected">0.10</option>
                <option value="20">0.20</option>
                <option value="30">0.30</option>
                <option value="40">0.40</option>
                <option value="50">0.50</option>
                <option value="60">0.60</option>
                <option value="70">0.70</option>
                <option value="80">0.80</option>
                <option value="90">0.90</option>
                <option value="100">1.00</option>
            </select>
        </div>
        <div class="col-lg-2">
            <p>Favorite Code</p>
            <input type="text" class="form-control" id="FavoriteCode" placeholder="Code">
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-lg-2" id="GetButton">
            <button id="CmdGetResult" type="submit" class="btn btn-primary btn-block" onclick="CmdGetResult_OnClick()">Get Result</button>
        </div>
        <div class="col-lg-2" id="UploadSymbolButton">
            <label class="btn btn-primary" for="symbolFile">
                <input id="symbolFile" type="file" style="display:none;">
                Upload Symbols
            </label>
        </div>
        <div class="col-lg-2" id="SaveButton">
            <button id="CmdSaveXLS" type="submit" class="btn btn-primary btn-block" onclick="CmdSaveXLS_OnClick()">Save Result</button>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-lg-12">
            <div id="ScreenerGrid" class="grid"></div>
            <div class="row">
                <div class="btn-group col-md-7" id="naviagtionPageEvent">
                    <button type="button" class="btn btn-default" id="btnMoveToFirstPageEvent">
                        <span class="glyphicon glyphicon-fast-backward"></span>
                    </button>
                    <button type="button" class="btn btn-default" id="btnMoveToPreviousPageEvent">
                        <span class="glyphicon glyphicon-step-backward"></span>
                    </button>
                    <button type="button" class="btn btn-default" disabled style="width:100px" id="btnCurrentPageEvent"></button>
                    <button type="button" class="btn btn-default" id="btnMoveToNextPageEvent">
                        <span class="glyphicon glyphicon-step-forward"></span>
                    </button>
                    <button type="button" class="btn btn-default" id="btnMoveToLastPageEvent">
                        <span class="glyphicon glyphicon-fast-forward"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>
    <br />
</div>

<div class="modal fade" id="loading" tabindex="-1" role="dialog" aria-labelledby="Loading..." aria-hidden="true">
    <div class="modal-dialog" style="width: 220px;">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Loading...</h4>
            </div>
            <div class="modal-body">
                <img src="/img/progress_bar.gif" />
            </div>
        </div>
    </div>
</div>

<div class="modal" id="YearlyWinLoss" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h4 id="YearlyWinLossTitle" class="modal-title"></h4>
            </div>
            <div class="modal-body">
                <div id="YearlyWinLossGrid" class="grid"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="Favorites" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h4 id="FavoritesTitle" class="modal-title">Download Favorites</h4>
            </div>
            <div class="modal-body">
                <dl class="dl-horizontal">
                    <dt>Favorite Code</dt>
                    <dd>
                        <input class="form-control" id="FavoriteCode" type="text" />
                    </dd>
                </dl>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal" id="CmdFavoritesOk" onclick="CmdFavoritesOk_OnClick()">
                    Ok
                </button>
                <button type="button" class="btn btn-danger" data-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var ScreenerData;
    var ScreenerGrid;
    var YearlyWinLossData;
    var YearlyWinLossGrid;

    var ScreenerSaveData = [];

    var btnFirstPageEvent;
    var btnPreviousPageEvent;
    var btnNextPageEvent;
    var btnLastPageEvent;
    var btnCurrentPageEvent;

    function GetRateColor(Rate) {
        var GreenColor = "#0FB203";
        var RedColor = "#A80008";
        return Rate >= 0 ? GreenColor : RedColor;
    }
    function GetRate(GrowthDecayTime, Result) {
        var returnResult = 0;
        switch (GrowthDecayTime) {
            case "C0":
                returnResult = Result.GrowthDecayRate;
                break;
            case "W1":
                returnResult = Result.GrowthDecayRateW1;
                break;
            case "W2":
                returnResult = Result.GrowthDecayRateW2;
                break;
            case "W3":
                returnResult = Result.GrowthDecayRateW3;
                break;
            case "M1":
                returnResult = Result.GrowthDecayRateM1;
                break;
            case "M2":
                returnResult = Result.GrowthDecayRateM2;
                break;
            case "M3":
                returnResult = Result.GrowthDecayRateM3;
                break;
            default:
                returnResult = 0;
                break;
        }
        return Math.round(returnResult);
    }
    function GetData(Exchange, Price, Volume, GrowthDecayRate, GrowthDecayTime, NoOfYears, Correlation30, Strategy, FavoriteCode) {
        $('#loading').modal('show');
        var d = new wijmo.collections.ObservableArray();

        $.ajax({
            url: '/api/SymbolScreener/' + Exchange + '/' + Price + '/' + Volume + '/' + GrowthDecayRate + '/' + GrowthDecayTime + '/' + NoOfYears + '/' + Correlation30 + '/' + Strategy + '/' + FavoriteCode,
            type: 'GET',
            dataType: 'json',
            success: function (result) {
                for (i = 0; i < result.length; i++) {
                    d.push({
                        Symbol: "<a href='/Software?symbol=" + result[i].SymbolDescription + "' target='_blank'><font color='black'>" + result[i].SymbolDescription + "</font></a>",
                        SymbolRaw: result[i].SymbolDescription,
                        Description: result[i].Description,
                        Exchange: result[i].Exchange,
                        ClosePrice: result[i].ClosePrice,
                        Volume: Math.round(result[i].Volume / 10000) / 100,
                        Rate: GetRate(GrowthDecayTime, result[i]),
                        GrowthDecayRate: Math.round(result[i].GrowthDecayRate),
                        GrowthDecayRateW1: Math.round(result[i].GrowthDecayRateW1),
                        GrowthDecayRateW2: Math.round(result[i].GrowthDecayRateW2),
                        GrowthDecayRateW3: Math.round(result[i].GrowthDecayRateW3),
                        GrowthDecayRateM1: Math.round(result[i].GrowthDecayRateM1),
                        GrowthDecayRateM2: Math.round(result[i].GrowthDecayRateM2),
                        GrowthDecayRateM3: Math.round(result[i].GrowthDecayRateM3),
                        NoOfYears: result[i].NoOfYears,
                        TrendNoOfDays: result[i].TrendNoOfDays,
                        WinLossCurrent30: result[i].WinLossCurrent30,
                        WinLossAverageCurrent30: result[i].WinLossAverageCurrent30,
                        WinLoss20: "<a href='javascript:;' onclick='OpenYearlyWinLoss(20);'><font color='black'>" + result[i].WinLoss20 + "</font></a>",
                        WinLossAverage20: result[i].WinLossAverage20,
                        WinLoss40: "<a href='javascript:;' onclick='OpenYearlyWinLoss(40);'><font color='black'>" + result[i].WinLoss40 + "</font></a>",
                        WinLossAverage40: result[i].WinLossAverage40,
                        WinLoss60: "<a href='javascript:;' onclick='OpenYearlyWinLoss(60);'><font color='black'>" + result[i].WinLoss60 + "</font></a>",
                        WinLoss20Raw: result[i].WinLoss20,
                        WinLoss40Raw: result[i].WinLoss40,
                        WinLoss60Raw: result[i].WinLoss60,
                        WinLossAverage60: result[i].WinLossAverage60,
                        CorrelationCoefficient30: result[i].CorrelationCoefficient30,
                        SeasonalityCorrelation: result[i].SeasonalityCorrelation,
                        MACDTrendNoOfDays: result[i].MACDGrowthDecayRate < 0 ? (result[i].MACDTrendNoOfDays * -1) : result[i].MACDTrendNoOfDays,
                        MACDGrowthDecayRate: result[i].MACDGrowthDecayRate,
                        EMATrendNoOfDays: result[i].EMAGrowthDecayRate < 0 ? (result[i].EMATrendNoOfDays * -1) : result[i].EMATrendNoOfDays,
                        EMAGrowthDecayRate: result[i].EMAGrowthDecayRate,
                        EMAStartDate: result[i].EMAStartDate,
                        EMALinear: result[i].EMALinear
                    });
                }

                while (ScreenerSaveData.length > 0) ScreenerSaveData.pop();
                ScreenerSaveData = d;

                ScreenerData = new wijmo.collections.CollectionView(d);               
                ScreenerData.pageSize = 15;
                $('#loading').modal('hide');
                MakeScreenerGrid();
            },
            statusCode: {
                404: function () {
                    alert('Failed');
                    $('#loading').modal('hide');
                }
            }
        });
    }
    function UpdateNavigateButtonsEvent() {
        if (ScreenerData.pageSize <= 0) {
            document.getElementById('naviagtionPageEvent').style.display = 'none';
            return;
        }
        document.getElementById('naviagtionPageEvent').style.display = 'block';
        if (ScreenerData.pageIndex === 0) {
            btnFirstPageEvent.setAttribute('disabled', 'disabled');
            btnPreviousPageEvent.setAttribute('disabled', 'disabled');
            btnNextPageEvent.removeAttribute('disabled');
            btnLastPageEvent.removeAttribute('disabled');
        }
        else if (ScreenerData.pageIndex === (ScreenerData.pageCount - 1)) {
            btnFirstPageEvent.removeAttribute('disabled');
            btnPreviousPageEvent.removeAttribute('disabled');
            btnLastPageEvent.setAttribute('disabled', 'disabled');
            btnNextPageEvent.setAttribute('disabled', 'disabled');
        }
        else {
            btnFirstPageEvent.removeAttribute('disabled');
            btnPreviousPageEvent.removeAttribute('disabled');
            btnNextPageEvent.removeAttribute('disabled');
            btnLastPageEvent.removeAttribute('disabled');
        }
        btnCurrentPageEvent.innerHTML = (ScreenerData.pageIndex + 1) + ' / ' + ScreenerData.pageCount;
    }
    function MakeGridColumns(Strategy) {
        var gridColumns = [];
        switch (Strategy) {
            case "MEU":
            case "MED":
                gridColumns = [{"header": "Symbol",
                                "binding": "Symbol",
                                "width": 70,
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Price",
                                "binding": "ClosePrice",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Vol (M)",
                                "binding": "Volume",
                                "width": 50,
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Years",
                                "binding": "NoOfYears",
                                "width": 35,
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Correlation",
                                "binding": "SeasonalityCorrelation",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Trend",
                                "binding": "TrendNoOfDays",
                                "width": 35,
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Linear",
                                "binding": "CorrelationCoefficient30",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Rate-T",
                                "binding": "GrowthDecayRate",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "MACD",
                                "binding": "MACDTrendNoOfDays",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "EMA",
                                "binding": "EMATrendNoOfDays",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "EMA Rate",
                                "binding": "EMAGrowthDecayRate",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "EMA Start",
                                "binding": "EMAStartDate",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "EMA Linear",
                                "binding": "EMALinear",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "20 W/L %",
                                "binding": "WinLossAverage20",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "20 W/L",
                                "binding": "WinLoss20",
                                "width": 55,
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "40 W/L %",
                                "binding": "WinLossAverage40",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "40 W/L",
                                "binding": "WinLoss40",
                                "width": 55,
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "60 W/L %",
                                "binding": "WinLossAverage60",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "60 W/L",
                                "binding": "WinLoss60",
                                "width": 55,
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }];
                break;
            default:
                gridColumns = [{"header": "Symbol",
                                "binding": "Symbol",
                                "width": 70,
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Price",
                                "binding": "ClosePrice",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Vol (M)",
                                "binding": "Volume",
                                "width": 50,
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Years",
                                "binding": "NoOfYears",
                                "width": 35,
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Correlation",
                                "binding": "SeasonalityCorrelation",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Trend",
                                "binding": "TrendNoOfDays",
                                "width": 35,
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Linear",
                                "binding": "CorrelationCoefficient30",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Rate-T",
                                "binding": "GrowthDecayRate",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Rate-W1",
                                "binding": "GrowthDecayRateW1",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Rate-W2",
                                "binding": "GrowthDecayRateW2",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Rate-W3",
                                "binding": "GrowthDecayRateW3",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Rate-M1",
                                "binding": "GrowthDecayRateM1",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Rate-M2",
                                "binding": "GrowthDecayRateM2",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "Rate-M3",
                                "binding": "GrowthDecayRateM3",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "20 W/L %",
                                "binding": "WinLossAverage20",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "20 W/L",
                                "binding": "WinLoss20",
                                "width": 55,
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "40 W/L %",
                                "binding": "WinLossAverage40",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "40 W/L",
                                "binding": "WinLoss40",
                                "width": 55,
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "60 W/L %",
                                "binding": "WinLossAverage60",
                                "width": "*",
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }, {
                                "header": "60 W/L",
                                "binding": "WinLoss60",
                                "width": 55,
                                "allowSorting": true,
                                "isContentHtml": true,
                                "wordWrap": true
                            }];
                break;
        }
        return gridColumns;
    }
    function MakeScreenerGrid() {
        var $strategy = document.getElementById('Strategy').value;
        var gridColumns = [];

        gridColumns = MakeGridColumns($strategy);

        ScreenerGrid.dispose();
        ScreenerGrid = new wijmo.grid.FlexGrid('#ScreenerGrid');
        ScreenerGrid.initialize({
            columns: gridColumns,
            autoGenerateColumns: false,
            itemsSource: ScreenerData,
            isReadOnly: true,
            selectionMode: wijmo.grid.SelectionMode.Row,
            itemFormatter: function (panel, r, c, cell) {
                if (wijmo.grid.CellType.Cell == panel.cellType && 
                   (panel.columns[c].binding == 'GrowthDecayRate' || 
                    panel.columns[c].binding == 'GrowthDecayRateW1' || 
                    panel.columns[c].binding == 'GrowthDecayRateW2' ||
                    panel.columns[c].binding == 'GrowthDecayRateW3' ||
                    panel.columns[c].binding == 'GrowthDecayRateM1' ||
                    panel.columns[c].binding == 'GrowthDecayRateM2' ||
                    panel.columns[c].binding == 'GrowthDecayRateM3' ||
                    panel.columns[c].binding == 'WinLossAverage20' ||
                    panel.columns[c].binding == 'WinLossAverage40' ||
                    panel.columns[c].binding == 'WinLossAverage60')) {
                    var cellData = panel.getCellData(r, c);
                    cell.style.color = GetRateColor(cellData);
                    cell.style.fontSize = "75%";
                } else if (wijmo.grid.CellType.Cell == panel.cellType && 
                           (panel.columns[c].binding == 'MACDTrendNoOfDays' ||
                            panel.columns[c].binding == 'EMATrendNoOfDays' ||
                            panel.columns[c].binding == 'EMAGrowthDecayRate')) {
                    var redColor = "#A80008";
                    var blueColor = "#070BB0";

                    var cellData = panel.getCellData(r, c);

                    if (cellData >= 0) {
                        cell.style.color = blueColor;
                    } else {
                        cell.style.color = redColor;
                    }

                    cell.style.fontSize = "75%";
                } else if (wijmo.grid.CellType.ColumnHeader == panel.cellType) {
                    var cellData = panel.getCellData(r, c);
                    cell.style.fontSize = "70%";
                } else {
                    var cellData = panel.getCellData(r, c);
                    cell.style.fontSize = "75%";
                }
            }
        });
        ScreenerGrid.trackChanges = true;
        UpdateNavigateButtonsEvent();
    }
    function DisableScreenFields(disable) {
        document.getElementById('Exchange').disabled = disable;
        document.getElementById('ClosePrice').disabled = disable;
        document.getElementById('Volume').disabled = disable;
        document.getElementById('GrowthDecayRate').disabled = disable;
        document.getElementById('GrowthDecayTime').disabled = disable;
        document.getElementById('NoOfYears').disabled = disable;
        document.getElementById('Correlation30').disabled = disable;
    }

    function CmdGetResult_OnClick() {
        var $exchange = document.getElementById('Exchange').value;
        var $closePrice = parseFloat(document.getElementById('ClosePrice').value);
        var $volume = parseFloat(document.getElementById('Volume').value);
        var $growthDecayRate = parseFloat(document.getElementById('GrowthDecayRate').value);
        var $growthDecayTime = document.getElementById('GrowthDecayTime').value;
        var $noOfYears = parseInt(document.getElementById('NoOfYears').value);
        var $correlation30 = parseFloat(document.getElementById('Correlation30').value);
        var $strategy = document.getElementById('Strategy').value;
        var $favoriteCode = document.getElementById('FavoriteCode').value;

        $closePrice = !$closePrice ? 10 : $closePrice;
        $volume = !$volume ? 1000000 : $volume;
        $growthDecayRate = !$growthDecayRate ? 100 : $growthDecayRate;
        $growthDecayTime = !$growthDecayTime ? "C0" : $growthDecayTime;
        $noOfYears = !$noOfYears ? 8 : $noOfYears;
        $correlation30 = !$correlation30 ? 10 : $correlation30;
        $favoriteCode = !$favoriteCode ? 0 : $favoriteCode;

        GetData($exchange, $closePrice, $volume, $growthDecayRate, $growthDecayTime, $noOfYears, $correlation30, $strategy, $favoriteCode);
    }
    function CmdSaveXLS_OnClick() {
        var CSV = '';
        var screener = [];

        for (i = 0; i < ScreenerSaveData.length; i++) {
            screener.push({
                Symbol: ScreenerSaveData[i].SymbolRaw,
                Description: ScreenerSaveData[i].Description,
                Exchange: ScreenerSaveData[i].Exchange,
                ClosePrice: ScreenerSaveData[i].ClosePrice,
                Volume: ScreenerSaveData[i].Volume,
                NoOfYears: ScreenerSaveData[i].NoOfYears,
                TrendNoOfDays: ScreenerSaveData[i].TrendNoOfDays,
                GrowthDecayRate: ScreenerSaveData[i].GrowthDecayRate,
                GrowthDecayRateW1: ScreenerSaveData[i].GrowthDecayRateW1,
                GrowthDecayRateW2: ScreenerSaveData[i].GrowthDecayRateW2,
                GrowthDecayRateW3: ScreenerSaveData[i].GrowthDecayRateW3,
                GrowthDecayRateM1: ScreenerSaveData[i].GrowthDecayRateM1,
                GrowthDecayRateM2: ScreenerSaveData[i].GrowthDecayRateM2,
                GrowthDecayRateM3: ScreenerSaveData[i].GrowthDecayRateM3,
                WinLossCurrent30: ScreenerSaveData[i].WinLossCurrent30,
                WinLossAverageCurrent30: ScreenerSaveData[i].WinLossAverageCurrent30,
                WinLoss20: ScreenerSaveData[i].WinLoss20Raw,
                WinLossAverage20: ScreenerSaveData[i].WinLossAverage20,
                WinLoss40: ScreenerSaveData[i].WinLoss40Raw,
                WinLossAverage40: ScreenerSaveData[i].WinLossAverage40,
                WinLoss60: ScreenerSaveData[i].WinLoss60Raw,
                WinLossAverage60: ScreenerSaveData[i].WinLossAverage60,
                CorrelationCoefficient30: ScreenerSaveData[i].CorrelationCoefficient30,
                SeasonalityCorrelation: ScreenerSaveData[i].SeasonalityCorrelation,
                MACDTrendNoOfDays: ScreenerSaveData[i].MACDTrendNoOfDays, 
                MACDGrowthDecayRate: ScreenerSaveData[i].MACDGrowthDecayRate,
                EMATrendNoOfDays: ScreenerSaveData[i].EMATrendNoOfDays, 
                EMAGrowthDecayRate: ScreenerSaveData[i].EMAGrowthDecayRate,
                EMAStartDate: ScreenerSaveData[i].EMAStartDate,
                EMALinear: ScreenerSaveData[i].EMALinear
            });
        }

        CSV += 'Screener Data' + '\r\n\n';

        var screenerLabelRow = '';
        for (var s in screener[0]) {
            screenerLabelRow += s + ',';
        }
        screenerLabelRow = screenerLabelRow.slice(0, -1);
        CSV += screenerLabelRow + '\r\n';

        for (var i = 0; i < screener.length; i++) {
            var screenerRow = '';
            for (var s in screener[i]) {
                screenerRow += '"' + screener[i][s] + '",';
            }
            screenerRow.slice(0, screenerRow.length - 1);
            CSV += screenerRow + '\r\n';
        }

        if (CSV == '') {
            alert("No data");
            return;
        }

        // Create filename

        var $exchange = parseInt(document.getElementById('Exchange').value);
        var $closePrice = parseInt(document.getElementById('ClosePrice').value);
        var $volume = parseInt(document.getElementById('Volume').value);
        var $growthdecayrate = parseInt(document.getElementById('GrowthDecayRate').value);
        var $growthdecaytime = document.getElementById('GrowthDecayTime').value;

        $exchange = !$exchange ? "All" : $exchange;
        $closePrice = !$closePrice ? 10 : $closePrice;
        $volume = !$volume ? 1000000 : $volume;
        $growthdecayrate = !$growthdecayrate ? 100 : $growthdecayrate;
        $growthdecaytime = !$growthdecaytime ? "C0" : $growthdecaytime;

        var fileName = 'magenta_screener_' + $exchange + '_' + $closePrice + '_' + $volume + '_' + $growthdecayrate + '_' + $growthdecaytime + '.CSV';

        // Download via <a> link

        var link = document.createElement("a");

        if (link.download !== undefined) {
            var blob = new Blob([CSV], { type: 'text/csv;charset=utf-8;' });
            var url = URL.createObjectURL(blob);
            link.setAttribute("href", url);
            link.setAttribute("download", fileName);
            link.style = "visibility:hidden";
        }

        if (navigator.msSaveBlob) {
            link.addEventListener("click", function (event) {
                var blob = new Blob([CSV], {
                    "type": "text/csv;charset=utf-8;"
                });
                navigator.msSaveBlob(blob, fileName);
            }, false);
        }

        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

    }
    function CmdFavoritesOk_OnClick() {
        var d = new wijmo.collections.ObservableArray();

        var UserId = document.getElementById('FavoriteCode').value;

        $('#loading').modal({
            show: true,
            backdrop: false
        });

        $.ajax({
            url: '/api/FavoritesSymbolScreener/' + UserId,
            type: 'GET',
            traditional: true,
            success: function (result) {
                for (i = 0; i < result.length; i++) {
                    d.push({
                        Symbol: "<a href='/Software?symbol=" + result[i].SymbolDescription + "' target='_blank'><font color='black'>" + result[i].SymbolDescription + "</font></a>",
                        SymbolRaw: result[i].SymbolDescription,
                        Description: result[i].Description,
                        Exchange: result[i].Exchange,
                        ClosePrice: result[i].ClosePrice,
                        Volume: Math.round(result[i].Volume / 10000) / 100,
                        Rate: GetRate(GrowthDecayTime, result[i]),
                        GrowthDecayRate: Math.round(result[i].GrowthDecayRate),
                        GrowthDecayRateW1: Math.round(result[i].GrowthDecayRateW1),
                        GrowthDecayRateW2: Math.round(result[i].GrowthDecayRateW2),
                        GrowthDecayRateW3: Math.round(result[i].GrowthDecayRateW3),
                        GrowthDecayRateM1: Math.round(result[i].GrowthDecayRateM1),
                        GrowthDecayRateM2: Math.round(result[i].GrowthDecayRateM2),
                        GrowthDecayRateM3: Math.round(result[i].GrowthDecayRateM3),
                        NoOfYears: result[i].NoOfYears,
                        TrendNoOfDays: result[i].TrendNoOfDays,
                        WinLossCurrent30: result[i].WinLossCurrent30,
                        WinLossAverageCurrent30: result[i].WinLossAverageCurrent30,
                        WinLoss20: "<a href='javascript:;' onclick='OpenYearlyWinLoss(20);'><font color='black'>" + result[i].WinLoss20 + "</font></a>",
                        WinLossAverage20: result[i].WinLossAverage20,
                        WinLoss40: "<a href='javascript:;' onclick='OpenYearlyWinLoss(40);'><font color='black'>" + result[i].WinLoss40 + "</font></a>",
                        WinLossAverage40: result[i].WinLossAverage40,
                        WinLoss60: "<a href='javascript:;' onclick='OpenYearlyWinLoss(60);'><font color='black'>" + result[i].WinLoss60 + "</font></a>",
                        WinLoss20Raw: result[i].WinLoss20,
                        WinLoss40Raw: result[i].WinLoss40,
                        WinLoss60Raw: result[i].WinLoss60,
                        WinLossAverage60: result[i].WinLossAverage60,
                        CorrelationCoefficient30: result[i].CorrelationCoefficient30,
                        SeasonalityCorrelation: result[i].SeasonalityCorrelation,
                        MACDTrendNoOfDays: result[i].MACDGrowthDecayRate < 0 ? (result[i].MACDTrendNoOfDays * -1) : result[i].MACDTrendNoOfDays,
                        MACDGrowthDecayRate: result[i].MACDGrowthDecayRate,
                        EMATrendNoOfDays: result[i].EMAGrowthDecayRate < 0 ? (result[i].EMATrendNoOfDays * -1) : result[i].EMATrendNoOfDays,
                        EMAGrowthDecayRate: result[i].EMAGrowthDecayRate,
                        EMAStartDate: result[i].EMAStartDate,
                        EMALinear: result[i].EMALinear
                    });
                }

                while (ScreenerSaveData.length > 0) ScreenerSaveData.pop();
                ScreenerSaveData = d;

                ScreenerData = new wijmo.collections.CollectionView(d);
                ScreenerData.pageSize = 15;
                $('#loading').modal('hide');
                MakeScreenerGrid();
            }
        });
    }

    function Strategy_AfterUpdate() {
        var $strategy = document.getElementById('Strategy').value;
        $("#GetButton").hide();
        $("#SaveButton").hide();
        $("#UploadSymbolButton").hide();
        $("#parameter1").show();
        $("#parameter2").show();
        switch($strategy) {
            case "CUS":
                DisableScreenFields(false);
                $("#GetButton").show();
                $("#SaveButton").show();
                break;
            case "SSU":
                document.getElementById('Exchange').value = "All";
                document.getElementById('ClosePrice').value = 10;
                document.getElementById('Volume').value = 800000;
                document.getElementById('GrowthDecayRate').value = 80;
                document.getElementById('NoOfYears').value = 8;
                document.getElementById('Correlation30').value = 10;
                DisableScreenFields(true);
                $("#GetButton").show();
                $("#SaveButton").show();
                break;
            case "SSD":
                document.getElementById('Exchange').value = "All";
                document.getElementById('ClosePrice').value = 10;
                document.getElementById('Volume').value = 800000;
                document.getElementById('GrowthDecayRate').value = -80;
                document.getElementById('NoOfYears').value = 8;
                document.getElementById('Correlation30').value = 10;
                DisableScreenFields(true);
                $("#GetButton").show();
                $("#SaveButton").show();
                break;
            case "WLS":
                DisableScreenFields(true);
                $("#GetButton").show();
                $("#SaveButton").show();
                break;
            case "MEU":
            case "MED":
                DisableScreenFields(true);
                document.getElementById('Exchange').value = "All";
                document.getElementById('ClosePrice').value = 10;
                document.getElementById('Volume').value = 800000;
                document.getElementById('NoOfYears').value = 8;

                document.getElementById('Exchange').disabled = false;
                document.getElementById('ClosePrice').disabled = false;
                document.getElementById('Volume').disabled = false;
                document.getElementById('NoOfYears').disabled = false;

                $("#GetButton").show();
                $("#SaveButton").show();
                break;
            case "UPL":
                $("#SaveButton").show();
                $("#UploadSymbolButton").show();
                $("#parameter1").hide();
                $("#parameter2").hide();
                break;
            case "FAV":
                $('#Favorites').modal({
                    show: true,
                    backdrop: false
                });
                $("#SaveButton").show();
                $("#parameter1").hide();
                $("#parameter2").hide();
        }
    }

    function OpenYearlyWinLoss(range) {
        var symbol = ScreenerData.currentItem.SymbolRaw;

        $('#loading').modal({
            show: true,
            backdrop: false
        });
        $.ajax({
            url: '/api/StockPrice/' + symbol,
            cache: false,
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            data: {},
            success: function (data) {
                $('#loading').modal('hide');
                if (data.StockPrices.length > 0) {
                    // Prepare the closing price data
                    var stockPrices = data.StockPrices;
                    var closeYearData = [];
                    var countYear = 0;
                    var dayIndex = 251;
                    var NumberOfDaysInYear = 252;
                    var seasonYearNo = 12;
                    while (closeYearData.length > 0) closeYearData.pop();
                    for (var i = 0; i < seasonYearNo; i++) {
                        closeYearData[i] = [];
                        for (var d = 0; d < NumberOfDaysInYear; d++) closeYearData[i].push(0);
                    }
                    for (var i = 126; i < stockPrices.length; i++) {
                        closeYearData[countYear][dayIndex] = parseFloat(stockPrices[i]["ClosePrice"]);
                        dayIndex--;
                        if (dayIndex == -1) {
                            dayIndex = 251;
                            countYear++;
                        }
                    }
                    // Compute for the year to year average win loss
                    var currentYear = parseDate(stockPrices[0]["QuoteDate"]).getFullYear();
                    var startIndex = 125;
                    var endIndex = startIndex + (range - 1);
                    var averageWinLoss = 0;
                    var winLossData = new wijmo.collections.ObservableArray();
                    for (var i = 0; i < 10; i++) {
                        if ((closeYearData[i][endIndex] + closeYearData[i][startIndex]) > 0) {
                            if (closeYearData[i][endIndex] >= closeYearData[i][startIndex]) {
                                if (closeYearData[i][startIndex] > 0)
                                    averageWinLoss = ((closeYearData[i][endIndex] - closeYearData[i][startIndex]) / closeYearData[i][startIndex]);
                            }
                            else {
                                if (closeYearData[i][endIndex] > 0)
                                    averageWinLoss = ((closeYearData[i][endIndex] - closeYearData[i][startIndex]) / closeYearData[i][endIndex]);
                            }
                            winLossData.push({
                                year: (currentYear-i-1).toString(),
                                averageWinLoss: averageWinLoss * 100,
                            });
                        }
                    }
                    // Show modal
                    $('#YearlyWinLoss').modal({
                        show: true,
                        backdrop: false
                    });
                    $("#YearlyWinLossTitle").html("<b>" + symbol + " : </b> " + range + " Days Win/Loss");
                    // Create the grid
                    YearlyWinLossData = new wijmo.collections.CollectionView(winLossData);
                    YearlyWinLossGrid.dispose();
                    YearlyWinLossGrid = new wijmo.grid.FlexGrid('#YearlyWinLossGrid');
                    YearlyWinLossGrid.initialize({
                        columns: [
                                    {
                                        "header": "Year",
                                        "binding": "year",
                                        "width": "*",
                                        "allowSorting": true,
                                        "isContentHtml": true
                                    }, {
                                        "header": "Win/(Loss)",
                                        "binding": "averageWinLoss",
                                        "width": "*",
                                        "allowSorting": true,
                                        "isContentHtml": true
                                    }

                        ],
                        autoGenerateColumns: false,
                        itemsSource: YearlyWinLossData,
                        isReadOnly: true,
                        selectionMode: wijmo.grid.SelectionMode.Row,
                        itemFormatter: function (panel, r, c, cell) {
                            if (wijmo.grid.CellType.Cell == panel.cellType &&
                               (panel.columns[c].binding == 'averageWinLoss')) {
                                var cellData = panel.getCellData(r, c);
                                cell.style.color = GetRateColor(cellData);
                            }
                        }
                    });
                    YearlyWinLossGrid.trackChanges = true;
                } else {
                    alert("Please retry.  Server is busy.");
                }
            }
        }).fail(
                function (xhr, textStatus, err) {
                    alert(err);
                }
        );

    }
    function parseDate(input) {
        var parts = input.split('-');
        return new Date(parts[0], parts[1] - 1, parts[2]);
    }

    $(document).ready(function () {
        ScreenerGrid = new wijmo.grid.FlexGrid('#ScreenerGrid');
        YearlyWinLossGrid = new wijmo.grid.FlexGrid('#YearlyWinLossGrid');

        while (ScreenerSaveData.length > 0) ScreenerSaveData.pop();

        btnFirstPageEvent = document.getElementById('btnMoveToFirstPageEvent');
        btnPreviousPageEvent = document.getElementById('btnMoveToPreviousPageEvent');
        btnNextPageEvent = document.getElementById('btnMoveToNextPageEvent');
        btnLastPageEvent = document.getElementById('btnMoveToLastPageEvent');
        btnCurrentPageEvent = document.getElementById('btnCurrentPageEvent');

        btnFirstPageEvent.addEventListener('click', function () {
            ScreenerData.moveToFirstPage();
            UpdateNavigateButtonsEvent();
        });
        btnPreviousPageEvent.addEventListener('click', function () {
            ScreenerData.moveToPreviousPage();
            UpdateNavigateButtonsEvent();
        });
        btnNextPageEvent.addEventListener('click', function () {
            ScreenerData.moveToNextPage();
            UpdateNavigateButtonsEvent();
        });
        btnLastPageEvent.addEventListener('click', function () {
            ScreenerData.moveToLastPage();
            UpdateNavigateButtonsEvent();
        });

        $("#GetButton").show();
        $("#SaveButton").show();
        $("#UploadSymbolButton").hide();

        document.getElementById('symbolFile').onchange = function () {
            var file = this.files[0];
            var reader = new FileReader();
            var data = [];
            var d = new wijmo.collections.ObservableArray();
            reader.onload = function (progressEvent) {
                var lines = this.result.split('\n');
                for (var line = 0; line < lines.length; line++) {
                    var buf = lines[line].replace(/['"]+/g, '');
                    data.push(buf.replace(/(\r\n|\n|\r)/gm, ""));
                }
                $.ajax({
                    url: '/api/UploadedSymbolScreener',
                    type: 'GET',
                    data: { Symbols: data },
                    traditional: true,
                    success: function (result) {
                        for (i = 0; i < result.length; i++) {
                            d.push({
                                Symbol: "<a href='/Software?symbol=" + result[i].SymbolDescription + "' target='_blank'><font color='black'>" + result[i].SymbolDescription + "</font></a>",
                                SymbolRaw: result[i].SymbolDescription,
                                Description: result[i].Description,
                                Exchange: result[i].Exchange,
                                ClosePrice: result[i].ClosePrice,
                                Volume: Math.round(result[i].Volume / 10000) / 100,
                                Rate: GetRate(GrowthDecayTime, result[i]),
                                GrowthDecayRate: Math.round(result[i].GrowthDecayRate),
                                GrowthDecayRateW1: Math.round(result[i].GrowthDecayRateW1),
                                GrowthDecayRateW2: Math.round(result[i].GrowthDecayRateW2),
                                GrowthDecayRateW3: Math.round(result[i].GrowthDecayRateW3),
                                GrowthDecayRateM1: Math.round(result[i].GrowthDecayRateM1),
                                GrowthDecayRateM2: Math.round(result[i].GrowthDecayRateM2),
                                GrowthDecayRateM3: Math.round(result[i].GrowthDecayRateM3),
                                NoOfYears: result[i].NoOfYears,
                                TrendNoOfDays: result[i].TrendNoOfDays,
                                WinLossCurrent30: result[i].WinLossCurrent30,
                                WinLossAverageCurrent30: result[i].WinLossAverageCurrent30,
                                WinLoss20: "<a href='javascript:;' onclick='OpenYearlyWinLoss(20);'><font color='black'>" + result[i].WinLoss20 + "</font></a>",
                                WinLossAverage20: result[i].WinLossAverage20,
                                WinLoss40: "<a href='javascript:;' onclick='OpenYearlyWinLoss(40);'><font color='black'>" + result[i].WinLoss40 + "</font></a>",
                                WinLossAverage40: result[i].WinLossAverage40,
                                WinLoss60: "<a href='javascript:;' onclick='OpenYearlyWinLoss(60);'><font color='black'>" + result[i].WinLoss60 + "</font></a>",
                                WinLoss20Raw: result[i].WinLoss20,
                                WinLoss40Raw: result[i].WinLoss40,
                                WinLoss60Raw: result[i].WinLoss60,
                                WinLossAverage60: result[i].WinLossAverage60,
                                CorrelationCoefficient30: result[i].CorrelationCoefficient30,
                                SeasonalityCorrelation: result[i].SeasonalityCorrelation,
                                MACDTrendNoOfDays: result[i].MACDGrowthDecayRate < 0 ? (result[i].MACDTrendNoOfDays * -1) : result[i].MACDTrendNoOfDays,
                                MACDGrowthDecayRate: result[i].MACDGrowthDecayRate,
                                EMATrendNoOfDays: result[i].EMAGrowthDecayRate < 0 ? (result[i].EMATrendNoOfDays * -1) : result[i].EMATrendNoOfDays,
                                EMAGrowthDecayRate: result[i].EMAGrowthDecayRate,
                                EMAStartDate: result[i].EMAStartDate,
                                EMALinear: result[i].EMALinear
                            });
                        }

                        while (ScreenerSaveData.length > 0) ScreenerSaveData.pop();
                        ScreenerSaveData = d;

                        ScreenerData = new wijmo.collections.CollectionView(d);
                        ScreenerData.pageSize = 15;
                        $('#loading').modal('hide');
                        MakeScreenerGrid();
                    }
                });
            };
            reader.readAsText(file);
        };
    });
</script>

<script src="/lib/jquery/js/jquery.js"></script>
<script src="/lib/bootstrap/js/bootstrap.js"></script>
<script src="/wijmo/controls/wijmo.input.min.js"></script>
<script src="/wijmo/interop/knockout/wijmo.knockout.min.js"></script>
